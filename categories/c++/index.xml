<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on VastCircle's blog</title><link>https://VastCircle.github.io/categories/c++/</link><description>Recent content in C++ on VastCircle's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 03 Apr 2025 19:11:11 +0800</lastBuildDate><atom:link href="https://VastCircle.github.io/categories/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>C++友元，析构函数，类型转换</title><link>https://VastCircle.github.io/2025/c-%E5%8F%8B%E5%85%83%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 03 Apr 2025 19:11:11 +0800</pubDate><guid>https://VastCircle.github.io/2025/c-%E5%8F%8B%E5%85%83%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</guid><description>&lt;h2 id="友元类">友元类&lt;/h2>
&lt;p>在一个类中指明其他的类（或者）函数能够直接访问该类中的private和protected成员。&lt;/p>
&lt;p>在类的成员函数外部直接访问对象的私有成员。&lt;/p></description></item><item><title>C++_template</title><link>https://VastCircle.github.io/2025/c-_template/</link><pubDate>Wed, 19 Mar 2025 17:10:31 +0800</pubDate><guid>https://VastCircle.github.io/2025/c-_template/</guid><description>&lt;h2 id="函数模板">函数模板&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">template&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#c678dd">typename&lt;/span> &lt;span style="color:#e06c75">type&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">ret&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#e06c75">type&lt;/span> &lt;span style="color:#e06c75">func&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#e06c75">name&lt;/span>(&lt;span style="color:#e06c75">parameter&lt;/span> &lt;span style="color:#e06c75">list&lt;/span>){}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">template&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#c678dd">typename&lt;/span> &lt;span style="color:#e06c75">T&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">inline&lt;/span> &lt;span style="color:#e06c75">T&lt;/span> &lt;span style="color:#c678dd">const&lt;/span>&lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">Max&lt;/span> (&lt;span style="color:#e06c75">T&lt;/span> &lt;span style="color:#c678dd">const&lt;/span>&lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>, &lt;span style="color:#e06c75">T&lt;/span> &lt;span style="color:#c678dd">const&lt;/span>&lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">?&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>:&lt;span style="color:#e06c75">a&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">template&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">type&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">class&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#e06c75">name&lt;/span> { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 模板类 TimeBuffer&amp;lt;数据类型&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">template&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Stack&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Stack&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">~&lt;/span>&lt;span style="color:#e06c75">Stack&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#61afef;font-weight:bold">push&lt;/span>(&lt;span style="color:#e06c75">T&lt;/span> &lt;span style="color:#e06c75">t&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">T&lt;/span> &lt;span style="color:#61afef;font-weight:bold">pop&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#61afef;font-weight:bold">isEmpty&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">T&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">m_pT&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">m_maxSize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">m_size&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">template&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">Stack&lt;/span>&lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#e06c75">T&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;::&lt;/span>&lt;span style="color:#e06c75">Stack&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">m_maxSize&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">100&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">m_size&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">m_pT&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">T&lt;/span>[&lt;span style="color:#e06c75">m_maxSize&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>C++虚函数</title><link>https://VastCircle.github.io/2025/c-%E8%99%9A%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 13 Mar 2025 17:16:58 +0800</pubDate><guid>https://VastCircle.github.io/2025/c-%E8%99%9A%E5%87%BD%E6%95%B0/</guid><description>&lt;p>C++多态(polymorphism)是通过虚函数来实现的，虚函数允许子类重新定义成员函数，而子类重新定义父类的做法称为覆盖(override)，或者称为重写。&lt;/p></description></item></channel></rss>