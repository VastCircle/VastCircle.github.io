<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VastCircle's blog</title><link>https://VastCircle.github.io/</link><description>Recent content on VastCircle's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 30 Jan 2025 23:55:06 +0800</lastBuildDate><atom:link href="https://VastCircle.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Scala_var</title><link>https://VastCircle.github.io/2025/scala_var/</link><pubDate>Thu, 30 Jan 2025 23:55:06 +0800</pubDate><guid>https://VastCircle.github.io/2025/scala_var/</guid><description>&lt;p>在boom的代码中看到挺多var的使用，来记录一下&lt;/p>
&lt;p>var类型:在处理过程中可以多次重写&lt;/p>
&lt;p>val类型:在处理过程中只能分配一次&lt;/p>
&lt;p>例如，在表搜索中，考虑存储为 ID 和值对的类似散列的结构，并搜索与&lt;a class="link" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%B7%A5%E5%C3%CD" target="_blank" rel="noopener"
>散列值&lt;/a>匹配的地址值。 如果同一个ID在表中多次存在，则表中地址较大的值优先。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 144;
flex-basis: 347px"
>
&lt;a href="https://VastCircle.github.io/2025/scala_var/image-20250131001319453.png" data-size="1136x784">
&lt;img src="https://VastCircle.github.io/2025/scala_var/image-20250131001319453.png"
width="1136"
height="784"
srcset="https://VastCircle.github.io/2025/scala_var/image-20250131001319453_hu12909374480385438716.png 480w, https://VastCircle.github.io/2025/scala_var/image-20250131001319453_hu15071495624276123865.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">entry_id&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">8.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">entry_value&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">32.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">is_hit&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span> &lt;span style="color:#7f848e">// 检查条目是否与id值匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">hit_value&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">32.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// 如果命中，选择条目i的值，否则继承前一个条目的结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">is_hit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">entry_id&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hit_value&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">is_hit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">entry_value&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#c678dd">if&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">==&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">hit_value&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">id_out&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">hit_value&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">7&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">id_hit&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">is_hit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">7&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因此，为了保留前面的条目，&lt;code>hit_value&lt;/code>有多少条目就准备多少条目，并且只有在索引为0时才添加特殊处理，有点麻烦。&lt;code>var&lt;/code>解决方案是使用可以像过程类型一样编写的类型（即可以被覆盖） 。&lt;/p>
&lt;p>首先，&lt;code>is_hit&lt;/code>和&lt;code>hit_value&lt;/code>不需要有多个条目。当然，在硬件上生成时，&lt;code>val&lt;/code>硬件数量保持不变（因为它相当于使用），但&lt;a class="link" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9" target="_blank" rel="noopener"
>源代码&lt;/a>数量减少了。&lt;/p>
&lt;p>尽管两种情况下生成的硬件数量相同，但此表示法也可用于减少 Chisel 描述的数量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">entry_id&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">8.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">entry_value&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">32.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">var&lt;/span> &lt;span style="color:#e06c75">is_hit&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">var&lt;/span> &lt;span style="color:#e06c75">hit_id&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">is_hit&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">entry_id&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hit_id&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">is_hit&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">entry_value&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">hit_id&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">id_out&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">hit_id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">id_hit&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">is_hit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">w_en&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">entry_id&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">w_addr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">w_id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">entry_value&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">w_addr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">w_value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://msyksphinz.hatenablog.com/entry/2020/01/02/040000" target="_blank" rel="noopener"
>var的使用&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>A_Primer_on_Hardware_prefetching读书笔记1</title><link>https://VastCircle.github.io/2025/a_primer_on_hardware_prefetching%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01/</link><pubDate>Sat, 25 Jan 2025 23:47:50 +0800</pubDate><guid>https://VastCircle.github.io/2025/a_primer_on_hardware_prefetching%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山邀请昆前端设计</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/</link><pubDate>Sat, 25 Jan 2025 20:04:28 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/</guid><description>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 420px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125201649546.png" data-size="1289x735">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125201649546.png"
width="1289"
height="735"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125201649546_hu5313535549544468500.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125201649546_hu12494660225624797019.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125201806026.png" data-size="1288x723">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125201806026.png"
width="1288"
height="723"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125201806026_hu3282352754963242587.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125201806026_hu7052386201774002155.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 174;
flex-basis: 418px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125201925858.png" data-size="1290x739">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125201925858.png"
width="1290"
height="739"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125201925858_hu5130071300724102714.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125201925858_hu13326075373490491720.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>local history 局部信息 , ret call&lt;/p>
&lt;p>global history 跳和不跳历史的整合&lt;/p>
&lt;p>path history 历史上执行数据的信息&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 185;
flex-basis: 444px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202254842.png" data-size="1299x702">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202254842.png"
width="1299"
height="702"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202254842_hu1864285601343512291.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202254842_hu17761867948385376075.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 423px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202406988.png" data-size="1277x724">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202406988.png"
width="1277"
height="724"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202406988_hu5239899832585733615.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202406988_hu6077461952547340340.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 417px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202500649.png" data-size="1289x741">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202500649.png"
width="1289"
height="741"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202500649_hu1756788700381624836.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202500649_hu3580992123191101862.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 430px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202622017.png" data-size="1303x727">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202622017.png"
width="1303"
height="727"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202622017_hu15764123189187171100.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125202622017_hu15730768683467952673.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>如果推测路径都是错误，只恢复栈顶项要出问题&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 415px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125212726625.png" data-size="1286x742">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125212726625.png"
width="1286"
height="742"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125212726625_hu3321055832828768078.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125212726625_hu10080240662695436693.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 434px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125212835264.png" data-size="1289x712">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125212835264.png"
width="1289"
height="712"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125212835264_hu8865752756892700892.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125212835264_hu17030924336634220861.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213105611.png" data-size="1304x732">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213105611.png"
width="1304"
height="732"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213105611_hu3047606033198726985.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213105611_hu7966323556390653740.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213238538.png" data-size="1300x729">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213238538.png"
width="1300"
height="729"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213238538_hu10525417482001917343.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213238538_hu11960493991131754316.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 432px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213527707.png" data-size="1351x749">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213527707.png"
width="1351"
height="749"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213527707_hu4929350293780824950.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213527707_hu9439874678027195665.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>分支预测发生阻塞，对icache也会阻塞 ， 反之亦然&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 429px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213629065.png" data-size="1289x720">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213629065.png"
width="1289"
height="720"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213629065_hu9578196546098211487.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125213629065_hu11868778415671093603.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 422px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214319669.png" data-size="1275x724">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214319669.png"
width="1275"
height="724"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214319669_hu3135548037475315465.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214319669_hu6040510879174637339.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>34byte为了保证万一最后有4Byte的指令，确保其也能取出&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214332832.png" data-size="1298x728">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214332832.png"
width="1298"
height="728"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214332832_hu14816180328938521506.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214332832_hu6287585335875043597.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>icache是sram结构&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 424px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214506016.png" data-size="1287x728">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214506016.png"
width="1287"
height="728"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214506016_hu1309356416656210746.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214506016_hu1203699640532281212.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 424px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214702286.png" data-size="1280x723">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214702286.png"
width="1280"
height="723"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214702286_hu12125651216932534330.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214702286_hu7772410048900060624.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 428px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214948074.png" data-size="1285x719">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214948074.png"
width="1285"
height="719"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214948074_hu8254234878908580295.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125214948074_hu7745590974781220214.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 186;
flex-basis: 447px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215200109.png" data-size="1280x686">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215200109.png"
width="1280"
height="686"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215200109_hu7057460067798493676.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215200109_hu12266319039879837794.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>预译码：分支类型，指令边界之类的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 430px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215358388.png" data-size="1272x709">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215358388.png"
width="1272"
height="709"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215358388_hu2806172159922823095.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215358388_hu14354932787344205688.png 1024w"
loading="lazy"
alt="image-20250125215358388">
&lt;/a>
&lt;figcaption>image-20250125215358388&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 421px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215444681.png" data-size="1264x720">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215444681.png"
width="1264"
height="720"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215444681_hu16998468147780128561.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215444681_hu10156733109374295798.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 171;
flex-basis: 411px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215539523.png" data-size="1246x727">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215539523.png"
width="1246"
height="727"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215539523_hu4175606600736377838.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215539523_hu11507431473102083175.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 421px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215733769.png" data-size="1260x717">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215733769.png"
width="1260"
height="717"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215733769_hu4189893763819133752.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215733769_hu18361387003019248012.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>这个和fetch的第一级流水是一样的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 428px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215951736.png" data-size="1267x710">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215951736.png"
width="1267"
height="710"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215951736_hu16513381782982797852.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125215951736_hu17991664281858181207.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220218356.png" data-size="1283x720">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220218356.png"
width="1283"
height="720"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220218356_hu16688696041645645064.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220218356_hu17836880446606267358.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 416px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220309995.png" data-size="1249x719">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220309995.png"
width="1249"
height="719"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220309995_hu11093776727145513619.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220309995_hu876876881344644794.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 432px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220400205.png" data-size="1277x708">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220400205.png"
width="1277"
height="708"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220400205_hu17150044383471701865.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220400205_hu13089926589212958700.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 420px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220455879.png" data-size="1273x726">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220455879.png"
width="1273"
height="726"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220455879_hu15986009629256061306.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220455879_hu14923114302416641944.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 174;
flex-basis: 417px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220612895.png" data-size="1271x730">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220612895.png"
width="1271"
height="730"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220612895_hu8003981607540117608.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220612895_hu11158146449606601304.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 433px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220750372.png" data-size="1282x709">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220750372.png"
width="1282"
height="709"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220750372_hu8504623002325946536.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220750372_hu14237845276653667470.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 441px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220846772.png" data-size="1312x714">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220846772.png"
width="1312"
height="714"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220846772_hu13820484009164292748.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125220846772_hu4554135973117473413.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 170;
flex-basis: 408px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221035705.png" data-size="1269x745">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221035705.png"
width="1269"
height="745"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221035705_hu3956000376740880894.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221035705_hu3423017137262447421.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 189;
flex-basis: 455px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221339031.png" data-size="1298x684">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221339031.png"
width="1298"
height="684"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221339031_hu3037334936455658415.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221339031_hu1629539796569041112.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 424px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221658177.png" data-size="1266x716">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221658177.png"
width="1266"
height="716"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221658177_hu2965822525364337515.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221658177_hu16893893157764978554.png 1024w"
loading="lazy"
alt="=">
&lt;/a>
&lt;figcaption>=&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 172;
flex-basis: 413px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221812102.png" data-size="1290x748">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221812102.png"
width="1290"
height="748"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221812102_hu11842381240453513820.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221812102_hu12895572228571645181.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 174;
flex-basis: 417px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221858286.png" data-size="1326x762">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221858286.png"
width="1326"
height="762"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221858286_hu9912886505061697888.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125221858286_hu1745648191551100358.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 425px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125222309867.png" data-size="1281x723">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125222309867.png"
width="1281"
height="723"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125222309867_hu5697386879227968360.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125222309867_hu15516571516034760131.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125222454241.png" data-size="1282x720">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125222454241.png"
width="1282"
height="720"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125222454241_hu4718990998627182693.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125222454241_hu6545777842918578427.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223112389.png" data-size="1304x732">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223112389.png"
width="1304"
height="732"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223112389_hu16812730385343383443.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223112389_hu3642540139233748388.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 431px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223347566.png" data-size="1292x718">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223347566.png"
width="1292"
height="718"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223347566_hu17394294099798664745.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223347566_hu6219986072048154627.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 424px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223424236.png" data-size="1405x795">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223424236.png"
width="1405"
height="795"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223424236_hu10533917165269095281.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223424236_hu12403175391668268063.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 441px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223520040.png" data-size="1330x723">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223520040.png"
width="1330"
height="723"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223520040_hu1907001566319548418.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223520040_hu9630215972049302296.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 430px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223600009.png" data-size="1301x726">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223600009.png"
width="1301"
height="726"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223600009_hu9789166561176262372.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%98%86%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/image-20250125223600009_hu12683926807117615045.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Big Small Runahead</title><link>https://VastCircle.github.io/2025/big-small-runahead/</link><pubDate>Sat, 25 Jan 2025 18:38:54 +0800</pubDate><guid>https://VastCircle.github.io/2025/big-small-runahead/</guid><description>&lt;p>在大核里&lt;/p>
&lt;hr>
&lt;p>stride load&lt;/p>
&lt;p>RPT : ( pc : 40 addr : 40 stride : 16 state : 2 最内层检测位 : 1)&lt;/p>
&lt;p>当发现检测位为1，可以去清空VTT和FLR ，重新开始&lt;/p>
&lt;p>每当重新遇到启动discoder mode 的pc时， 会清空所有的检测位&lt;/p>
&lt;p>Taint Tracker&lt;/p>
&lt;p>VTT ： 依赖链的建立 ,污点向量记录&lt;/p>
&lt;p>FLR : 记录最后一个load ，更新FLR时，清空SBB和LCR&lt;/p>
&lt;p>loop bound detector&lt;/p>
&lt;p>SBB:是否处理过分支&lt;/p>
&lt;p>LCR:保存上一个比较指令的源和目标寄存器的ID (x86是这样的) ， riscv的话，累加指令？&lt;/p>
&lt;p>bne s0,s4 ,1031a&lt;/p>
&lt;p>beqz s2,10362&lt;/p>
&lt;hr>
&lt;p>小核的执行单元和访存单元 ，写回单元（） ， 需不需要写小核的寄存器 ？&lt;/p>
&lt;p>发一条小核执行一条 ？&lt;/p>
&lt;p>什么时候发送?&lt;/p>
&lt;p>找到 stride load 和 loop bound , 再次进入前一个stride load 的时候&lt;/p>
&lt;p>PCv 来记录 stride load pc ，在发现检测位为1时可以去更新PCv, 并且清空VTT和 FLR&lt;/p>
&lt;p>下一轮会把所有标记为脏的指令全部都发送到一个结构里去 ， 然后再用一个结构向量化转发给多个小核（可以在标记的时候就发送吗 ？）&lt;/p>
&lt;p>发送给某个结构的内容？&lt;/p>
&lt;p>能使得小核成功执行指令的 部分&lt;/p>
&lt;p>stride load addr step ， 可能不止一条stride load ,&lt;/p>
&lt;p>只有stride load 需要电路控制 step&lt;/p>
&lt;p>一些算数运算 rs1 rs2 rdata1 rdata2 op , 要放寄存器序号需要重命名， 可以不放寄存器号，可以直接映射到id去 （1）in-order核加一部分寄存器 （2）小核维护一个freeReg 表 ， 完成之后需要恢复&lt;/p>
&lt;p>jar ?&lt;/p>
&lt;p>depend load rs1 imm&lt;/p>
&lt;p>boom Uop -&amp;gt; rocket decode , 大部分可以去除&lt;/p>
&lt;p>提取 ？&lt;/p>
&lt;p>dispatch -&amp;gt; uop&lt;/p>
&lt;p>中间数据都需要通过 exe 读取 ， 最快的应该是从 iregister_read的时候读取 ，&lt;/p>
&lt;p>需要提取的中间数据 ： 没有被VTT标记的寄存器值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// rocket decode
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">default&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">BitPat&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// jal renf1 fence.i
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// val | jalr | renf2 |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | fp_val| | renx2 | | renf3 |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | rocc| | | renx1 s_alu1 mem_val | | | wfd |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | br| | | | scie s_alu2 | imm dw alu | mem_cmd | | | | mul |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | | | | zbk | | | | | | | | | | | | div | fence
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | | | | | zkn | | | | | | | | | | | | | wxd | | amo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | | | | | | zks | | | | | | | | | | | | | | | | | dp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">A2_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">A1_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">IMM_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">DW_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">aluFn&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">FN_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">M_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">CSR&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// frs3_en wakeup_delay
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// is val inst? | imm sel | bypassable (aka, known/fixed latency)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | is fp inst? | | uses_ldq | | is_br
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | is single-prec? rs1 regtype | | | uses_stq | | |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | micro-code | rs2 type| | | | is_amo | | |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | iq-type func unit | | | | | | | is_fence | | |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | | | | | | | | | is_fencei | | | is breakpoint or ecall?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | dst | | | | | | | | | mem | | | | is unique? (clear pipeline for it)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | regtype | | | | | | | | | cmd | | | | | flush on commit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | | | | | | | | | | | | | | | | | | csr cmd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | | | | | | | | | | | | | | | | | | |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">uopX&lt;/span> &lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">IQT_INT&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">FU_X&lt;/span> &lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">RT_X&lt;/span> &lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">DC2&lt;/span> &lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">DC2&lt;/span> &lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">IS_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">M_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">DC2&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">CSR&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3></description></item><item><title>香山源代码剖析——分支预测单元</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/</link><pubDate>Sat, 25 Jan 2025 15:13:03 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/</guid><description>&lt;h2 id="b站学习">b站学习&lt;/h2>
&lt;p>分支预测块&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 193;
flex-basis: 465px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125181359394.png" data-size="1020x526">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125181359394.png"
width="1020"
height="526"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125181359394_hu13373882800903922538.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125181359394_hu2780647712471053194.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 171;
flex-basis: 410px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125193736151.png" data-size="998x583">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125193736151.png"
width="998"
height="583"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125193736151_hu8296811766793898056.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125193736151_hu17669089066900855920.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125151542898.png" data-size="1291x724">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125151542898.png"
width="1291"
height="724"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125151542898_hu12341252919813914881.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125151542898_hu5283106244396636366.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 187;
flex-basis: 449px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125151413167.png" data-size="1225x654">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125151413167.png"
width="1225"
height="654"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125151413167_hu16350075947686821176.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125151413167_hu12194352696994849217.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>把每个周期的数据都发送到一个结构里去&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 217;
flex-basis: 522px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125151717519.png" data-size="1190x547">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125151717519.png"
width="1190"
height="547"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125151717519_hu1101636366056776387.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125151717519_hu7749720201022116338.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>使用FTQ存放分支预测后的数据&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 207;
flex-basis: 498px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125152628626.png" data-size="1237x596">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125152628626.png"
width="1237"
height="596"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125152628626_hu10864014985664164887.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125152628626_hu16492284061966631465.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>设置redirect 通道， 如果s2 预测的结构和s1不一样， 用redirect把结果覆盖掉 ，直接去修改FTQ的内容 ，因为有s1了，已经能够做到每一个周期预测一个结果了 ， 那s2,s3，实际上也是每一个周期出一个数据 ，但是实际上如果0x8的是预测错误的，那0xc实际上是白白预测的，因为根本不会跳到0x8这个块&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 192;
flex-basis: 460px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153042547.png" data-size="1235x643">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153042547.png"
width="1235"
height="643"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153042547_hu16733091197806223773.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153042547_hu17776685994700431657.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>FTQ收集后端的反馈信息，然后可以通过重定向通道发送给BPU&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 255;
flex-basis: 612px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153519720.png" data-size="1236x484">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153519720.png"
width="1236"
height="484"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153519720_hu5250697799505088451.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153519720_hu18361324731782728190.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 174;
flex-basis: 419px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153725283.png" data-size="1231x704">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153725283.png"
width="1231"
height="704"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153725283_hu4992839559179216102.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153725283_hu1251586662623494808.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>需要得知各种信息来训练分支预测&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 432px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153913228.png" data-size="1266x703">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153913228.png"
width="1266"
height="703"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153913228_hu18081937779339192035.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125153913228_hu15934744920454231309.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 440px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125154116336.png" data-size="1298x707">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125154116336.png"
width="1298"
height="707"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125154116336_hu6256260114093085389.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125154116336_hu16036537623693097041.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>一个FTB项有3个槽 ，FTB项用PC索引 ，3个槽有两个条件分支槽，1个无条件分支槽&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 433px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125154233394.png" data-size="1282x709">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125154233394.png"
width="1282"
height="709"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125154233394_hu12632444794054081869.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125154233394_hu13550980436038132113.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 431px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161059641.png" data-size="1284x714">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161059641.png"
width="1284"
height="714"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161059641_hu8296160016635736349.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161059641_hu16443649476115910804.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 171;
flex-basis: 412px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161248274.png" data-size="1170x681">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161248274.png"
width="1170"
height="681"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161248274_hu14269669166553278339.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161248274_hu15533129167289558499.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 182;
flex-basis: 438px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161525954.png" data-size="1249x684">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161525954.png"
width="1249"
height="684"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161525954_hu14731908984035988361.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161525954_hu5780454244459473288.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>BPU只和Composer交互就可以了， composer集成了5个子预测器&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 416px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161727927.png" data-size="1242x716">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161727927.png"
width="1242"
height="716"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161727927_hu6131475139071603138.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125161727927_hu15566508065357574628.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 171;
flex-basis: 411px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125162142680.png" data-size="1258x733">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125162142680.png"
width="1258"
height="733"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125162142680_hu4069409851786860545.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125162142680_hu5315912382611553070.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 432px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125162318341.png" data-size="1234x684">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125162318341.png"
width="1234"
height="684"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125162318341_hu2901602985994548593.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125162318341_hu12029596485454187145.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 172;
flex-basis: 413px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125162454813.png" data-size="1228x712">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125162454813.png"
width="1228"
height="712"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125162454813_hu4400526597639265189.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125162454813_hu10989462383560633358.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>会有一个valid信号来无效前面预测器的输出，初始pc0, 比方说 ， T0 s1 预测 pc0-&amp;gt; pc1， T1 s2发现pc0-&amp;gt; pc1预测错误的实际是pc3 ，T1阶段所有预测器通过pc1去预测pc2,那么此时需要把所有预测器的valid都拉低，因为这个pc1是错误的，这个阶段没必要对pc1做预测 ， 对预测器2而言它没必要在下一周期得到pc1的预测结果，换言之，在T2阶段时，预测器2的流水线2是没必要工作得到结果的，在T2,T3阶段，预测器3的流水线2,3是没必要去工作的 。&lt;/p>
&lt;p>如果发生了redirect,那所有的target就都不去听&lt;/p>
&lt;p>这些信号也会直接输出给ftq&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 415px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125180627027.png" data-size="1269x733">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125180627027.png"
width="1269"
height="733"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125180627027_hu7649867887922955814.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125180627027_hu16991598606800460489.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 424px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125181001819.png" data-size="1289x729">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125181001819.png"
width="1289"
height="729"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125181001819_hu14249783647618519905.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8D%95%E5%85%83/image-20250125181001819_hu4791106107360673861.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Scalar_vector_runahead</title><link>https://VastCircle.github.io/2025/scalar_vector_runahead/</link><pubDate>Thu, 23 Jan 2025 22:05:34 +0800</pubDate><guid>https://VastCircle.github.io/2025/scalar_vector_runahead/</guid><description>&lt;p>标量向量运行前 （SVR） 通过搭载处理器上执行的现有指令，在简单的有序内核上提取高内存级并行性，从而导致将来的不规则内存访问。SVR 执行多个瞬态、独立、并行的内存访问实例及其链，这些实例从预测的归纳变量的不同值启动，以将相互独立的内存访问彼此相邻移动，以隐藏依赖的停顿。SVR 的硬件开销仅为 2 KiB，性能比基准 3 宽的有序内核高 3.2× 比完全无序内核高 1.3× 倍，同时能耗减半。将开销增加到 9 KiB 以应对更大的寄存器文件，SVR 可以将相对于乱序内核的加速比扩展到 1.7×。&lt;/p>
&lt;h2 id="1引言">1.引言&lt;/h2>
&lt;p>我们能否通过依赖内存访问链为这些具有挑战性的工作负载实现高性能，同时仍能获得按顺序处理的能效优势？&lt;/p>
&lt;p>我们的目标是采用 Vector Runahead 的原理并将其应用于小的有序超标量核心。这需要重新构建方法。保留重叠未来的内存访问可以利用 MLP，但无需支持向量 ISA 或单独的超前运行上下文。我们的技术称为Scalar Vector Runahead (SVR)，它通过机会生成多个标量副本来同步“搭载”处理器中执行的现有指令，每个标量副本都具有独立的输入和依赖项集。它使用自己的小型 SRAM 池跟踪所有新交错的指令，同时从执行的动态属性中学习，以有效地发现准确的循环边界，而不依赖于乱序执行来计算未来工作的属性。它在做到这一点的同时保留了简单、严格按顺序的执行模型。&lt;/p>
&lt;h2 id="2background">2.background&lt;/h2>
&lt;h3 id="a-稀疏内存访问">A. 稀疏内存访问&lt;/h3>
&lt;p>许多类别的现代工作负载都具有难以预测的非顺序内存访问，这些访问基于索引查找，例如，稀疏矩阵（在图形和 HPC 中）或表数据结构（例如数据库工作负载中的哈希表）。虽然这些工作负载理论上在算法级别具有较高的内存级并行性 （MLP），但这很难利用。大数据量和低时态位置性使现代缓存层次结构未得到充分利用。由于访问是间接的或指针追逐的，因此无法轻松地将它们预取到更靠近 cache 层次结构中的核心的位置。&lt;/p>
&lt;p>例如，由于其稀疏性质，图形应用程序通常以压缩的稀疏行 （CSR） 格式存储，以实现高存储效率。如图 2 所示，这包括清单 1：PageRank 中热循环的 C++ 代码。三个数组：offset、neighbor 和 vertex data [35]。对偏移数组的访问是顺序的，而对相邻和顶点数据数组的访问是间接的。清单 1 显示了从 GAP 基准测试套件 [11] 访问 PageRank 的三个数组的 C++ 代码。第 1 行迭代节点，如图 2 中的 Offset 数组表示，第 3 行迭代每个节点的邻居，如图 2 中的 Neighbor 数组表示，第 4 行将每个邻居的贡献添加到当前节点排名中，这是对图 2 中 Vertex 数据的访问。&lt;/p>
&lt;p>对 g.in_neigh（u） 的访问遵循规则的顺序，因此它们可以被步幅预取器拾取，而对 outgoing_contrib[v] 的访问，基于存储在 g.in_neigh（u） 中的非顺序值，是不规则的并且高度依赖于数据，这意味着它们在缓存中持续缺失。尽管乱序内核可以在其 reorder buffer 中同时容纳一些循环迭代，以从多个依赖链中提取 MLP，但它在使内存带宽饱和之前很快就会停滞。对于 in-order 内核，问题甚至更严重。即使我们假设 inorder 内核是 stall-on-use 而不是 stall-on-load，使用 cache-missing load 也会导致内核暂停执行，直到完成对主内存的高延迟访问。这有效地抑制了任何类型的 MLP，从而导致性能不佳。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 274;
flex-basis: 659px"
>
&lt;a href="https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250123223548843.png" data-size="503x183">
&lt;img src="https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250123223548843.png"
width="503"
height="183"
srcset="https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250123223548843_hu4579442632397867864.png 480w, https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250123223548843_hu78840584996967843.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 263;
flex-basis: 631px"
>
&lt;a href="https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250123223732199.png" data-size="537x204">
&lt;img src="https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250123223732199.png"
width="537"
height="204"
srcset="https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250123223732199_hu8417068824127249153.png 480w, https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250123223732199_hu17731872933401250301.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="b-in-order-内核上的内存延迟">B. In-Order 内核上的内存延迟&lt;/h3>
&lt;p>图 3 报告了 in-order 和 OoO 内核的每指令周期数 （CPI）。如图所示，间接内存访问对 in-order 内核的性能影响的严重性比其 OoO 对应项高出许多倍。虽然 OoO 内核在 DRAM 内存访问上停滞在 3.6 CPI 上，但按顺序排列的内核停滞不前，CPI 要高得多。这会导致 in-order 相对于 out-of-order 内核的速度减慢 2.5×。因此，解决具有间接内存访问的应用程序的性能瓶颈对于按顺序内核至关重要。&lt;/p>
&lt;h3 id="c-向量超前">C. 向量超前&lt;/h3>
&lt;p>Vector Runahead （VR） [38]， [40] 是一种用于乱序内核的微架构技术，用于为稀疏内存访问生成高 MLP。VR 保留一个参考预测表 [17] 来查找具有跨步访问模式的负载，用于预测未来循环的归纳变量。如果这些步幅负载在其计算链上生成依赖的内存访问，则 VR 会创建与从许多不同的索引开始的链对应的指令，同时瞬态地发出许多独立的未来迭代。VR 将这些多个标量指令副本组合成向量，以提高后端吞吐量。尽管从属访问仍会在缓存中丢失，但现在许多独立的丢失发生在很近的地方，从而导致非常高的 MLP，并且一旦处理器恢复正常执行，缓存命中率就会很高。解耦矢量超前 （DVR） [39]、[43] 构建在 VR 之上。当 ROB 填满时触发 VR，因此 OoO 内核无法进一步进行，而 DVR 通过在同一内核上的第二个简单按顺序同步子线程中发出推测性矢量化指令流，实现“解耦”或独立于微架构结构的大小。此外，DVR 在运行时检测循环边界以提高预取准确性，包括同时跨多个嵌套的内循环和外循环。DVR 还使用 GPU 样式的重新收敛堆栈处理控制流发散。
这两种技术都广泛使用了仅在大型无序超标量内核中可用或真实的资源，这意味着直接转换为节能的有序内核是不可能的。但是，两者都提供了对设计机制的见解，这些机制可以消除在 inorder 内核上观察到的更紧迫的 latencybound 行为。&lt;/p>
&lt;h2 id="3svr的设计理念">3.SVR的设计理念&lt;/h2>
&lt;p>标量向量，而不是向量：VR 和 DVR 都将未来迭代的独立组的数据打包到宽 SIMD 寄存器中，并利用其相应的 SIMD 向量指令（例如 AVX512）。较小的内核根本不可能支持向量运算，或者只支持较小的向量宽度（例如，128 位 [21]）。尽管如此，即使使用 512 位数据路径，VR 和 DVR 也必须同时发出多个矢量指令（VR 同时发出 64 次迭代，而 DVR 最多发出 128 次迭代）。如果底层内核受内存限制，我们仍然可以通过将对许多独立数据项的计算作为标量运算而不是向量指令来实现加速，因此称为“标量向量”。即使在按顺序排列的内核中，只要内核支持使用时停顿而不是未命中时停顿（即，内核在使用加载的值时停顿，而不是在缓存未命中时立即停顿），我们仍然可以利用数据级并行性，通过将许多独立的内存访问打包在一起来实现高 MLP。甚至 DVR 的子线程也不使用乱序执行，因为通道之间的并行性很充足，而且由于间接链，单个通道几乎没有指令级并行性。因此，我们可以看到瞬态矢量化的 MLP 优势，而无需实际使用乱序执行或任何显式向量运算，因此提出了标量向量 Runahead。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 254;
flex-basis: 611px"
>
&lt;a href="https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250123230925584.png" data-size="487x191">
&lt;img src="https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250123230925584.png"
width="487"
height="191"
srcset="https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250123230925584_hu6095443107588583688.png 480w, https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250123230925584_hu12007482347389935054.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="4svr微架构">4.SVR微架构&lt;/h2>
&lt;p>SVR 建立在“使用时停顿”的有序内核之上 [26]。该内核监控数据加载流的跨步内存访问模式，生成跨步加载的多个标量副本，每个副本具有不同的未来地址。在 taint tracker 的帮助下跟踪跨步负载的传递依赖指令，并且还为每个依赖指令生成多个副本。为单个指令生成的数据标量副本组称为标量向量 （SV），指令将自身复制一个集体标量向量指令 （SVI）。一个 SV 包含 N 个标量（或向量有 N 个元素）;除非另有说明，否则 N = 16**。SVI 和矢量指令之间的主要区别在于，组成 SVI 的标量指令是在处理器后端独立发出和执行的。**SVI 在主线程旁边的现有功能单元上瞬态执行（意味着它们不会影响架构状态），SVI 的目的是预取主线程的未来内存访问。由于按顺序内核中没有备用物理寄存器，因此 SVI 读取和写入称为推测寄存器文件 （SRF） 的小型物理矢量寄存器文件。
在检测到具有跨步内存访问模式的负载指令时，内核进入捎带式超前模式 （PRM） 并为跨步负载生成 SVI，另请参见图 4。SVI 背负在处理器执行的现有实际指令流上，因为在发出实际指令时，也会为直接或间接依赖于跨步负载的任何指令生成 SVI。
从跨步负载开始的依赖指令链称为间接链。当内核遇到相同跨步负载的另一个实例时，生成 SVI 的过程将终止，内核进入等待模式。这标志着间接链的一次迭代的执行。等待模式可防止内核重新进入背负式超前模式，并避免为重叠迭代生成 SVI。当负载超出预取范围时，负载可以重新进入 piggyback runahead 模式。
在检测到具有跨步内存访问模式的负载指令时，内核进入捎带式超前模式 （PRM） 并为跨步负载生成 SVI，另请参见图 4。SVI 背负在处理器执行的现有实际指令流上，因为在发出实际指令时，也会为直接或间接依赖于跨步负载的任何指令生成 SVI。
从跨步负载开始的依赖指令链称为间接链。当内核遇到相同跨步负载的另一个实例时，生成 SVI 的过程将终止，内核进入等待模式。这标志着间接链的一次迭代的执行。等待模式可防止内核重新进入背负式超前模式，并避免为重叠迭代生成 SVI。当负载超出预取范围时，负载可以重新进入 piggyback runahead 模式。&lt;/p>
&lt;h3 id="a微体系结构">A.微体系结构&lt;/h3>
&lt;p>图 5 显示了对基线 in-order 内核的 SVR 微架构修改。为了支持 SVR，我们使用以下结构（绿框）来增强基线：（1） 一个步幅检测器，用于跟踪具有跨步内存访问模式的负载，（2） 一个污点跟踪器，用于识别跨步负载的间接链，（3） 一个名为头部跨步负载寄存器 （HSLR） 的寄存器（蓝色），用于保存启动（和终止）跨步负载的指令指针， （4） 最后一个预取寄存器 （LP），用于跟踪 SVR 为每个跨步加载生成的最后一个地址，以避免重叠的预取，（5） 由间接链内的 runahead 指令访问的推测寄存器文件 （SRF），最后，（6） 修改发出单元以适应标量向量单元 （SVU），该标量向量单元复制当前指令并创建/发出最多 N 个标量副本。在预测 SVR 必须预取的即将到来的迭代次数时，会使用循环绑定检测器 （LBD）（橙色）和最后一个比较寄存器 （LC）（粉红色）。以下部分介绍了每个结构的详细信息。
1） 步幅检测器：步幅检测器使用类似于步幅预取器 [17] 中的参考预测表;它与加载指令的 PC 进行索引。图 6 显示了 stride 检测器每个条目的字段。在 SVR 中，步幅检测器具有多个角色。首先，步幅检测器负责识别具有步幅内存访问模式的加载指令。步幅计算为“Previous Address”和当前地址之间的差值，并存储在“Stride”字段中。当新计算的步幅与已存储的步幅相同时，“饱和度计数器”会增加以表示更高的置信度。其次，步幅检测器中的“Last Prefetch”字段可防止内核在上一轮获取的范围内（等待模式）进入 piggyback runahead 模式，以避免为消耗计算资源的冗余预取生成重复地址。第三，“Seen”位用于在存在多个（嵌套）跨步负载的情况下检测内部循环如果在遇到头部冲刺负载之前已经看到了另一个撞击负载。最后，步幅探测器还跟踪链中的“最后一个间接负载（LIL）”。&lt;/p>
&lt;p>每个负载指令都到达问题队列的头部时访问步幅检测器，并在执行后更新检测器。到达头部后，会按正常发出负载指令。&lt;strong>但是，如果将负载检测到跨过，则使用负载的PC更新HSLR，并且核心进入Piggyback Runahead模式&lt;/strong>。问题单位发出了负载的n副本，其地址基于原始负载和检测到的大小。仅在所有SVIS的所有SVI签发后，就发布了以下计划订单中的指令。&lt;/p>
&lt;p>2)检测间接负载：使用污点跟踪器来识别间接链，该污点跟踪器使用架构寄存器标识符进行索引。图 8 显示了污点跟踪器条目的字段。当指令是间接链的一部分时，“污染”位被设置。跨步加载设置与其目标寄存器相对应的位。任何读取在污点跟踪器中设置了其污点位的寄存器的未来指令也会设置与其目标寄存器相对应的位。为读取带有污染位集的寄存器的所有指令生成 SVI，并且当内核离开捎带运行模式时，污染跟踪器会重置。当架构寄存器映射到 SRF 中的推测寄存器时，“Mapped”位被设置，并且“SRF Reg.”位被设置。 ID’字段存储推测的SRF.reg&lt;/p>
&lt;p>3）寄存器映射和回收：SVR维护具有1,024位宽的投机寄存器的投机寄存器文件（SRF），而16个标量可以同时访问每个寄存器中的不同64位位置。从污点跟踪器中维护了从建筑物到投机寄存器的映射（图8）。通常，SRF登记处的SRF条目通常会少，因为SRF条目非常宽，因此，在硅区域方面的价格也很高。这意味着两者之间不可能进行一对一的映射，因此我们只能一次映射有限数量的建筑寄存器。在Piggyback Runahead模式下，建筑寄存器将在First Write1上分配一个免费的SRF条目（通过Strideload Generation或由于输入寄存器被污染），该寄存器在污染跟踪器中污染和映射建筑寄存器。取决于从此投机寄存器中读取的统计负载，以下标量。当映射的建筑寄存器被不属于间接链的指令所覆盖时，“污染”字段已重置并释放了SRF寄存器。&lt;/p>
&lt;p>相对于架构寄存器，SRF 条目被故意配置不足。为了在它们耗尽时尝试继续矢量化，我们使用 LRU 替换；分配给污点跟踪器中最近最少读取（但仍映射）的架构寄存器的 SRF 条目将被回收。此时，我们通过在污点跟踪器中将架构寄存器的 Mapped 位设置为 0 来指示旧映射的无效性，以防止使用输入寄存器的任何指令被标量向量化。 LRU替换状态是通过Offset字段实现的；它会在每次读取寄存器时更新自该轮捎带运行模式开始以来已执行的指令数。&lt;/p>
&lt;p>4)生成和执行标量向量：SVI 由附加到基线核心的发布单元的标量向量单元生成。在检测到跨步加载时，标量向量单元会根据跨步加载的内存地址和跨步大小创建一个 SVI：具有不同地址的负载的 N 个进一步副本，从而污染污点跟踪器中的目标寄存器。对于污点跟踪器中输入被污染的任何指令，它也会执行相同的操作。当我们从跨步加载（放置在 HSLR 中）启动捎带运行超前模式时，寄存器会跟踪返回到 HSLR 加载之前执行的最后一个间接加载的 16 个最低有效位。当我们终止时，它会被复制到步幅检测器 2 中 HSLR PC 的 LIL 条目中。当超过 LIL 中的指令数或达到 HSLR 负载（以先到者为准）时，我们将停止生成 SVI。&lt;/p>
&lt;p>&lt;font color='red'> 在终止piggyback runahead mode的时候，最后一个load的后16位被复制到LIL , 但是 SVI本身是和 LIL同步判断的， 那 SVI不是肯定会超出吗，除非是先跑一遍确定LIL,然后进入piggyback runahead mode 生成SVI  &lt;/font>&lt;/p>
&lt;p>这些副本与来自主线程的指令一起发送到功能单元，并根据相关单元的可用性执行。主程序的指令优先于副本。我们使用 ⌈log2(N + 1)⌉ 位返回计数器来扩充记分板的每个条目，以跟踪 N 个执行标量。当从间接链发出指令时，返回计数器设置为 N，并且返回计数器中的值 0 表示为该指令生成的所有标量已完成其执行。返回时，每个标量指令都会更新 SRF，并递减计数器。然后可以继续执行依赖于架构或推测目的地的指令。&lt;/p>
&lt;p>5)终止和启动: 当我们到达 HSLR 中的跨步负载 PC 或 256 条指令超时时，Piggyback runahead 模式终止。然后我们清除污点跟踪器。此时，核心进入等待模式，以避免对相同的跨步负载 PC 重复工作。只要观察到的地址位于步幅检测器条目的 Previous Address 和 Last Prefetch 字段之间，步幅加载就无法开始新一轮的提前运行。一旦在给定 PC 上观察到超出此范围的地址（由于不连续性或在上次预取后到达地址），我们就会重新启动 piggyback runahead 模式。&lt;font color='red'> 不懂 &lt;/font>&lt;/p>
&lt;p>6)多个间接链：除了图4中的简单间接链之外，SVR还可以同时处理多个间接链。图 9 显示了三种情况，每种情况都有两个间接链，一种从跨步负载 A 开始，另一种从跨步负载 B 开始。这三种情况提供了通过为多个链生成预取或重新定位到具有更及时预取的链来提高性能的进一步机会（来自更内部的循环）。我们使用跨步检测器中的“Seen”字段来检测其他循环，每当核心检测到跨步负载时就会set。&lt;strong>每当内核遇到 HSLR 负载或重新定位并重置 HSLR 时，除 HSLR 负载之外的seem位都会被清除。&lt;/strong>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 124;
flex-basis: 299px"
>
&lt;a href="https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250124135545128.png" data-size="966x775">
&lt;img src="https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250124135545128.png"
width="966"
height="775"
srcset="https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250124135545128_hu10179900175155421299.png 480w, https://VastCircle.github.io/2025/scalar_vector_runahead/image-20250124135545128_hu16231303501600520356.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>Nested Loops.对于嵌套循环，内核在 t0 处对负载 A 进入 piggyback runahead 模式。设置负载的步幅检测器条目中的 Seen 位，并将 HSLR 设置为负载 A 的 PC。当内核在 t 1 处检测到另一个跨步负载 B 时，它将负载 B 的 Seen 位设置为 1，并启动负载 B 的背负超前模式。但是，如果内核在负载 A 之前检测到负载 B 的另一个实例（在 t 2 处）(&lt;font color='red'> 什么意思 &lt;/font>，通过检测已设置的负载 B 的 Seen 位，负载 B 是嵌套循环的一部分。因此，内核在 t 2 处中止负载 A 和负载 B 的捎带式超前模式，将 HSLR 设置为负载 B，并开始从负载 B 开始为内部环路生成 SVI。&lt;/p>
&lt;p>Unrolled Loops.对于具有两个间接链并行执行的展开循环，仅为一个链生成预取会使性能下降，因为错过了为另一个链预取内存访问的机会。因此，在为负载 A 生成预取时，如果发行单元发现另一个未设置 Seen 位的独立跨步负载 B，则它也会为从 B 开始的间接链生成标量。**当内核在 t 2 处再次检测到负载 A （HSLR 中的电流负载） 时，B 的 Seen 位被清除。**因此，与嵌套循环不同，当我们在 t 3 遇到另一个 B 实例时，我们不会完全切换到为 B 生成标量，同时为两条链生成预取。&lt;/p>
&lt;p>dependent Loops : 对于独立循环，我们已经完成了 HSLR 负载 PC A 的背负式超前模式，我们将 A 保留在 HSLR 中，并在每次到达 HSLR 时重置所有“Seen”位，无论内核是否处于负载 A 的背负式超前模式。如果我们看到不同的负载 PC B，而内核未处于等待模式，我们设置其 Seen 位，如果随后我们看到 B 设置了 Seen 位，则重定向，使用负载 B 的 PC 更新 HSLR，并开始负载 B 的捎带超前模式，无论内核是处于等待模式还是负载 A 的正常模式。HSLR 中对 PC 的这种偏向是为了防止在首次从外部循环进入内部循环时进行重定向，从而延迟内部循环的超前运行，降低外部循环的优先级，但仍允许重定向到我们两次看到的任何负载，防止在不同循环的新程序阶段出现匮乏。&lt;/p>
&lt;p>7)确定 SVR 何时有用： 为避免 SVR 对性能的损害大于其好处，我们使用 L1 缓存中的预取标签来监控 SVR 的准确性，以跟踪 SVR 带来的负载的首次使用以及使用前的逐出。如果在预热 100 次使用或驱逐后，准确率下降到 50% 以下，我们会阻止触发所有负载 SVR.To 防止这种情况成为永久性的，我们会重置每 100 万条指令，以便给 SVR 另一次执行机会。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Prefetch的一些小思考</title><link>https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/</link><pubDate>Wed, 22 Jan 2025 16:44:10 +0800</pubDate><guid>https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/</guid><description>&lt;h2 id="dvr的思路">DVR的思路&lt;/h2>
&lt;p>1.discover mode&lt;/p>
&lt;p>RPT : ( pc : 40 addr : 40 stride : 16 state : 2 最内层检测位 : 1)&lt;/p>
&lt;p>DVR是引入了一个子线程，线程是跑在同一个内核里的， 所以它多搞了一组寄存器 ，用来实现SIMT , 单指令多线程&lt;/p>
&lt;p>子线程的生成 ： 从跨步加载开始到存储在FLR 的 PC结束&lt;/p>
&lt;p>子线程使用与主线程相同的取指，解码，执行单元&lt;/p>
&lt;p>子线程指令从前端缓存区生成 ，前端缓冲区通过保持解码的微操作将取指阶段与pipline的其余部分解偶。子线程使用不同的向量发出寄存器（VIR),而不是乱序指令队列 ， 每当主线程没有为端口准备好指令（执行），就会发出子线程发出寄存器的指令&lt;/p>
&lt;h2 id="svr的思路">SVR的思路&lt;/h2>
&lt;p>stride detector&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 1652;
flex-basis: 3965px"
>
&lt;a href="https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/image-20250124121204554.png" data-size="1933x117">
&lt;img src="https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/image-20250124121204554.png"
width="1933"
height="117"
srcset="https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/image-20250124121204554_hu2666849609729017277.png 480w, https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/image-20250124121204554_hu9422686755703106330.png 1024w"
loading="lazy"
alt="image-20250124121204554">
&lt;/a>
&lt;figcaption>image-20250124121204554&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>taint Tracket&lt;/p>
&lt;p>当指令是间接链的一部分时，“Tainted&amp;quot;位被set ,&lt;/p>
&lt;p>为读取带有Tainted 位的寄存器的所有指令生成SVI&lt;/p>
&lt;p>当内核离开piggyback runahead mode , taint is reset&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 622;
flex-basis: 1494px"
>
&lt;a href="https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/image-20250124121216044.png" data-size="959x154">
&lt;img src="https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/image-20250124121216044.png"
width="959"
height="154"
srcset="https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/image-20250124121216044_hu1008847906636732441.png 480w, https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/image-20250124121216044_hu11589088977630677302.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>HSLR&lt;/p>
&lt;p>检测到stride load ,将load PC -&amp;gt; HSLR , 并且core 进入 Piggyback Runahead mode&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 343;
flex-basis: 824px"
>
&lt;a href="https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/image-20250124121148970.png" data-size="402x117">
&lt;img src="https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/image-20250124121148970.png"
width="402"
height="117"
srcset="https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/image-20250124121148970_hu5565158132059246444.png 480w, https://VastCircle.github.io/2025/prefetch%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%80%9D%E8%80%83/image-20250124121148970_hu4187853805138274056.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>speculative Register File&lt;/p>
&lt;p>SVI :&lt;/p>
&lt;p>在检测到stride load 时，SVU会根据内存地址和跨步大小创建一个SVI&lt;/p>
&lt;p>对于taint Tracket输入被污染的指令，也会执行相同操作 。&lt;/p>
&lt;p>当我们从stride load(HSLR中)启动piggyback runahead mode 是，a register keeps track of the 16 least significant bits of the last indirect load executed before we return to the HSLR load。When we terminate, this is copied into the HSLR PC’s LIL entry in the stride detector2.当超过 LIL 中的指令数或达到 HSLR 负载（以先到者为准）时，我们将停止生成 SVI。&lt;/p>
&lt;h2 id="思考">思考&lt;/h2>
&lt;p>在大核里&lt;/p>
&lt;hr>
&lt;p>stride load&lt;/p>
&lt;p>RPT : ( pc : 40 addr : 40 stride : 16 state : 2 最内层检测位 : 1)&lt;/p>
&lt;p>当发现检测位为1，可以去清空VTT和FLR ，重新开始&lt;/p>
&lt;p>每当重新遇到启动discoder mode 的pc时， 会清空所有的检测位&lt;/p>
&lt;p>Taint Tracker&lt;/p>
&lt;p>VTT ： 依赖链的建立 ,污点向量记录&lt;/p>
&lt;p>FLR : 记录最后一个load ，更新FLR时，清空SBB和LCR&lt;/p>
&lt;p>loop bound detector&lt;/p>
&lt;p>SBB:是否处理过分支&lt;/p>
&lt;p>LCR:保存上一个比较指令的源和目标寄存器的ID (x86是这样的) ， riscv的话，累加指令？&lt;/p>
&lt;p>bne s0,s4 ,1031a&lt;/p>
&lt;p>beqz s2,10362&lt;/p>
&lt;hr>
&lt;p>RPT dispatch -&amp;gt; PC , exe -&amp;gt; addr&lt;/p>
&lt;p>不需要寄存器号&lt;/p>
&lt;p>小核的执行单元和访存单元 ，写回单元（） ， 需不需要写小核的寄存器 ？&lt;/p>
&lt;p>stride load imm , addr, step 寄存器号&lt;/p>
&lt;p>发一条小核执行一条 ？&lt;/p>
&lt;p>什么时候发送?&lt;/p>
&lt;p>找到 stride load 和 loop bound , 再次进入前一个stride load 的时候&lt;/p>
&lt;p>PCv 来记录 stride load pc ，在发现检测位为1时可以去更新PCv, 并且清空VTT和 FLR&lt;/p>
&lt;p>下一轮会把所有标记为脏的指令全部都发送到一个结构里去 ， 然后再用一个结构向量化转发给多个小核（可以在标记的时候就发送吗 ？）&lt;/p>
&lt;p>发送给某个结构的内容？&lt;/p>
&lt;p>能使得小核成功执行指令的 部分&lt;/p>
&lt;p>stride load addr step ， 可能不止一条stride load ,&lt;/p>
&lt;p>只有stride load 需要电路控制 step&lt;/p>
&lt;p>一些算数运算 rs1 rs2 rdata1 rdata2 op , 要放寄存器序号需要重命名， 可以不放寄存器号，可以直接映射到id去 （1）in-order核加一部分寄存器 （2）小核维护一个freeReg 表 ， 完成之后需要恢复&lt;/p>
&lt;p>jar ?&lt;/p>
&lt;p>depend load rs1 imm&lt;/p>
&lt;p>boom Uop -&amp;gt; rocket decode , 大部分可以去除&lt;/p>
&lt;p>提取 ？&lt;/p>
&lt;p>dispatch -&amp;gt; uop&lt;/p>
&lt;p>中间数据都需要通过 exe 读取 ， 最快的应该是从 iregister_read的时候读取 ，&lt;/p>
&lt;p>需要提取的中间数据 ： 没有被VTT标记的寄存器值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// rocket decode
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">default&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">BitPat&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// jal renf1 fence.i
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// val | jalr | renf2 |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | fp_val| | renx2 | | renf3 |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | rocc| | | renx1 s_alu1 mem_val | | | wfd |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | br| | | | scie s_alu2 | imm dw alu | mem_cmd | | | | mul |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | | | | zbk | | | | | | | | | | | | div | fence
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | | | | | zkn | | | | | | | | | | | | | wxd | | amo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | | | | | | zks | | | | | | | | | | | | | | | | | dp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">A2_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">A1_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">IMM_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">DW_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">aluFn&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">FN_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">M_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">CSR&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// frs3_en wakeup_delay
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// is val inst? | imm sel | bypassable (aka, known/fixed latency)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | is fp inst? | | uses_ldq | | is_br
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | is single-prec? rs1 regtype | | | uses_stq | | |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | micro-code | rs2 type| | | | is_amo | | |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | iq-type func unit | | | | | | | is_fence | | |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | | | | | | | | | is_fencei | | | is breakpoint or ecall?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | dst | | | | | | | | | mem | | | | is unique? (clear pipeline for it)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | regtype | | | | | | | | | cmd | | | | | flush on commit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | | | | | | | | | | | | | | | | | | csr cmd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// | | | | | | | | | | | | | | | | | | | | | | | |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">uopX&lt;/span> &lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">IQT_INT&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">FU_X&lt;/span> &lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">RT_X&lt;/span> &lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">DC2&lt;/span> &lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">DC2&lt;/span> &lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">IS_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">M_X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">DC2&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">CSR&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实我看了这么多我感觉是只要遇到一个负载就认为是跨步负载 ， 要不然对于嵌套，肯定是内部的先检测出嵌套循环&lt;/p>
&lt;p>RPT肯定是要有的 ， RPT 应该是每一个load都会分配一个rpt ,&lt;/p>
&lt;p>动态迭代次数也要有&lt;/p>
&lt;p>迭代次数需要达到一定的数量，不能太少&lt;/p>
&lt;p>控制流&lt;/p>
&lt;p>for (i = 0 to N ) {&lt;/p>
&lt;p>​ A[i] load A[i]&lt;/p>
&lt;p>​ for (j = 0 to M ) {&lt;/p>
&lt;p>​ B[j] ; load B[j]&lt;/p>
&lt;p>​ }&lt;/p>
&lt;p>}&lt;/p>
&lt;p>for (i = 0 to N) {&lt;/p>
&lt;p>​ A[i] ; load A[i]&lt;/p>
&lt;p>​ B[i]; load b[i]&lt;/p>
&lt;p>}&lt;/p>
&lt;p>for (i = 0 to N) {&lt;/p>
&lt;p>​ A[i] ; load A[i]&lt;/p>
&lt;p>}&lt;/p>
&lt;p>for (i = 0 to N ) {&lt;/p>
&lt;p>​ B[i]; load b[i]&lt;/p>
&lt;p>}&lt;/p>
&lt;p>microUop&lt;/p>
&lt;p>load a&lt;/p>
&lt;p>store a -&amp;gt; b // store指令是可以不用关注的&lt;/p>
&lt;p>b -&amp;gt; c // 编译器是不是会直接优化成 a -&amp;gt; c&lt;/p>
&lt;p>load c //&lt;/p>
&lt;p>load a // stride load&lt;/p>
&lt;p>a = a ^ b&lt;/p>
&lt;p>load a(imm)&lt;/p>
&lt;p>发送什么 ？&lt;/p>
&lt;p>顺序&lt;/p>
&lt;p>从stride load 到 depend load 的指令的&lt;/p>
&lt;p>dispatch 的时候进入队列 -&amp;gt; 重命名 ？&lt;/p>
&lt;p>ROB + issue&lt;/p>
&lt;p>从哪里获取 ？&lt;/p>
&lt;p>dispatch uop + issue data , 专门加入一个队列来放置一些相关的数据 ，&lt;/p>
&lt;p>rob uop + issue data + dispatch&lt;/p>
&lt;p>发送给小核的寄存器号？&lt;/p>
&lt;p>stride load exe之后的结果 可以直接发送过去&lt;/p>
&lt;p>基于存放队列做重命名 -&amp;gt;&lt;/p>
&lt;p>stride load : addr step loop_bound&lt;/p>
&lt;p>后面的一些指令 :&lt;/p>
&lt;p>算数指令:&lt;/p>
&lt;p>顺序表 -&amp;gt; 每个条目&lt;/p>
&lt;p>按道理来说需要把从stride load -&amp;gt; depend load 的整个uop都发送给 小核&lt;/p>
&lt;p>uop 要发送&lt;/p>
&lt;p>小核不和大核共用寄存器堆&lt;/p>
&lt;p>dispatch 里 ， 顺序&lt;/p>
&lt;p>decode里 发送 ，重命名之前的 ， 分支 ？&lt;/p>
&lt;p>RPT多余的位 最内层检测位可以用来更新 VTT和 FLR&lt;/p>
&lt;p>等传递链结束的时候可以就可以进行vector runahead ,&lt;/p>
&lt;p>Dependent-Load Checking&lt;/p>
&lt;p>LCR : 2 src id + dest id x86 cmp eax, ebx&lt;/p>
&lt;p>SBB : 1bit&lt;/p>
&lt;p>架构相关 riscv : 累加 ,riscv通过判断累加值就可以判断stride,通过分支指令就可以判断循环边界 x86 通过比较指令&lt;/p>
&lt;p>比较指令 往前跳&lt;/p>
&lt;p>物理寄存器里&lt;/p>
&lt;p>能就只发送一次吗 ？&lt;/p>
&lt;p>stride +&lt;/p>
&lt;p>发送什么数据&lt;/p>
&lt;p>发送到一个buffer里，在buffer里做矢量化 ，在发送到小核里去&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Boom代码阅读——exu</title><link>https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/</link><pubDate>Wed, 22 Jan 2025 15:46:47 +0800</pubDate><guid>https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/</guid><description>&lt;h2 id="dispatch">dispatch&lt;/h2>
&lt;p>两种dispatch , BasicDispatch必须按照特定的标号来dispatch , CompactingDispather coreWidth的标号和dispatchWidth不需要完全对应&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * This Dispatcher assumes worst case, all dispatched uops go to 1 issue queue
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * This is equivalent to BOOMv2 behavior
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">BasicDispatcher&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">Dispatcher&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">issueParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ip&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ip&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dispatchWidth&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">coreWidth&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 每一条发射队列对应端口的ready信号都要拉高
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ren_readys&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dis_uops&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">reduce&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">coreWidth&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ren_uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">ren_readys&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// io.dis_uops(i) 是第i条发射队列,第i条发射队列的0-coreWidth个端口分别和0-coreWidthren_uops连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// dis_uops(0) mem dis_uops(1) int dis_uops(2) fp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 每个发射队列要做好最坏的打算，即所有的uop都要发射到这个队列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// dis(w).valid 信号是ren(w).valid信号和发射队列的iqType信号的与，即需要选择对应的发射队列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">issueParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#7f848e">// 对i条发射队列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">coreWidth&lt;/span>&lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// 遍历所有MicroOp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">issueParam&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">issueParams&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">dis&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dis_uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dis&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ren_uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ren_uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">iq_type&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">issueParam&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">iqType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dis&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ren_uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * Tries to dispatch as many uops as it can to issue queues,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * which may accept fewer than coreWidth per cycle.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * When dispatchWidth == coreWidth, its behavior differs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * from the BasicDispatcher in that it will only stall dispatch when
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * an issue queue required by a uop is full.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * 尝试尽可能多的向发射队列派遣指令，可以忍受每个周期较低的coreWidth, 每个发射队列的 coreWidth &amp;gt;= dispatchWidth
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">CompactingDispatcher&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">Dispatcher&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">issueParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ip&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ip&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dispatchWidth&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e06c75">ip&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">issueWidth&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// input io.ren_uops -&amp;gt; output io.dis_uops
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// ren_readys(w), 指的是第w条发射队列，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ren_readys&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">issueParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">coreWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 遍历每条派遣队列，ip是参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(((&lt;/span>&lt;span style="color:#e06c75">ip&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">dis&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">rdy&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">issueParams&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dis_uops&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">ren_readys&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ren&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">coreWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">MicroOp&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ren&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ren_uops&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">uses_iq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">ren&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">u&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">u&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">iq_type&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">ip&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">iqType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Only request an issue slot if the uop needs to enter that queue.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 修改ren.valid 为 valid &amp;amp; uses_iq， 即需要保证ip一致
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ren&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ren_uops&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">uses_iq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">u&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">v&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>&lt;span style="color:#e06c75">q&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">u&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">q&lt;/span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// compactor是将n个输入的前k个有效输入连接到输出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 在n输入里， 选择k个作为输出， 在coreWidth个输入里，选择ip.dispatchWidth个作为输出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// ren.ready应该是指被选中的几个端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">compactor&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Module&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Compactor&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">coreWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">ip&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dispatchWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">MicroOp&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">compactor&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">ren&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dis&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">compactor&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// The queue is considered ready if the uop doesn&amp;#39;t use it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">rdy&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">ren&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">uses_iq&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">u&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">q&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">u&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">q&lt;/span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// r(i)实际就是 ren_readys(0,i) &amp;amp;&amp;amp; ren_readys(1,i) &amp;amp;&amp;amp; ren_readys(2,i) &amp;amp;&amp;amp; ren_readys(3,i)的结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 还是所有端口同时readyio.ren_uops才能ready
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ren_readys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reduce&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">}))&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ren_uops&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">u&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">u&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 144;
flex-basis: 345px"
>
&lt;a href="https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250127141424053.png" data-size="934x648">
&lt;img src="https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250127141424053.png"
width="934"
height="648"
srcset="https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250127141424053_hu8301444405675083988.png 480w, https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250127141424053_hu15884395604040176276.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 187;
flex-basis: 449px"
>
&lt;a href="https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250127141809289.png" data-size="1407x751">
&lt;img src="https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250127141809289.png"
width="1407"
height="751"
srcset="https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250127141809289_hu17962957393854442975.png 480w, https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250127141809289_hu102299429325203327.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="issue-unit">issue-unit&lt;/h2>
&lt;p>定义了IssueUnit抽象类，issue-unit-age-ordered.scala和issue-unit-unordered.scala中定义的顺序/乱序发射单元类都由它派生。&lt;/p>
&lt;p>&lt;strong>发射队列&lt;/strong>保存着已派遣但又未执行的微指令。当微指令的所有操作数都就绪时，保存该微指令的发射槽将把request位置为1。然后发射选择逻辑将选择一个发射槽进行发射。一条微指令被发射时，它将在发射队列中被删除，以腾出空间给更多派遣的指令。&lt;/p>
&lt;p>BOOM使用彼此不同的一组发射队列，对应不同的指令类型（整数、浮点数、访存）。&lt;/p>
&lt;p>尽管还没有实现，未来的设计可能会为了提高性能而发射推测状态的微指令（例如，推测一条加载指令会命中缓存，所以在假设加载的数据会通过旁路从而可用的情况下，选择发射有数据依赖的指令）。在这种情况下，发射队列将不能删除已发射的处于推测状态的微指令，直到其状态被确定。如果已发射的微指令的推测出错，所有从这个推测窗口发射的微指令都必须被清除，并从发射队列中重试。另外更多先进的技术也已经可用。&lt;/p>
&lt;h2 id="issue-slot">issue-slot&lt;/h2>
&lt;p>微指令被派遣到发射队列中，它们将等待所有操作数准备就绪（“p”代表存在位，它表示操作数何时在寄存器堆中可用）。一旦准备就绪，发射槽将发出request信号，并等待发射。&lt;/p>
&lt;p>每个发射选择逻辑端口都是一个静态的优先编码器，用于选取发射队列中的第一个valid的微指令。每个端口（连接到某个执行单元）将只调度其可以处理的微指令（例如，浮点指令将只调度到拥有浮点单元的端口）。这将为端口创建级联的优先级编码器，这些端口可以彼此调度相同的微指令。&lt;/p>
&lt;p>如果检测到某个功能单元（发射槽中微指令需要的功能单元）不可用，发射槽将取消valid信号，并且不会向其该功能单元发出指令（例如，尝试发射到正在计算的一个非流水线化除法器）。&lt;/p>
&lt;p>store(AMO)指令被分成两个uop , 但是存储在同一个发射槽中&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 156;
flex-basis: 374px"
>
&lt;a href="https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250127204544438.png" data-size="1104x707">
&lt;img src="https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250127204544438.png"
width="1104"
height="707"
srcset="https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250127204544438_hu831858344599083478.png 480w, https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250127204544438_hu18016775863852346156.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>一个是状态的更新， 总共3个状态 in_valid , valid_1, valid_2 . 有两个状态变量， state 和 next_state ,state是一个reg,next_state是一个wire, state改变可以通过 in_uop.valid来改变，其他时候state的改变是通过next_state来改变的&lt;/p>
&lt;p>对于next_state , 在要发射了之后next_state 就会变成 s_invalid , 在state = s_valid_2的时候，就会变成 uopSTD的uop 然后转化为valid_2&lt;/p>
&lt;h2 id="issue-unit-age-ordered">issue-unit-age-ordered&lt;/h2>
&lt;p>顺序发射单元。&lt;/p>
&lt;p>对于每个新派遣的指令，总是放到队列中尽可能靠后的位置（即“顺序”）。而在每个周期中，这些指令都会向前移动（即“紧密”）。 这样就使得最早的指令拥有最高的发射优先级。 这种设计代码显然更复杂，面积和功耗较大，但性能更好。&lt;/p>
&lt;p>在IssueUnit抽象类的基础上实现了以下功能：&lt;/p>
&lt;ul>
&lt;li>计算出发射后发射槽和派遣过来的每一条指令需要的移位数，然后进行移位。&lt;/li>
&lt;li>移位完成后给派遣级正确的ready信号，并实现发射逻辑。&lt;/li>
&lt;/ul>
&lt;h3 id="探究一下-io_iss_valid生成的verilog是怎么样的">探究一下 io_iss_valid生成的verilog是怎么样的&lt;/h3>
&lt;p>可以看到它是由一堆的东西或起来&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">assign&lt;/span> &lt;span style="color:#e06c75">io_iss_valids_0&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_T_1569&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1530&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1491&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1452&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1413&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1374&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1335&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1296&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1257&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1218&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1179&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1140&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1101&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1062&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1023&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_984&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_945&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_906&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_867&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_828&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_789&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_750&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_711&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_672&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_633&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_594&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_555&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_516&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_477&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_438&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_399&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_360&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">wire&lt;/span> [&lt;span style="color:#d19a66">9&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>] &lt;span style="color:#e06c75">_can_allocate_T_93&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_slots_31_io_uop_fu_code&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io_fu_types_0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">wire&lt;/span> &lt;span style="color:#e06c75">_T_1569&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_slots_31_io_request&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> (&lt;span style="color:#56b6c2">|&lt;/span>&lt;span style="color:#e06c75">_can_allocate_T_93&lt;/span>) &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">~&lt;/span>&lt;span style="color:#e06c75">_T_1534&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">wire&lt;/span> &lt;span style="color:#e06c75">_T_1534&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_slots_30_io_request&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> (&lt;span style="color:#56b6c2">|&lt;/span>&lt;span style="color:#e06c75">_can_allocate_T_90&lt;/span>) &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1495&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">wire&lt;/span> &lt;span style="color:#e06c75">_T_1495&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_slots_29_io_request&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> (&lt;span style="color:#56b6c2">|&lt;/span>&lt;span style="color:#e06c75">_can_allocate_T_87&lt;/span>) &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1456&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">wire&lt;/span> &lt;span style="color:#e06c75">_T_1530&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_slots_30_io_request&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> (&lt;span style="color:#56b6c2">|&lt;/span>&lt;span style="color:#e06c75">_can_allocate_T_90&lt;/span>) &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">~&lt;/span>&lt;span style="color:#e06c75">_T_1495&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">wire&lt;/span> &lt;span style="color:#e06c75">_T_1495&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_slots_29_io_request&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> (&lt;span style="color:#56b6c2">|&lt;/span>&lt;span style="color:#e06c75">_can_allocate_T_87&lt;/span>) &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1456&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">wire&lt;/span> &lt;span style="color:#e06c75">_T_360&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_slots_0_io_request&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> (&lt;span style="color:#56b6c2">|&lt;/span>&lt;span style="color:#e06c75">_can_allocate_T&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">assign&lt;/span> &lt;span style="color:#e06c75">io_iss_valids_1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_T_1582&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1543&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1504&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1465&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1426&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1387&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1348&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1309&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1270&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1231&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1192&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1153&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1114&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1075&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1036&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_997&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_958&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_919&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_880&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_841&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_802&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_763&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_724&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_685&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_646&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_607&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_568&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_529&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_490&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_451&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_412&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_373&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">wire&lt;/span> [&lt;span style="color:#d19a66">9&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>] &lt;span style="color:#e06c75">_can_allocate_T_94&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_slots_31_io_uop_fu_code&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io_fu_types_1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">wire&lt;/span> &lt;span style="color:#e06c75">_T_1582&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_slots_31_io_request&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">~&lt;/span>&lt;span style="color:#e06c75">_T_1577&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> (&lt;span style="color:#56b6c2">|&lt;/span>&lt;span style="color:#e06c75">_can_allocate_T_94&lt;/span>) &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">~&lt;/span>&lt;span style="color:#e06c75">_T_1547&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">wire&lt;/span> &lt;span style="color:#e06c75">_T_1577&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_slots_31_io_request&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> (&lt;span style="color:#56b6c2">|&lt;/span>&lt;span style="color:#e06c75">_can_allocate_T_93&lt;/span>) &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">~&lt;/span>&lt;span style="color:#e06c75">_T_1534&lt;/span>; &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_T_1569&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">wire&lt;/span> &lt;span style="color:#e06c75">_T_1547&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">_slots_30_io_request&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">~&lt;/span>&lt;span style="color:#e06c75">_T_1538&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> (&lt;span style="color:#56b6c2">|&lt;/span>&lt;span style="color:#e06c75">_can_allocate_T_91&lt;/span>) &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">_T_1508&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看似是一堆或，实际上这些或只有一个会成立&lt;/p>
&lt;p>可以看到，如果_T_360满足条件的话后面的或实际上条件都是不满足的 ， 因为后面的或满足条件的前提就是前面的或不满足条件&lt;/p>
&lt;p>所以对应io_iss_valid_0来说，它就是优先找到一组满足 fu_code &amp;amp; io_fu_code 的发射队列 ， 然后就把相应发射槽的值赋给这个端口&lt;/p>
&lt;p>对于io_iss_valid_1来说，它就要多一个条件，即这个端口是没有被 0所占用的， 即上面的_T_1569, 满足_T_1569说明是会被端口1占用的&lt;/p>
&lt;h2 id="issue-unit-unordered">issue-unit-unordered&lt;/h2>
&lt;p>乱序发射单元。&lt;/p>
&lt;p>是MIPS R10k采取的方案。当指令被派遣时，会选择发射队列中最靠前的可用位置进行安排（valid优先而不是前面的优先，即“乱序”），而后续不会移动位置（即“静态”）。 这就意味着如果某条指令在派遣时“恰好”被安排到了较为靠后的位置，那它就需要等待很久（等到排在前面位置的能够发射的指令不足时）才能被发射。 这种实现方式比较简单，但性能不够高。&lt;/p>
&lt;p>在IssueUnit抽象类的基础上实现了以下功能：&lt;/p>
&lt;ul>
&lt;li>为每一个发射槽增加一个写使能的独热码信号，用于将派遣的指令安排到发射队列中。&lt;/li>
&lt;li>实现高低两个优先级的发射尝试。&lt;/li>
&lt;/ul>
&lt;p>插一嘴，这个extend真的很聪明，这样不仅是io,所有的变量都可以用&lt;/p>
&lt;h2 id="execution-unit">execution-unit&lt;/h2>
&lt;p>在BOOM中，一个执行单元(Execution Unit)连接到一个发射端口上，接收一个发射的指令（即三发射的BOOM需要有三个执行单元），其内部拥有一个或多个功能单元(Functional Unit)。 比如一个执行单元可能仅包括一个整数ALU，也可能是整数ALU、整数乘法的组合。本文件中，先定义了一个抽象的执行单元类ExecutionUnit，然后派生出两个子类ALUExeUnit和FPUExeUnit，其中可含有的功能单元不同，而且含有什么样的功能单元可由构造时传入的参数决定。执行单元的示意图如下：&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 166;
flex-basis: 399px"
>
&lt;a href="https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250128231048679.png" data-size="1089x655">
&lt;img src="https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250128231048679.png"
width="1089"
height="655"
srcset="https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250128231048679_hu232164126836195495.png 480w, https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BBexu/image-20250128231048679_hu8453539613154074089.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>发射窗口调度微指令到一个特定的执行流水线上&lt;/p>
&lt;p>一个给定的指令流水线可能包含多个功能单元；有一个或多个读写端口&lt;/p>
&lt;h2 id="func-unit-decode">func-unit-decode&lt;/h2>
&lt;p>—— 功能单元译码。&lt;/p>
&lt;p>从指令的发射阶段（ISS）接收valid信号和微指令uop，通过译码表得到读寄存器的控制信号（RRdCrtlSigs），根据此控制信号修改微指令uop中的成员，并将修改后的uop连同valid信号一并发送到读寄存器（RRD）阶段。&lt;/p>
&lt;p>在register-read.scala的连接输出部分中有应用。而且由于RegisterReadDecode类并没有考虑分支，实际上register-read.scala中应用这个类时还对输出进行了分支的修正。&lt;/p>
&lt;h2 id="regfile">regfile&lt;/h2>
&lt;p>—— 寄存器堆。&lt;/p>
&lt;p>BOOM使用统一的物理寄存器堆(Physical Register File, PRF)设计。寄存器堆同时保持提交状态和推测状态。此外，有两个寄存器堆：一个用于整数，另一个用于浮点寄存器值。重命名映射表跟踪与ISA寄存器对应的物理寄存器。&lt;/p>
&lt;h2 id="register-read">register-read&lt;/h2>
&lt;p>—— 读寄存器。&lt;/p>
&lt;p>工作流程：从指令发射（ISS）阶段接受valid信号和微指令uop信息，以及读寄存器的地址（ISS阶段末）；在读寄存器（RDD）阶段的开始通过func-unit-decode中定义的译码器得到功能单元译码、考虑分支后的微指令uop；RDD阶段，从连接的寄存器堆读取数据；在RDD阶段末，用从ALU过来的旁路信息更新数据，最终传给执行（EXE）阶段。&lt;/p>
&lt;p>当前实现的寄存器堆静态地为所有已发射指令提供需要的所有寄存器读取端口。例如，如果发射端口#0对应于一个整数ALU，发射端口#1对应于内存单元，那么前两个寄存器读取端口将静态地为ALU服务，下两个寄存器读取端口将为内存单元服务，总共四个读取端口。&lt;/p>
&lt;p>未来的设计可以通过提供更少的寄存器读取端口和使用动态调度来仲裁(arbitrate)这些端口来提高区域效率。这尤其有用，因为大多数指令只需要一个操作数。然而，它确实增加了设计的额外复杂性，这通常表现为需要额外的流水线级来仲裁或者检测结构冲突。它还需要能够终止已发射的微指令，并在以后的周期中从发射队列重新发射它们。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Boom代码阅读</title><link>https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/</link><pubDate>Wed, 22 Jan 2025 15:45:53 +0800</pubDate><guid>https://VastCircle.github.io/2025/boom%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/</guid><description>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山邀请报告——缓存基础和香山缓存</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/</link><pubDate>Sat, 18 Jan 2025 22:20:27 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/</guid><description>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 188;
flex-basis: 452px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118225744967.png" data-size="1294x687">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118225744967.png"
width="1294"
height="687"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118225744967_hu17796226399376657198.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118225744967_hu8348936626104533362.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 424px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118230002923.png" data-size="1309x740">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118230002923.png"
width="1309"
height="740"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118230002923_hu9798892846660929321.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118230002923_hu6109206764932188994.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 435px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232456251.png" data-size="1357x747">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232456251.png"
width="1357"
height="747"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232456251_hu4998760989591435538.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232456251_hu16418333394623735188.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>recency-frindly : 局部性非常好 thrashing : 会频繁发生驱逐 scans:所有的数据块都会发生一次&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 417px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232510787.png" data-size="1360x782">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232510787.png"
width="1360"
height="782"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232510787_hu5176719486207943861.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232510787_hu3011382099456341399.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>状态机和流水线，两种实现方法 ，直接把状态机的状态转移变成流水化&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 169;
flex-basis: 407px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232533090.png" data-size="1308x770">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232533090.png"
width="1308"
height="770"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232533090_hu2929330183976642803.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232533090_hu3991030044930694475.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 433px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232736716.png" data-size="1323x732">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232736716.png"
width="1323"
height="732"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232736716_hu5222643159378491922.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232736716_hu9197451868926586742.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 433px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232906256.png" data-size="1325x734">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232906256.png"
width="1325"
height="734"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232906256_hu14571253957359917928.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232906256_hu3850376586598384329.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232921023.png" data-size="1287x724">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232921023.png"
width="1287"
height="724"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232921023_hu6814091748536146030.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250118232921023_hu16834944892027911259.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>如果l1向l2发起请求，l2缺失，此时l2如果不保存数据直接发送到l1,那就是exclusive,反之为inclusive&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 440px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119003438348.png" data-size="1247x679">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119003438348.png"
width="1247"
height="679"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119003438348_hu17366960834613677015.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119003438348_hu968345139392034830.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 432px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119003907913.png" data-size="1298x721">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119003907913.png"
width="1298"
height="721"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119003907913_hu11243346265088931960.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119003907913_hu17496904611477769627.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 423px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004008194.png" data-size="1292x732">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004008194.png"
width="1292"
height="732"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004008194_hu950996066491152113.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004008194_hu1167296434959260458.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 423px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004026004.png" data-size="1287x730">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004026004.png"
width="1287"
height="730"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004026004_hu13241582125136117771.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004026004_hu13281605453379818693.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 215;
flex-basis: 516px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004254631.png" data-size="1966x914">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004254631.png"
width="1966"
height="914"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004254631_hu1909707357180025293.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004254631_hu9484678638640288759.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004615241.png" data-size="1942x1091">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004615241.png"
width="1942"
height="1091"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004615241_hu16732091789274836044.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004615241_hu1335668346181368702.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 184;
flex-basis: 441px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004734422.png" data-size="2039x1108">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004734422.png"
width="2039"
height="1108"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004734422_hu14877964529620557612.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004734422_hu6772159552247648311.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 416px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004932248.png" data-size="2080x1200">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004932248.png"
width="2080"
height="1200"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004932248_hu18004695129640747484.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119004932248_hu10744832376658880264.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 197;
flex-basis: 473px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005149555.png" data-size="2061x1045">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005149555.png"
width="2061"
height="1045"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005149555_hu6686335917809774114.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005149555_hu11014080372333131714.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 184;
flex-basis: 441px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005334789.png" data-size="2023x1099">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005334789.png"
width="2023"
height="1099"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005334789_hu12411110411732073913.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005334789_hu8051184441236800021.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 186;
flex-basis: 447px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005402555.png" data-size="1866x1001">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005402555.png"
width="1866"
height="1001"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005402555_hu17644797506410298130.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005402555_hu16236880368199355905.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 431px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005421999.png" data-size="2020x1124">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005421999.png"
width="2020"
height="1124"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005421999_hu12625966316117681973.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005421999_hu13147668537953234318.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>TileLink是一种MSI协议&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 435px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005530248.png" data-size="1956x1079">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005530248.png"
width="1956"
height="1079"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005530248_hu3663855951118918050.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005530248_hu5600934352499033520.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="内存一致性">内存一致性&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 198;
flex-basis: 476px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005655595.png" data-size="1930x972">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005655595.png"
width="1930"
height="972"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005655595_hu11791825202673569921.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005655595_hu7204270256712815652.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 191;
flex-basis: 459px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005739779.png" data-size="2090x1091">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005739779.png"
width="2090"
height="1091"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005739779_hu15887711736617917540.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005739779_hu12199865438806545154.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 192;
flex-basis: 461px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005839238.png" data-size="2046x1063">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005839238.png"
width="2046"
height="1063"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005839238_hu15882748741824011751.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005839238_hu5372181469061684100.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 420px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005940510.png" data-size="2022x1154">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005940510.png"
width="2022"
height="1154"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005940510_hu12751888804636808498.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119005940510_hu13218537198514397308.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 187;
flex-basis: 450px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119131756286.png" data-size="2066x1101">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119131756286.png"
width="2066"
height="1101"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119131756286_hu8839339732634562063.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119131756286_hu250466939554253114.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 168;
flex-basis: 403px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119131939762.png" data-size="1956x1164">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119131939762.png"
width="1956"
height="1164"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119131939762_hu1528820770662586528.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119131939762_hu16404989168419972145.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>RISCV用的是这个&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 214;
flex-basis: 515px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183341765.png" data-size="2210x1028">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183341765.png"
width="2210"
height="1028"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183341765_hu8980560017007073702.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183341765_hu12340405734554742610.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 187;
flex-basis: 450px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183442754.png" data-size="1978x1054">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183442754.png"
width="1978"
height="1054"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183442754_hu2905532866458813204.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183442754_hu11927344625282148689.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 202;
flex-basis: 486px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183657814.png" data-size="2007x990">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183657814.png"
width="2007"
height="990"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183657814_hu16581804213675319336.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183657814_hu13728063266924871892.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="香山缓存设计">香山缓存设计&lt;/h2>
&lt;p>通过软件的方法可以实现（fence)icache的一致性&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 191;
flex-basis: 458px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183722306.png" data-size="2034x1064">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183722306.png"
width="2034"
height="1064"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183722306_hu9782416616729339970.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119183722306_hu4951367081794265190.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 422px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210259535.png" data-size="1911x1086">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210259535.png"
width="1911"
height="1086"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210259535_hu2972254611874177462.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210259535_hu12972640277754083036.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 168;
flex-basis: 404px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210329206.png" data-size="1899x1127">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210329206.png"
width="1899"
height="1127"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210329206_hu7609476184012261457.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210329206_hu16220495496979080997.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 185;
flex-basis: 444px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210342603.png" data-size="2050x1106">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210342603.png"
width="2050"
height="1106"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210342603_hu13426380098330177382.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210342603_hu6066952952251966725.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 165;
flex-basis: 397px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210406900.png" data-size="1899x1146">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210406900.png"
width="1899"
height="1146"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210406900_hu9686157624313300359.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210406900_hu10074729609359181580.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 421px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210444114.png" data-size="2021x1152">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210444114.png"
width="2021"
height="1152"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210444114_hu6045358049916079317.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210444114_hu16031060411567944164.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 167;
flex-basis: 402px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210548136.png" data-size="1978x1178">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210548136.png"
width="1978"
height="1178"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210548136_hu17257699153319070419.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210548136_hu2485630269492026327.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 422px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210612081.png" data-size="1989x1131">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210612081.png"
width="1989"
height="1131"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210612081_hu16481193018382859444.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210612081_hu15122884383065755434.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 182;
flex-basis: 437px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210625564.png" data-size="1933x1061">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210625564.png"
width="1933"
height="1061"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210625564_hu11021234585307133581.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210625564_hu5366974285674456926.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 167;
flex-basis: 401px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210914378.png" data-size="1969x1178">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210914378.png"
width="1969"
height="1178"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210914378_hu7282549227965488560.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119210914378_hu16585210020051401541.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 439px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211036673.png" data-size="2029x1108">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211036673.png"
width="2029"
height="1108"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211036673_hu7904586635127726297.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211036673_hu12582869197832265192.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 422px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211214058.png" data-size="2019x1148">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211214058.png"
width="2019"
height="1148"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211214058_hu7347127808580326317.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211214058_hu4733263613966094187.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 420px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211528846.png" data-size="1985x1133">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211528846.png"
width="1985"
height="1133"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211528846_hu16017467490074870778.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211528846_hu14562882105638174754.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 435px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211902544.png" data-size="1996x1100">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211902544.png"
width="1996"
height="1100"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211902544_hu15437365290485690512.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119211902544_hu14273453395128845339.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 184;
flex-basis: 442px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119212349407.png" data-size="1958x1062">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119212349407.png"
width="1958"
height="1062"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119212349407_hu10332196601861637430.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119212349407_hu11386222926846052911.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 191;
flex-basis: 459px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119212431391.png" data-size="2116x1106">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119212431391.png"
width="2116"
height="1106"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119212431391_hu13779356156879227460.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80%E5%92%8C%E9%A6%99%E5%B1%B1%E7%BC%93%E5%AD%98/image-20250119212431391_hu9818821855118836476.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山邀请报告——处理器的性能测算基础</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 18 Jan 2025 20:40:58 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/</guid><description>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 190;
flex-basis: 456px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118204201260.png" data-size="1448x762">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118204201260.png"
width="1448"
height="762"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118204201260_hu7806315297422038694.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118204201260_hu15255998948895200954.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 224;
flex-basis: 539px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118204919400.png" data-size="1388x618">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118204919400.png"
width="1388"
height="618"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118204919400_hu13040004070214174965.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118204919400_hu9682467326500832916.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 197;
flex-basis: 474px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118205217873.png" data-size="1419x718">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118205217873.png"
width="1419"
height="718"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118205217873_hu1930195526588966469.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118205217873_hu13603129774498233793.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 200;
flex-basis: 481px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118205324965.png" data-size="1397x697">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118205324965.png"
width="1397"
height="697"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118205324965_hu1696051655280046637.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118205324965_hu3700959415468352738.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 440px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118205519294.png" data-size="1421x775">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118205519294.png"
width="1421"
height="775"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118205519294_hu1545981204178891134.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118205519294_hu8901102754560263372.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 425px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118212842765.png" data-size="1427x805">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118212842765.png"
width="1427"
height="805"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118212842765_hu9260572127934353411.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118212842765_hu9564265175071184415.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 424px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118212934056.png" data-size="1420x802">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118212934056.png"
width="1420"
height="802"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118212934056_hu5411636970454135447.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118212934056_hu13857444285732679078.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213310363.png" data-size="1390x780">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213310363.png"
width="1390"
height="780"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213310363_hu3235567910942323629.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213310363_hu15074052026784152653.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 423px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213439732.png" data-size="1421x805">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213439732.png"
width="1421"
height="805"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213439732_hu13589159087071033596.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213439732_hu4464689644220084619.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 430px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213515536.png" data-size="1456x811">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213515536.png"
width="1456"
height="811"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213515536_hu6080745634990103412.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213515536_hu11533479600460456256.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>basic block是参考2中给出的一个概念，由程序中不包含跳转指令的一段连续指令组成。在simpoint中对程序的运行时先按100Million条指令为单位切段，就级，然后统计这段时间内，每个basic block执行的次数，再将每个basic block出现的次数和block中包含的指令条数相乘就得到这个basic block的对应的值，所有这些值组成一个向量。如果程序运行时包含N个100Million条指令组成的指令流，就会有N个向量，统称为basic block vector&lt;/p>
&lt;p>原文链接：https://blog.csdn.net/anfang654321/article/details/128225885&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 431px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213658678.png" data-size="1426x794">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213658678.png"
width="1426"
height="794"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213658678_hu9588270677978061038.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118213658678_hu14580742896689221126.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>interval1 和interval2是更相似的 ，那就可以选择1,2中的一个&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 428px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118214157247.png" data-size="1421x796">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118214157247.png"
width="1421"
height="796"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118214157247_hu3087400219795760667.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118214157247_hu4240907876051123624.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118214310129.png" data-size="1443x812">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118214310129.png"
width="1443"
height="812"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118214310129_hu10229646492910305939.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118214310129_hu11529836604443758197.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>先用功能CPU模型跑，在关键点的时候切成其他模型跑&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 440px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220422292.png" data-size="1423x775">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220422292.png"
width="1423"
height="775"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220422292_hu4359387333340067098.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220422292_hu570524166498579882.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 440px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220547666.png" data-size="1416x772">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220547666.png"
width="1416"
height="772"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220547666_hu3463861150533775262.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220547666_hu11042174672507643598.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 424px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220625057.png" data-size="1435x811">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220625057.png"
width="1435"
height="811"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220625057_hu1469195352383555517.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220625057_hu8238402017054837020.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 190;
flex-basis: 456px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220959264.png" data-size="1427x751">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220959264.png"
width="1427"
height="751"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220959264_hu14612295878604786474.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118220959264_hu7178903635214149113.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 434px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221342802.png" data-size="1427x789">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221342802.png"
width="1427"
height="789"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221342802_hu12376728686168997668.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221342802_hu12268990762482827981.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 425px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221419074.png" data-size="1399x789">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221419074.png"
width="1399"
height="789"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221419074_hu13097204419161374062.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221419074_hu6088081704558186816.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>如何知道是正常开机还是断电状态的回复&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 174;
flex-basis: 419px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221610741.png" data-size="1400x801">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221610741.png"
width="1400"
height="801"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221610741_hu17450021382109039595.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221610741_hu5093935181405342524.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 197;
flex-basis: 474px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221815120.png" data-size="1415x715">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221815120.png"
width="1415"
height="715"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221815120_hu699227878030896571.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221815120_hu11048266183512529548.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 196;
flex-basis: 472px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221837202.png" data-size="1415x719">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221837202.png"
width="1415"
height="719"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221837202_hu12118373986357167667.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221837202_hu5960891771383781031.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 421px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221908135.png" data-size="1422x809">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221908135.png"
width="1422"
height="809"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221908135_hu13126294237141303371.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/image-20250118221908135_hu6941022095416491039.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/anfang654321/article/details/128225885" target="_blank" rel="noopener"
>simpoint原理&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.geeksforgeeks.org/basic-blocks-in-compiler-design/" target="_blank" rel="noopener"
>basic-blocks&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山邀请报告——向量扩展的设计和实现</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/</link><pubDate>Sat, 18 Jan 2025 17:07:03 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/</guid><description>&lt;h2 id="香山ppt">香山ppt&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 420px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118170720617.png" data-size="1069x610">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118170720617.png"
width="1069"
height="610"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118170720617_hu12962601924616772917.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118170720617_hu8514861846678028089.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>如果向量寄存器是128位的话，SEW=8,说明有128/8个元素参与运算&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 434px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118170807124.png" data-size="1054x582">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118170807124.png"
width="1054"
height="582"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118170807124_hu213987634640649283.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118170807124_hu7084930219243093441.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 424px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118170920337.png" data-size="1077x609">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118170920337.png"
width="1077"
height="609"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118170920337_hu13661639230233305257.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118170920337_hu2812517896893428414.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 429px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118193638239.png" data-size="1697x949">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118193638239.png"
width="1697"
height="949"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118193638239_hu428716553790684293.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118193638239_hu17891935706226758126.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 197;
flex-basis: 472px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118202756546.png" data-size="1728x877">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118202756546.png"
width="1728"
height="877"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118202756546_hu17398128463074043002.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118202756546_hu11205020570793895382.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 432px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118193833841.png" data-size="1674x930">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118193833841.png"
width="1674"
height="930"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118193833841_hu1973675652749056729.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118193833841_hu13661675957718830741.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 187;
flex-basis: 448px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203009793.png" data-size="1992x1065">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203009793.png"
width="1992"
height="1065"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203009793_hu7369962887686189420.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203009793_hu2487251235783783758.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118194229525.png" data-size="1696x952">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118194229525.png"
width="1696"
height="952"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118194229525_hu17210771292576532436.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118194229525_hu5115193208135821361.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 192;
flex-basis: 462px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203339192.png" data-size="1999x1037">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203339192.png"
width="1999"
height="1037"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203339192_hu1148411989421398167.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203339192_hu14587667010289114498.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 441px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203602147.png" data-size="2000x1088">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203602147.png"
width="2000"
height="1088"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203602147_hu6896807261784393560.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203602147_hu9349260967448736447.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 436px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203715698.png" data-size="1968x1083">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203715698.png"
width="1968"
height="1083"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203715698_hu1900622263699340851.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118203715698_hu3954513135140107088.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="手册学习">手册学习&lt;/h2>
&lt;h3 id="vector-extension-programmers-model">Vector Extension Programmer&amp;rsquo;s Model&lt;/h3>
&lt;ul>
&lt;li>VLEN: 向量bit数, ELEN: 最大支持的元素bit数&lt;/li>
&lt;li>增加了32个vector regs, 7个非特权CSRs&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 324;
flex-basis: 778px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195010316.png" data-size="1496x461">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195010316.png"
width="1496"
height="461"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195010316_hu11029420423753866731.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195010316_hu3708963114371925358.png 1024w"
loading="lazy"
alt="image-20250118195010316">
&lt;/a>
&lt;figcaption>image-20250118195010316&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="34-vtypevector-type-register">3.4 VType,Vector type register&lt;/h4>
&lt;p>一个Vector reg被分成VLEN/SEW个元素，sew代表一个元素的大小&lt;/p>
&lt;p>多个vector可以组成一个group,lmul代表一组有多少个向量寄存器&lt;/p>
&lt;p>向量指令执行期间操作的元素索引可以分为四个不相交的子集。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>预启动元素（The prestart elements）:&lt;/strong> 是指索引小于&lt;code>vstart&lt;/code>寄存器初始值的元素。预启动元素不会引发异常，也不会更新目标向量寄存器。&lt;/li>
&lt;li>&lt;strong>活跃元素（The active elements）:&lt;/strong> 指的是向量指令执行期间，在当前向量长度范围内的元素，并且在该元素位置启用了当前掩码。活动元素可以引发异常并更新目标向量寄存器组。&lt;/li>
&lt;li>&lt;strong>非活跃元素（The inactive elements）:&lt;/strong> 指的是向量指令执行期间，在当前向量长度范围内的元素，但是在该元素位置禁用了当前掩码。 除非指定了masked agnostic（ &lt;code>vtype.vma = 1&lt;/code> ），否则非活跃元素不会引发异常，也不会更新任何目标向量寄存器组，在 &lt;code>vtype.vma = 1&lt;/code> 这种情况下，非活跃元素可能会被1覆盖。&lt;/li>
&lt;li>&lt;strong>尾部元素（The tail elements）:&lt;/strong> 是超出当前向量长度设置的元素。 尾部元素不会引发异常，并且只在指定了tail agnostic尾部不可知性（vtype.vta = 1）的情况下，才会更新目标向量寄存器组，在这种情况下，尾部元素可能会被1覆盖。 当LMUL &amp;lt;1时，尾部包含VLMAX之后的元素，这些元素保存在同一向量寄存器中。&lt;/li>
&lt;li>&lt;strong>主体部分（body）:&lt;/strong> 用于表示活跃元素或非活跃元素的集合，即在预启动元素之后但在尾部元素之前。&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> for element index x
prestart = (0 &amp;lt;= x &amp;lt; vstart)
mask(x) = unmasked || v0[x].LSB == 1
active(x) = (vstart &amp;lt;= x &amp;lt; vl) &amp;amp;&amp;amp; mask(x)
inactive(x) = (vstart &amp;lt;= x &amp;lt; vl) &amp;amp;&amp;amp; !mask(x)
body(x) = active(x) || inactive(x)
tail(x) = (vl &amp;lt;= x &amp;lt; max(VLMAX,VLEN/SEW))
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>对尾部元素的mask行为将被视为tail-agnostic, 无论vta如何配置.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当指定了agnostic时,对应的向量元素可以保持之前的值, 也可以被重写为全1. 并且对于同样的输入, 是保持undisturbed还是覆写为1,可以是不确定的.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>agnostic策略实际上是为了兼容带有向量寄存器重命名的机器设计的. 如果只有undisturbed策略, 那么在寄存器重命名的时候就需要将旧的物理目的寄存器的内容复制到新的物理目的寄存器. 而设置为agnostic之后就可以忽略掉这部分无效的内容.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于超标量的流水线，会采用寄存器重命名的方式，来避免WAW以及WAR这两类hazard。那程序的逻辑寄存器会映射到物理寄存器，映射后的对应关系会更新到重命名映射表中。那对于undisturbed策略，需要目的寄存器相应的元素保持原来的值。那么在用新的物理寄存器重命名时，还需要根据重命名映射表，查到原有的映射关系，再把这部分元素的值先读出来，写到重命名后的对应元素位置。这种方式对于压根儿不关心尾部元素集合或者被屏蔽元素集合的值的后续操作，就既降低了性能，又增加了不必要的功耗。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于普通的in-order流水线，可以采用这种undisturbed的策略。对于超标量的流水线，使用agnostic策略就显得更加明智。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>标志之前的一次vsetvli指令下发了一次不支持的值&lt;/p>
&lt;p>当尝试执行一条vill位=1的指令时, 将会抛出非法指令异常&lt;/p>
&lt;p>vill=1时, vtype的其他部分需要被置为0&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 292;
flex-basis: 702px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195048837.png" data-size="1514x517">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195048837.png"
width="1514"
height="517"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195048837_hu8555172343849218608.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195048837_hu10265980440992983589.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 509;
flex-basis: 1223px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195414003.png" data-size="1473x289">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195414003.png"
width="1473"
height="289"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195414003_hu8169973770465030849.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195414003_hu18311133056533188348.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 374;
flex-basis: 898px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195615362.png" data-size="1598x427">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195615362.png"
width="1598"
height="427"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195615362_hu123168884686312277.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195615362_hu5652542295323872346.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 540;
flex-basis: 1296px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195928644.png" data-size="1621x300">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195928644.png"
width="1621"
height="300"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195928644_hu7013219777841448867.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/image-20250118195928644_hu16605492869939067046.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="35--vector-length-register-vl">3.5 Vector Length Register, vl&lt;/h4>
&lt;ul>
&lt;li>只能通过vset{i}vl{i}指令赋值&lt;/li>
&lt;li>定义了需一条向量指令更新的向量元素个数&lt;/li>
&lt;/ul>
&lt;h4 id="36-vector-byte-length-vlenb">3.6 Vector Byte Length, vlenb&lt;/h4>
&lt;ul>
&lt;li>vlenb = VLEN/8&lt;/li>
&lt;li>该寄存器是给一些需要将VLEN以byte计数的场景，否则还需要手动计算byte数&lt;/li>
&lt;/ul>
&lt;h4 id="37-vector-start-index-csr-vstart">3.7 Vector Start Index CSR, vstart&lt;/h4>
&lt;ul>
&lt;li>定义了一条向量指令执行时的第一个元素在向量中的索引号&lt;/li>
&lt;li>一条向量指令结束时会将vstart归零&lt;/li>
&lt;li>vstart之前的向量值将保持undisturbed&lt;/li>
&lt;li>如果一条向量指令引发了非法异常，则不会修改vstart&lt;/li>
&lt;li>vstart可以被非特权等级的代码修改， 但是非0的vstart可能使得向量指令运行变慢，所以不应该被应用程序修改&lt;/li>
&lt;/ul>
&lt;h4 id="38-vector-fixed-point-rounding-mode-register--vxrm">3.8. Vector Fixed-Point Rounding Mode Register , vxrm&lt;/h4>
&lt;ul>
&lt;li>vxrm[1:0]为可读可写寄存器，该寄存器不仅有独立的寄存器地址，并且在vcsr寄存器中也有对应的域。该寄存器控制定点舍入模式，一共四种模式，分别是round-to-nearest-up（rnu）、round-to-nearest-even(rne)、round-down(rdn)、round-to-odd(rod)。(问题：可否解释一下定点数在内存中的存放格式)&lt;/li>
&lt;li>vxrm[1:0]寄存器通过单条csrwi指令写入值。&lt;/li>
&lt;li>假如源操作数是v，有低d bit数据要被截掉，那么做完rounding-mode之后的最终结果应该是(v&amp;raquo;d)+r，r就是根据不同的rounding mode得到的增量值。
rnu：向距离近的方向进行舍入，当距离与两边都相等时，向上舍入。
rne：向距离近的方向进行舍入，当距离与两边都相等时，向偶数方向舍入。
rdn：向下舍入，直接取移位后的值。
rod：舍入到奇数值方向。
其中，v[d-1]表示权重位。当v[d-1]=0，表示距离舍的方向更近；当v[d-1]=1且v[d-2:0]=0时，距离舍入两个方向距离均相等；当v[d-1]=1，且v[d-2:0] != 0时，表示距离入的方向更近。&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
>
&lt;a href="https://lyc-picture.oss-cn-shanghai.aliyuncs.com/obsidian/RISCV-V-1/1670679732795.png" >
&lt;img src="https://lyc-picture.oss-cn-shanghai.aliyuncs.com/obsidian/RISCV-V-1/1670679732795.png"
loading="lazy"
alt="img">
&lt;/a>
&lt;figcaption>img&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="39-vector-fixed-point-saturation-flag-vxsat">3.9. Vector Fixed-Point Saturation Flag, vxsat&lt;/h4>
&lt;ul>
&lt;li>vxsat为可读可写寄存器，该寄存器不仅有独立的寄存器地址，并且在vcsr寄存器中也有对应的域。该寄存器有效表示输出结果做了饱和截位以适应目的寄存器格式。比如当运算发生正溢出时，保留结果为能取到的最大正值；当运算发生负溢出时，保留结果为负数最小值。&lt;/li>
&lt;/ul>
&lt;h4 id="310-vector-control-and-status-register-vcsr">3.10. Vector Control and Status Register, vcsr&lt;/h4>
&lt;ul>
&lt;li>实际上包含了vxrm和vxsat两个寄存器&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
>
&lt;a href="https://lyc-picture.oss-cn-shanghai.aliyuncs.com/obsidian/RISCV-V-1/1670680295958.png" >
&lt;img src="https://lyc-picture.oss-cn-shanghai.aliyuncs.com/obsidian/RISCV-V-1/1670680295958.png"
loading="lazy"
alt="img">
&lt;/a>
&lt;figcaption>img&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="311-state-of-vector-extension-at-reset">3.11. State of Vector Extension at Reset&lt;/h4>
&lt;ul>
&lt;li>推荐的做法是在reset时， vtype.vill=1， 其余位为0， 且vl=0&lt;/li>
&lt;li>大部分向量单元需要一个初始的vset{i}vl{i}, 来复位vstart. vxrm和vxsat也需要在使用前复位&lt;/li>
&lt;/ul>
&lt;h3 id="5-vector-instruction-formats">5. Vector Instruction Formats&lt;/h3>
&lt;ul>
&lt;li>向量指令格式会单独扩展一个格式：OP-V&lt;/li>
&lt;li>向量的load和store指令沿用LOAD-FP和STORE-FP:&lt;/li>
&lt;li>&lt;figure
>
&lt;a href="https://lyc-picture.oss-cn-shanghai.aliyuncs.com/obsidian/RISCV-V-1/1670764564768.png" >
&lt;img src="https://lyc-picture.oss-cn-shanghai.aliyuncs.com/obsidian/RISCV-V-1/1670764564768.png"
loading="lazy"
alt="img">
&lt;/a>
&lt;figcaption>img&lt;/figcaption>
&lt;/figure>&lt;/li>
&lt;li>向量算数指令：&lt;/li>
&lt;li>&lt;figure
>
&lt;a href="https://lyc-picture.oss-cn-shanghai.aliyuncs.com/obsidian/RISCV-V-1/1670764763166.png" >
&lt;img src="https://lyc-picture.oss-cn-shanghai.aliyuncs.com/obsidian/RISCV-V-1/1670764763166.png"
loading="lazy"
alt="img">
&lt;/a>
&lt;figcaption>img&lt;/figcaption>
&lt;/figure>&lt;/li>
&lt;li>向量配置指令：&lt;/li>
&lt;li>&lt;figure
>
&lt;a href="https://lyc-picture.oss-cn-shanghai.aliyuncs.com/obsidian/RISCV-V-1/1670764852911.png" >
&lt;img src="https://lyc-picture.oss-cn-shanghai.aliyuncs.com/obsidian/RISCV-V-1/1670764852911.png"
loading="lazy"
alt="img">
&lt;/a>
&lt;figcaption>img&lt;/figcaption>
&lt;/figure>&lt;/li>
&lt;li>&lt;figure
>
&lt;a href="https://lyc-picture.oss-cn-shanghai.aliyuncs.com/obsidian/RISCV-V-1/1670764871881.png" >
&lt;img src="https://lyc-picture.oss-cn-shanghai.aliyuncs.com/obsidian/RISCV-V-1/1670764871881.png"
loading="lazy"
alt="img">
&lt;/a>
&lt;figcaption>img&lt;/figcaption>
&lt;/figure>&lt;/li>
&lt;li>向量指令可以接收标量或者向量操作数，生成标量或者向量操作数&lt;/li>
&lt;li>大多数向量指令可以通过mask实现条件或者非条件执行&lt;/li>
&lt;/ul>
&lt;h4 id="51-scalar-operands">5.1. Scalar Operands&lt;/h4>
&lt;ul>
&lt;li>标量操作数可以是立即数，整数寄存器（x），浮点寄存器(f)或者一个vector寄存器的第0个元素。&lt;/li>
&lt;li>标量结果可以写入整数寄存器（x），浮点寄存器(f)或者一个vector寄存器的第0个元素。&lt;/li>
&lt;/ul>
&lt;h4 id="52-vector-operands">5.2. Vector Operands&lt;/h4>
&lt;ul>
&lt;li>每个向量操作数都有一个effective element width (EEW), 一般情况下EEW=SEW.&lt;/li>
&lt;li>每个向量操作数都有一个effectiveLMUL (EMUL), 一般情况下EMUL=LMUL.&lt;/li>
&lt;li>某些向量指令的源和目的向量具有相同的元素个数，但是元素位宽不同。此时EEW和EMUL就不等于SEW和LMUL, 但是EEW/EMUL = SEW/LMUL，这样才能保证元素个数相同。例如：大部分拓宽的向量算数指令的源操作向量组EEW=SEW, EMUL=LMUL, 但是目的操作向量组的EEW=2&lt;em>SEW, EMUL=2&lt;/em>LMUL&lt;/li>
&lt;li>向量操作数或者结果操作数可能占用一个或多个向量寄存器（取决于EMUL), 如果占用多个，默认占用编号值较低的向量寄存器。&lt;/li>
&lt;li>以下情况可以将目的向量寄存器组直接覆盖源向量寄存器组：
&lt;ol>
&lt;li>目的EEW=源EEW&lt;/li>
&lt;li>目的EEW&amp;lt;源EEW, 并且发生覆盖的源向量是&lt;strong>源向量寄存器组&lt;/strong>中的最低编号的向量寄存器。例如：LMUL=1, vnsrl.wi v0, v0, 3 is legal, but a destination of v1 is not&lt;/li>
&lt;li>目的EEW&amp;gt;源EEW, 源EMUL至少是1， 并且发生覆盖的是&lt;strong>目的向量寄存器组&lt;/strong>中的最高编号的向量寄存器。例如：LMUL=8, vzext.vf4 v0, v6 is legal, but a source of v0, v2, or v4 is not&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>向量指令最多可以用8个向量寄存器，也就是是说EMUL&amp;lt;=8. 如果一条向量指令需要超过8个向量寄存器，则会引发非法指令异常（实际上这种情况的指令编码空间是被保留的，目前不支持，可以被扩展）。 例如，当 LMUL = 8 时，尝试进行加宽操作产生加宽的向量寄存器组将引发非法指令异常，因为这意味着 EMUL = 16。&lt;/li>
&lt;li>拓宽（Widened)标量值时，放在向量寄存器的第一个元素，EMUL=1.&lt;/li>
&lt;/ul>
&lt;h4 id="53-vector-masking">5.3. Vector Masking&lt;/h4>
&lt;ul>
&lt;li>许多向量指令都支持掩码。 被掩码（非活跃）的元素操作不产生异常。 根据 &lt;code>vtype&lt;/code> 中的 &lt;code>vma&lt;/code> 位的设置，用_掩码不受干扰或掩码不可知_（mask-undisturbed or mask-agnostic）这两种策略来处理与掩码元素相对应的目标向量寄存器元素。&lt;/li>
&lt;li>在掩码向量指令中，由向量寄存器 &lt;code>v0&lt;/code> 保存用于控制掩码向量指令执行的掩码值。&lt;/li>
&lt;li>以后的向量扩展可能会提供更长的指令编码，并为完整的掩码寄存器说明符提供空间。&lt;/li>
&lt;li>只有当目标向量寄存器写入掩码值（如，comparisons）或归约的标量结果时，用于掩码向量指令的目标向量寄存器组才可以与源掩码寄存器（ v0 ）重叠。 否则，将引发非法指令异常。&lt;/li>
&lt;li>其他向量寄存器可用于保存有效的掩码值，并且提供掩码向量逻辑运算以执行谓词计算。&lt;/li>
&lt;li>当使用比较结果写入掩码时，当前向量长度结束后的目标掩码位将根据 vtype中的 vta 位设置的尾部策略（ undisturbed or agnostic ）处理。&lt;/li>
&lt;/ul>
&lt;h5 id="531-mask-encoding">5.3.1. Mask Encoding&lt;/h5>
&lt;ul>
&lt;li>掩码编码在指令( inst[25] )中的 vm 字段中，占一位。&lt;/li>
&lt;li>&lt;figure
class="gallery-image"
style="
flex-grow: 391;
flex-basis: 938px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/1670768745829.png" data-size="880x225">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/1670768745829.png"
width="880"
height="225"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/1670768745829_hu10321714657943603617.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E5%90%91%E9%87%8F%E6%89%A9%E5%B1%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/1670768745829_hu11051930551677279824.png 1024w"
loading="lazy"
alt="img">
&lt;/a>
&lt;figcaption>img&lt;/figcaption>
&lt;/figure>&lt;/li>
&lt;li>向量掩码在汇编代码中表示为另一个向量操作数，用 &lt;code>.t&lt;/code> 表示当 &lt;code>v0.mask[i]&lt;/code> 为 &lt;code>1&lt;/code> 时是否发生操作。如果未指定掩码操作数，则假定为未掩码的向量执行（ &lt;code>vm = 1&lt;/code> ）。&lt;/li>
&lt;li>在较早版本中，&lt;code>vm&lt;/code> 字段占2位，即&lt;code>vm [1：0]&lt;/code>，使用 &lt;code>v0&lt;/code> 寄存器并编码标量运算，表示真值和掩码值。_&lt;/li>
&lt;li>即使基本向量扩展中，仅支持一个向量掩码寄存器 &lt;code>v0&lt;/code> ，并且仅支持真实的谓词形式，汇编语法仍将其完全写出，以便与以后的扩展兼容，以后的扩展可能会添加掩码寄存器说明符并支持真值和掩码值。 掩码操作数上的 &lt;code>.t&lt;/code> 后缀还有助于掩码编码的可视化。&lt;/li>
&lt;/ul>
&lt;p>未完 ，主要去看参考文献1&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/lyc-seu/p/16999784.html" target="_blank" rel="noopener"
>riscv向量v扩展&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山邀请报告——性能测算基础</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 18 Jan 2025 17:03:01 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E9%82%80%E8%AF%B7%E6%8A%A5%E5%91%8A%E6%80%A7%E8%83%BD%E6%B5%8B%E7%AE%97%E5%9F%BA%E7%A1%80/</guid><description>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山源代码剖析——执行结果的回写和提交</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8C%E6%8F%90%E4%BA%A4/</link><pubDate>Sat, 18 Jan 2025 15:15:06 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8C%E6%8F%90%E4%BA%A4/</guid><description>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山源代码剖析——指令的执行</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/</link><pubDate>Sat, 18 Jan 2025 12:22:33 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/</guid><description>&lt;h2 id="来自b站">来自b站&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 190;
flex-basis: 457px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125745389.png" data-size="1248x654">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125745389.png"
width="1248"
height="654"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125745389_hu6455103444142149985.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125745389_hu13408301655024333974.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 192;
flex-basis: 462px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118122646890.png" data-size="1321x686">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118122646890.png"
width="1321"
height="686"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118122646890_hu5824373967140874702.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118122646890_hu13443897433867832410.png 1024w"
loading="lazy"
alt="image-20250118122646890">
&lt;/a>
&lt;figcaption>image-20250118122646890&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 430px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118123038854.png" data-size="1190x663">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118123038854.png"
width="1190"
height="663"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118123038854_hu12227099380864964012.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118123038854_hu11487698918407439436.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 174;
flex-basis: 418px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118123128055.png" data-size="1256x721">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118123128055.png"
width="1256"
height="721"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118123128055_hu9998693865073549876.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118123128055_hu726446140840068940.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>主流设计应该是后者，因为现在数据位宽越來越大&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 190;
flex-basis: 456px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118123343695.png" data-size="1225x644">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118123343695.png"
width="1225"
height="644"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118123343695_hu2822199494495896595.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118123343695_hu4908046017269385537.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 186;
flex-basis: 447px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125419225.png" data-size="1285x689">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125419225.png"
width="1285"
height="689"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125419225_hu7941915414749549256.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125419225_hu13619920351327868135.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 187;
flex-basis: 450px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125527128.png" data-size="1231x656">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125527128.png"
width="1231"
height="656"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125527128_hu18092799551270004120.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125527128_hu4474481624730640560.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 198;
flex-basis: 475px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125802477.png" data-size="1299x656">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125802477.png"
width="1299"
height="656"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125802477_hu7665354496067069892.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C/image-20250118125802477_hu53342973508367936.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山源代码剖析——执行结果的回写和commit</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/</link><pubDate>Thu, 16 Jan 2025 00:17:27 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/</guid><description>&lt;h2 id="rob">ROB&lt;/h2>
&lt;h3 id="来自香山视频">来自香山视频&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 440px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250121232917749.png" data-size="1600x872">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250121232917749.png"
width="1600"
height="872"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250121232917749_hu16240116585783215136.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250121232917749_hu2374164839472895496.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 185;
flex-basis: 444px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118154524538.png" data-size="1221x659">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118154524538.png"
width="1221"
height="659"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118154524538_hu12586805607486781820.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118154524538_hu16646626994208136430.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 211;
flex-basis: 507px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118154550609.png" data-size="1207x571">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118154550609.png"
width="1207"
height="571"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118154550609_hu8820408627450383500.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118154550609_hu751010192696889014.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 196;
flex-basis: 472px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118154631197.png" data-size="1255x638">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118154631197.png"
width="1255"
height="638"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118154631197_hu14795793953257482904.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118154631197_hu17446975760854519420.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 188;
flex-basis: 452px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155208467.png" data-size="1206x640">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155208467.png"
width="1206"
height="640"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155208467_hu16900554434803940083.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155208467_hu2436822984729042861.png 1024w"
loading="lazy"
alt="image-20250118155208467">
&lt;/a>
&lt;figcaption>image-20250118155208467&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 196;
flex-basis: 472px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155143121.png" data-size="1198x609">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155143121.png"
width="1198"
height="609"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155143121_hu8020050411739959756.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155143121_hu2086640584498103617.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 186;
flex-basis: 448px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155407635.png" data-size="1282x686">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155407635.png"
width="1282"
height="686"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155407635_hu6748373288385787608.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155407635_hu15643678671322717116.png 1024w"
loading="lazy"
alt="image-20250118155407635">
&lt;/a>
&lt;figcaption>image-20250118155407635&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 436px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155450958.png" data-size="1249x687">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155450958.png"
width="1249"
height="687"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155450958_hu4052223937938637666.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155450958_hu2289714975819762400.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>乱序阶段都包含rob表项顺序信息，在rob广播的时候，晚于rob的指令都会被刷掉&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 435px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155609408.png" data-size="1245x686">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155609408.png"
width="1245"
height="686"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155609408_hu7086068915608678124.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118155609408_hu4430667563226531991.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>通过artch表向spec table覆盖就可以恢复重命名表&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 194;
flex-basis: 466px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164002154.png" data-size="1264x650">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164002154.png"
width="1264"
height="650"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164002154_hu4458826254600934721.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164002154_hu11701762347582541830.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>实际上需要flush的指令是1,2,但是arch复原的状态是DeqPtr,5,6,7,0的状态也被复原了，所以可以通过walk,把这一步的重命名表重新写入&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 186;
flex-basis: 447px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118163924078.png" data-size="1280x686">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118163924078.png"
width="1280"
height="686"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118163924078_hu15184393303340380008.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118163924078_hu15754847451564122953.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 433px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164652267.png" data-size="1241x687">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164652267.png"
width="1241"
height="687"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164652267_hu5509229460689668355.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164652267_hu15107987695496765922.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 184;
flex-basis: 442px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164716093.png" data-size="1287x698">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164716093.png"
width="1287"
height="698"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164716093_hu8017660079878048067.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164716093_hu16425995546792936898.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164820190.png" data-size="1273x715">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164820190.png"
width="1273"
height="715"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164820190_hu2544571554965587374.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E5%9B%9E%E5%86%99%E5%92%8Ccommit/image-20250118164820190_hu4666994698236928928.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="rob的作用">ROB的作用&lt;/h3>
&lt;p>在乱序处理器中，ROB 的作用是给指令定序，使得程序正常执行的结果能够被保留下来。按照一条指令的执行流程，ROB 会依次影响指令的派遣、写回、提交流程，同时指令还可能在任何时刻被冲刷。&lt;/p>
&lt;h4 id="派遣">派遣&lt;/h4>
&lt;p>在 Dispatch 阶段，指令会被分配一个 ROB 的表项，并将一些需要保存的信息 &lt;code>RobCommitInfo&lt;/code> 存入 ROB 中，如指令的重命名信息、类型信息、对应 ftq 指针等。ROB 入队的宽度与重命名的宽度保持一致。&lt;/p>
&lt;p>在指令进入 ROB 之后，一些状态位会被更新，如 &lt;code>valid&lt;/code>, &lt;code>writebacked&lt;/code>, &lt;code>interrupt_safe&lt;/code>（出于简化设计的考虑，目前访存指令是否是 MMIO 的信息不会传递到 ROB，他们会在提交前发生访存，因此目前我们简化设计避免访存指令触发中断）等。&lt;/p>
&lt;h4 id="写回">写回&lt;/h4>
&lt;p>指令完成执行后，会通知 ROB 对应的运算操作已经完成，并由 ROB 将 &lt;code>writebacked&lt;/code> 标志位置为 &lt;code>true&lt;/code>。&lt;/p>
&lt;h4 id="提交">提交&lt;/h4>
&lt;p>在每一个时钟周期中，ROB 会依次检查队头的指令是否能够正常提交，并尽量多地将可以提交的指令通过 &lt;code>io.commits&lt;/code> 接口进行提交。&lt;/p>
&lt;p>针对有异常的指令，它们的提交会被阻塞，并通过 &lt;code>io.exception&lt;/code> 接口向外发出异常信息。&lt;/p>
&lt;h4 id="取消与回滚">取消与回滚&lt;/h4>
&lt;p>在指令的执行过程中，如果出现分支预测错误、访存违例等情况，该指令及更之后的指令可能会需要被冲刷。在这种情况下，ROB 会通过 &lt;code>io.redirect&lt;/code> 端口收到取消信息，并根据取消信息来判断哪一部分指令需要被取消。对于被取消掉的指令，ROB 会利用回滚的机制，通过 &lt;code>io.commits&lt;/code> 端口恢复重命名等信息，此时 &lt;code>io.commits.isWalk&lt;/code> 会被置为 &lt;code>true&lt;/code>&lt;/p>
&lt;h3 id="代码分析">代码分析&lt;/h3>
&lt;h4 id="rab-renamebuffer">Rab renameBuffer&lt;/h4>
&lt;p>rab的结构挺简单的，大部分的代码都是在改变指针，还有传递给rob对应的commit_info&lt;/p>
&lt;p>通过一个状态机来控制commit , idle,walk, special_walk, 在idle和special_walk的时候commit_valid , 在special_walk 和walk的时候 valid_valid&lt;/p>
&lt;p>Rab是对于寄存器映射信息的独立映射&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 熟悉的指针组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// pointer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enqPtrVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tabulate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">RenameBufferPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">flag&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">idx&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enqPtr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">enqPtrVec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enqPtrOH&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enqPtrOHShift&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">CircularShift&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">enqPtrOH&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// may shift [0, RenameWidth] steps
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enqPtrOHVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tabulate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">enqPtrOHShift&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">left&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enqPtrVecNext&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">enqPtrVec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cloneType&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">deqPtrVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tabulate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RabCommitWidth&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">RenameBufferPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">flag&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">idx&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">deqPtr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">deqPtrVec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">deqPtrOH&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">deqPtrOHShift&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">CircularShift&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">deqPtrOH&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">deqPtrOHVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tabulate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RabCommitWidth&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">deqPtrOHShift&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">left&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">deqPtrVecNext&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">deqPtrVec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cloneType&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">XSError&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">deqPtr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">toOH&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e06c75">deqPtrOH&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#98c379">&amp;#34;wrong one-hot reg between $deqPtr and $deqPtrOH&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">walkPtr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RenameBufferPtr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">walkPtrOH&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">walkPtr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">toOH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">walkPtrOHVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tabulate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RabCommitWidth&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e5c07b">CircularShift&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">walkPtrOH&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">left&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">walkPtrNext&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RenameBufferPtr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="renamebufferentry">RenameBufferEntry&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">RenameBufferEntry&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">XSBundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">info&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RabCommitInfo&lt;/span> &lt;span style="color:#7f848e">// 寄存器的映射关系
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">robIdx&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">OptionWrapper&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">env&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">FPGAPlatform&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RobPtr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// Rob的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">RabCommitInfo&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">XSBundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ldest&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">LogicRegsWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pdest&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">rfWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fpWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vecWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">v0Wen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vlWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isMove&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="vtypebuffer">VTypeBuffer&lt;/h4>
&lt;p>VTypeBuffer是用来定序向量配置指令，储存向量配置信息的 ， 暂时先不看&lt;/p>
&lt;h4 id="rob-1">Rob&lt;/h4>
&lt;p>robEntries(i).valid 通过判断 1. 有指令要进入 true, 2. 有指令deq false , flush false&lt;/p>
&lt;p>指针的更新通过专门的ptrGenModule来更新&lt;/p>
&lt;p>load/store 指令会写入在lsq里 （load store queue)&lt;/p>
&lt;p>needUpdate初始化的数据是通过robBanksRaddrThisLine定位的addr , 8个bank 对应8个数据，还有next_addr,总共16个数据 ，这16个数据其实就是连续的16个数据，16个连续的&lt;/p>
&lt;p>rob的commit主要是针对rename的提交，它需要去把一些物理寄存器的映射取消掉&lt;/p>
&lt;p>enq的指令是带有一个robIdx的，这是在dispatch的时候随着microop一起传递的，rob就是通过RobPtr向量(rob.resp)向dispatch传递robldx的&lt;/p>
&lt;p>从walkPtr到lastwalkPtr的内容都要进行回滚&lt;/p>
&lt;p>现在rob是没有存放old_pdest的，old_pdest貌似是在renameTable里存放的 , old_pdest现在是去更新arch_table的时候把被更新的值直接作为old_pdest，所以它其实没有必要和指令进行强绑定，它应该是要和逻辑寄存器号进行绑定的&lt;/p>
&lt;p>产生分支预测错误的指令，是直接把预测错误的指令和它后续的指令清除（具体就是Enq指针回退），实际不需要执行到这条语句的时候再处理&lt;/p>
&lt;p>commitValid代表提交有效&lt;/p>
&lt;p>robDeqGroup是直接和deqPtr指向的8个commit相连接的 ，commit_w说明执行的是否都已经回写&lt;/p>
&lt;p>commit它需要保证是从当前deqPtr往后延伸的指令，中间有个0就已经结束了&lt;/p>
&lt;p>robEntries -&amp;gt; robBanks -&amp;gt; robBanksRdataThisLine -&amp;gt; needUpdate -&amp;gt; robBanksRdataThisLineUpdate -&amp;gt; robDeqGroup -&amp;gt; commit&lt;/p>
&lt;p>香山的rob貌似一个表项不一定只有一个uop,这是因为向量指令的缘故，如果是向量指令的话一条指令会有多个uop&lt;/p>
&lt;p>有两段几乎是一模一样的代码段，一段是遍历rob表项对通过enq对表项赋值，另一段是通过遍历depPtr指向的一些表项进行相对应的更新&lt;/p>
&lt;p>dispatch阶段的robidx是通过一个独立的指针进行计数的，dispatch几条指令就加几，那代表它其实是不知道rob表项的具体使用情况的，真的会出现提交的和输入的一致的情况吗??&lt;/p>
&lt;p>enq指针它负责robEntires的写入，但是这个时候它是没有用到robindex的，它只是通过enq指针去顺序的写入&lt;/p>
&lt;p>必须得有波形，要不然太浪费时间了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 提交的表项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">robDeqGroup&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bankNum&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RobCommitEntryBundle&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">rawInfo&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e5c07b">CommitWidth&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">robDeqGroup&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">deqPtrVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">value&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bankAddrWidth&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)))).&lt;/span>&lt;span style="color:#e06c75">toSeq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">commitInfo&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e5c07b">CommitWidth&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">robDeqGroup&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">deqPtrVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">value&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bankAddrWidth&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)))).&lt;/span>&lt;span style="color:#e06c75">toSeq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">walkInfo&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e5c07b">CommitWidth&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">robDeqGroup&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">walkPtrVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">value&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bankAddrWidth&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)))).&lt;/span>&lt;span style="color:#e06c75">toSeq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e5c07b">CommitWidth&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">connectCommitEntry&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">robDeqGroup&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">robBanksRdataThisLineUpdate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">allCommitted&lt;/span>&lt;span style="color:#56b6c2">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">connectCommitEntry&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">robDeqGroup&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">robBanksRdataNextLineUpdate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">connectCommitEntry&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">RobCommitEntryBundle&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">RobEntryBundle&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Unit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">walk_v&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commit_v&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commit_w&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">uopNum&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">stdWritebacked&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">realDestSize&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">realDestSize&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">interrupt_safe&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">interrupt_safe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rfWen&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rfWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpWen&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fflags&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fflags&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wflags&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wflags&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vxsat&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vxsat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isRVC&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isRVC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isVset&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isVset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isHls&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isHls&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ftqIdx&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ftqIdx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ftqOffset&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ftqOffset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commitType&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commitType&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">instrSize&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">instrSize&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">loadWaitBit&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">loadWaitBit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isMove&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">eliminatedMove&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dirtyFs&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpWen&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wflags&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dirtyVs&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dirtyVs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">needFlush&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">needFlush&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">traceBlockInPipe&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">traceBlockInPipe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_pc&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_pc&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_instr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_instr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_ldest&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_ldest&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_pdest&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_pdest&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">robCommitEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_fuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">robEntry&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_fuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// rab和rob的交互
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * connection of [[rab]]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rab&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rab&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dest&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">src&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dest&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">src&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dest&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">src&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAccept&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">walkDestSizeDeqGroup&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">CommitWidth&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">MaxUopSize&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">realDestSizeSeq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">robDeqGroup&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">hasCommitted&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">h&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">h&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">realDestSize&lt;/span>&lt;span style="color:#56b6c2">)})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">walkDestSizeSeq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">robDeqGroup&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">donotNeedWalk&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">realDestSize&lt;/span>&lt;span style="color:#56b6c2">)})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">commitSizeSumSeq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e5c07b">CommitWidth&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">realDestSizeSeq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">reduce&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">+&amp;amp;&lt;/span> &lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// 从 0 到 i 的和
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">walkSizeSumSeq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e5c07b">CommitWidth&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">walkDestSizeSeq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">reduce&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">+&amp;amp;&lt;/span> &lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">commitSizeSumCond&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">commitValidThisLine&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">hasCommitted&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">h&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">h&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isCommit&lt;/span>&lt;span style="color:#56b6c2">})&lt;/span> &lt;span style="color:#7f848e">// (hasCommit || commitValid)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">walkSizeSumCond&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">walkValid&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">donotNeedWalk&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isWalk&lt;/span>&lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">commitSizeSum&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">PriorityMuxDefault&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">commitSizeSumCond&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">commitSizeSumSeq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">walkSizeSum&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">PriorityMuxDefault&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">walkSizeSumCond&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">walkSizeSumSeq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// commitSize就是本次需要提交的指令数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">rab&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRob&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commitSize&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">commitSizeSum&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rab&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRob&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">walkSize&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">walkSizeSum&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rab&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">snpt&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">snpt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rab&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">snpt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">snptEnq&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">snptEnq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">rab&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">diffCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">rab&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">diffCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="robentry">robEntry&lt;/h5>
&lt;p>robEntry的项数还是比较多的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vls&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// some instructions are not allowed to trigger interrupts
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// They have side effects on the states of the processor before they write back
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">interrupt_safe&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fpWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">rfWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">wflags&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">dirtyVs&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">commitType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">CommitType&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ftqIdx&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">FtqPtr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ftqOffset&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PredictWidth&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isRVC&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isVset&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isHls&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">instrSize&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Ceil&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">loadWaitBit&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// for perfEvents
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">eliminatedMove&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// for perfEvents
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// data end
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// trace
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">traceBlockInPipe&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TracePipe&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// status begin
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fflags&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">5.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mmio&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// store will be commited if both sta &amp;amp; std have been writebacked
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">stdWritebacked&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vxsat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">realDestSize&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">MaxUopSize&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">uopNum&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">MaxUopSize&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">commitTrigger&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">needFlush&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// status end
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// debug_begin
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_pc&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">OptionWrapper&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VAddrBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_instr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">OptionWrapper&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">32.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_ldest&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">OptionWrapper&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">LogicRegsWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_pdest&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">OptionWrapper&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_fuType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">OptionWrapper&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// debug_end
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isWritebacked&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">uopNum&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">stdWritebacked&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isUopWritebacked&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">uopNum&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山源代码剖析——指令的译码和派发</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E8%AF%91%E7%A0%81%E5%92%8C%E6%B4%BE%E5%8F%91/</link><pubDate>Tue, 14 Jan 2025 17:19:27 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E8%AF%91%E7%A0%81%E5%92%8C%E6%B4%BE%E5%8F%91/</guid><description>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 375;
flex-basis: 900px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E8%AF%91%E7%A0%81%E5%92%8C%E6%B4%BE%E5%8F%91/image-20250114181936853.png" data-size="1028x274">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E8%AF%91%E7%A0%81%E5%92%8C%E6%B4%BE%E5%8F%91/image-20250114181936853.png"
width="1028"
height="274"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E8%AF%91%E7%A0%81%E5%92%8C%E6%B4%BE%E5%8F%91/image-20250114181936853_hu6670905778379539498.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E8%AF%91%E7%A0%81%E5%92%8C%E6%B4%BE%E5%8F%91/image-20250114181936853_hu6764138659097728431.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>译码阶段是香山CPU流水线后端的第一站，第一个阶段。它的输入来自于前端的指令缓冲器ibuffer ,从Ibuffer读出时由其将来自IFU的指令加预译码信息一起组装在一个CtrlFlow对象中，又由于流水线后端的宽度是6,所有译码阶段的输入就是6个CtrlFlow对象，译码阶段的输出即译码结果去往Rename中，是一排CfCtrl对象，CfCtrl就是CtrlFlow + CtrlSignals, 译码产生的结果就在CtrlSignals中，连同CtrlFlow一起往下游送。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">CfCtrl&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">XSBundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cf&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">CtrlFlow&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ctrl&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">CtrlSignals&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Rename向Dispatch的输出，成为MicroOp,这是对于CtrlFlow的扩充，主要是加上有关物理寄存器映射的信息。Dispatch的输出是MicroOp. Dispatch的输出不包括物理寄存器的内容即指令的源操作数，从物理寄存器组读取源操作数是流水线下游Scheduler的事情 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// Dequeue DecodeWidth insts from Ibuffer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">CtrlFlow&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">XSBundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">instr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">32.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pc&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VAddrBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">foldpc&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">MemPredPCWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">exceptionVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">ExceptionVec&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">trigger&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">TriggerAction&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pd&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PreDecodeInfo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pred_taken&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">crossPageIPFFix&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">storeSetHit&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// inst has been allocated an store set
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">waitForRobIdx&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RobPtr&lt;/span> &lt;span style="color:#7f848e">// store set predicted previous store robIdx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// Load wait is needed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// load inst will not be executed until former store (predicted by mdp) addr calcuated
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">loadWaitBit&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// If (loadWaitBit &amp;amp;&amp;amp; loadWaitStrict), strict load wait is needed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// load inst will not be executed until ALL former store addr calcuated
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">loadWaitStrict&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ssid&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">SSIDWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ftqPtr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">FtqPtr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ftqOffset&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PredictWidth&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 这个和DocodedInst基本是一毛一样的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">CtrlSignals&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">XSBundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_globalID&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">XLEN&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">srcType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">SrcType&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span> &lt;span style="color:#7f848e">// 源操作数的类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">lsrc&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">LogicRegsWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// 源操作数的逻辑寄存器号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ldest&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">LogicRegsWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 目标寄存器的逻辑寄存器号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fuType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// 指令所属大类,funtcion Unit Type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fuOpType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">FuOpType&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">rfWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fpWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vecWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isXSTrap&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">noSpecExec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// wait forward
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">blockBackward&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// block backward
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">flushPipe&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// This inst will flush all the pipe when commit, like exception but can commit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">uopSplitType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UopSplitType&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">selImm&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">SelImm&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">//立即数的类型,有符号，无符号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">imm&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">32.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">//立即数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">commitType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">CommitType&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">//提交结果的类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fpu&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">FPUCtrlSignals&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">uopIdx&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UopIdx&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isMove&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">//是move指令
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vm&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">singleStep&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// This inst will flush all the pipe when it is the oldest inst in ROB,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// then replay from this inst itself
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">replayInst&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">canRobCompress&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 都是信号类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">allSignals&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">srcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">fuOpType&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">rfWen&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">fpWen&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">vecWen&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">isXSTrap&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">noSpecExec&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">blockBackward&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">flushPipe&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">canRobCompress&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">uopSplitType&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">selImm&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">decode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">inst&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">table&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Iterable&lt;/span>&lt;span style="color:#56b6c2">[(&lt;/span>&lt;span style="color:#e5c07b">BitPat&lt;/span>, &lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">BitPat&lt;/span>&lt;span style="color:#56b6c2">])])&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">CtrlSignals&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">decoder&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">freechips&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rocketchip&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rocket&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">DecodeLogic&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">inst&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">XDecode&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">decodeDefault&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">table&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">EspressoMinimizer&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">//实际上是调用了chisel的decoder , 译码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">allSignals&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">decoder&lt;/span> &lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">s&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">commitType&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">decode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bit&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">BitPat&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">CtrlSignals&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">allSignals&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bitPatToUInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">))).&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">s&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isWFI&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">fuType&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">csr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">fuOpType&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">CSROpType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wfi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isSoftPrefetch&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fuType&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">alu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">fuOpType&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">ALUOpType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">or&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">selImm&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">SelImm&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">IMM_I&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">ldest&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">needWriteRf&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rfWen&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">ldest&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">fpWen&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">vecWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isHyperInst&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fuType&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ldu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">LSUOpType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isHlv&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">fuOpType&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">fuType&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">stu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">LSUOpType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isHsv&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">fuOpType&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">DecodedInst&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">XSBundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">numSrc&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">numSrc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// passed from StaticInst
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">instr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">32.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pc&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VAddrBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">foldpc&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">MemPredPCWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">exceptionVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">ExceptionVec&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">trigger&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">TriggerAction&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">preDecodeInfo&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PreDecodeInfo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pred_taken&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">crossPageIPFFix&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ftqPtr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">FtqPtr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ftqOffset&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PredictWidth&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// decoded
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">srcType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numSrc&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">SrcType&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">lsrc&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numSrc&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">LogicRegsWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ldest&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">LogicRegsWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fuType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fuOpType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">FuOpType&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">rfWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fpWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vecWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">v0Wen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vlWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isXSTrap&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">waitForward&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// no speculate execution
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">blockBackward&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">flushPipe&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// This inst will flush all the pipe when commit, like exception but can commit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">canRobCompress&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">selImm&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">SelImm&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">imm&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">ImmUnion&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">maxLen&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fpu&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">FPUCtrlSignals&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vpu&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">VPUCtrlSignals&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vlsInstr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">wfflags&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isMove&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">uopIdx&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UopIdx&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">uopSplitType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UopSplitType&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isVset&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">firstUop&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">lastUop&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">numUops&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">MaxUopSize&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// rob need this
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">numWB&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">MaxUopSize&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// rob need this
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">commitType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">CommitType&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// Todo: remove it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">needFrm&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">NeedFrmBundle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_fuType&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">OptionWrapper&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">allSignals&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">srcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">fuOpType&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">rfWen&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">fpWen&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">vecWen&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">isXSTrap&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">waitForward&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">blockBackward&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">flushPipe&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">canRobCompress&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">uopSplitType&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">selImm&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">decode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">inst&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">table&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Iterable&lt;/span>&lt;span style="color:#56b6c2">[(&lt;/span>&lt;span style="color:#e5c07b">BitPat&lt;/span>, &lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">BitPat&lt;/span>&lt;span style="color:#56b6c2">])])&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">DecodedInst&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 使用listLookup去decode的，竟然不是用decode 去 decode ,返回值是一个Seq[Uint]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">decoder&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">ListLookup&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">inst&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">XDecode&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">decodeDefault&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bitPatToUInt&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">table&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pat&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pats&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pat&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pats&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bitPatToUInt&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">}.&lt;/span>&lt;span style="color:#e06c75">toArray&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">allSignals&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">decoder&lt;/span> &lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">s&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">debug_fuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isSoftPrefetch&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fuType&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">alu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">fuOpType&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">ALUOpType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">or&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">selImm&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">SelImm&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">IMM_I&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">ldest&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">connectStaticInst&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">source&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">StaticInst&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Unit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">name&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">data&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">elements&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">source&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">elements&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">contains&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">name&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">source&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">elements&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">name&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="decode">decode&lt;/h2>
&lt;h3 id="decodestage-module">DecodeStage Module&lt;/h3>
&lt;p>DecodeStage module是负责把输入的inst 通过 decode转化为 ctrlflow的，之后就会发送给Rename ,具体代码还是比较清楚的 ，主要只是负责转发的&lt;/p>
&lt;h3 id="decodeunit">DecodeUnit&lt;/h3>
&lt;p>现在应该是不用ctrlFlow这一个数据结构了，换成了StaticInst&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">DecodeUnitIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">XSBundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Bundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ctrlFlow&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">StaticInst&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vtype&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">VType&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vstart&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vl&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// val vconfig = Input(UInt(XLEN.W))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">deq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DecodeUnitDeqIO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">csrCtrl&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">CustomCSRCtrlIO&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fromCSR&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">CSRToDecode&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">SRL&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">XSDecode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">SrcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reg&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">SrcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reg&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">SrcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">alu&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">ALUOpType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">srl&lt;/span> &lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">SelImm&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">X&lt;/span> &lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">xWen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">T&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">canRobCompress&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">T&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到译码的表包括&lt;/p>
&lt;p>SrcType:pc, imm, reg 等，指源寄存器需要哪里的数据，&lt;/p>
&lt;p>FuType : 运算的类型 ， ldu,stu,alu，规定了指令的类型&lt;/p>
&lt;p>ALUOpType or LSUOpType or .. ：这个根据FuType来分配的，实际上和指令的name是一样的&lt;/p>
&lt;p>SelImm:立即数的种类，比方说用于存储类指令，用于branch指令，用于lui,auipc指令，通过这个来解码立即数&lt;/p>
&lt;p>xWen,fwen,vwen : 是否写入寄存器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">XSDecode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">src1&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BitPat&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">src2&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BitPat&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">src3&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BitPat&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fu&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">FuType.OHType&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">fuOp&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BitPat&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">selImm&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BitPat&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">uopSplitType&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BitPat&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">UopSplitType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">X&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">xWen&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fWen&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">vWen&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mWen&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">xsTrap&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">noSpec&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">blockBack&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">flushPipe&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">canRobCompress&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">XSDecodeBase&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">generate&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">BitPat&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">List&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">src1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">src2&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">src3&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">BitPat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">fu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">num&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span> &lt;span style="color:#e06c75">fuOp&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">xWen&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">fWen&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">vWen&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">mWen&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">xsTrap&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">noSpec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">blockBack&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">flushPipe&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">canRobCompress&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">uopSplitType&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">selImm&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="寄存器映射">寄存器映射&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 185;
flex-basis: 444px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E8%AF%91%E7%A0%81%E5%92%8C%E6%B4%BE%E5%8F%91/image-20250114231810586.png" data-size="1168x631">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E8%AF%91%E7%A0%81%E5%92%8C%E6%B4%BE%E5%8F%91/image-20250114231810586.png"
width="1168"
height="631"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E8%AF%91%E7%A0%81%E5%92%8C%E6%B4%BE%E5%8F%91/image-20250114231810586_hu8796026047750935401.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E6%8C%87%E4%BB%A4%E7%9A%84%E8%AF%91%E7%A0%81%E5%92%8C%E6%B4%BE%E5%8F%91/image-20250114231810586_hu1632732958453808693.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>寄存器映射表RAT , 维护逻辑寄存器和物理寄存器之间的映射关系&lt;/p>
&lt;p>细节 ：&lt;/p>
&lt;p>每当指令流中有指令用到某个目标寄存器dest的时候，不管当前是否已经有映射了，总是要从FreeList中分配一个物理寄存器，比方说逻辑寄存器3建立物理寄存器33的映射， 此时需要在指令的MicroOp中记录下pdest = 33,&lt;/p>
&lt;p>但是在将新的映射写入3的时候，需要将原来老的映射值记录在MicroOp的old_pdest中，&lt;/p>
&lt;p>每当指令流中有指令要用所述逻辑寄存器，需要查询映射表获取当前映射，并将映射值写入本指令MiroOp的psrc中。 并且在创建该指令的ExuInput中企图从物理寄存器中读取内容，要是内容未到位就在ReservationStation中等待。&lt;/p>
&lt;p>一旦物理寄存器33为pdest的指令执行完成了，就把结果写回到33号物理寄存器，&lt;/p>
&lt;p>这条指令在完成回写，要冲流水线退休前夕，需要将记载的old_pdest释放掉，重置freeList，（为什么在这个时候释放，能早一点吗？原因应该是异常或者分支指令）&lt;/p>
&lt;p>在寄存器rename的时候还是顺序的&lt;/p>
&lt;h3 id="寄存器重映射表">寄存器重映射表&lt;/h3>
&lt;h3 id="renametablewrapper">RenameTableWrapper&lt;/h3>
&lt;p>5个RAT,对应定点，浮点，向量，&lt;/p>
&lt;p>然后就是建立访问端口和RenameTable进行互联，每一个rat需要一对读写端口 ， dubug 和diff都是作为debug端口生成的 ，然后还有一个端口是 old_pdest,应该是在替换的时候输出的&lt;/p>
&lt;p>rabcommits会代表一条指令已经commit了，此时应该去把相应的rat映射取消&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">io&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">IO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Bundle&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">redirect&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">rabCommits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RabCommitIO&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">diffCommits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DiffCommitIO&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">intReadPorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RatReadPort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">IntLogicRegs&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">intRenamePorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RatWritePort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">IntLogicRegs&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fpReadPorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RatReadPort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">FpLogicRegs&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fpRenamePorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RatWritePort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">FpLogicRegs&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vecReadPorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numVecRatPorts&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RatReadPort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecLogicRegs&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vecRenamePorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RatWritePort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecLogicRegs&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">v0ReadPorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RatReadPort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">V0LogicRegs&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">v0RenamePorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RatWritePort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">V0LogicRegs&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vlReadPorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RatReadPort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VlLogicRegs&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vlRenamePorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RatWritePort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VlLogicRegs&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">int_old_pdest&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RabCommitWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fp_old_pdest&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RabCommitWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vec_old_pdest&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RabCommitWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">v0_old_pdest&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RabCommitWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vl_old_pdest&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RabCommitWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">int_need_free&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RabCommitWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">snpt&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">SnapshotPort&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// for debug printing
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_int_rat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">32&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_fp_rat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">32&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_vec_rat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">31&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_v0_rat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_vl_rat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">diff_int_rat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">32&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">diff_fp_rat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">32&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">diff_vec_rat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">31&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">diff_v0_rat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">diff_vl_rat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">intRat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Module&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RenameTable&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Reg_I&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fpRat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Module&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RenameTable&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Reg_F&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vecRat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Module&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RenameTable&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Reg_V&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">v0Rat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Module&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RenameTable&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Reg_V0&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">vlRat&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Module&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RenameTable&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Reg_Vl&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_int_rat&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">intRat&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_rdata&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">diff_int_rat&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">intRat&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">diff_rdata&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">intRat&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">readPorts&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">intReadPorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">flatten&lt;/span> &lt;span style="color:#7f848e">// flatten to 1D array ， RenameWidth * 2 read ports, 两个是因为两个源
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">intRat&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">intRat&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">snpt&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">snpt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">int_old_pdest&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">intRat&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">old_pdest&lt;/span> &lt;span style="color:#7f848e">// rabcommitwidth
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">int_need_free&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">intRat&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">need_free&lt;/span> &lt;span style="color:#7f848e">// rabcommitwidth
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// rob可能处于commit 和 walk状态， commit代表要确认， walk代表要从转向中恢复（异常，分支）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">intDestValid&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rfWen&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 代表此时rab的指令需要写回到寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">arch&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">intRat&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">archWritePorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// rabcommitwidth ,架构寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">arch&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isCommit&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commitValid&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">intDestValid&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">arch&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">ldest&lt;/span> &lt;span style="color:#7f848e">// 逻辑寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">arch&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span> &lt;span style="color:#7f848e">// 物理寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">XSError&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">arch&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">arch&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">arch&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;pdest for $0 should be 0\n&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">spec&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">intRat&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">specWritePorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// 在指令walk的时候写入spec映射表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">spec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isWalk&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">walkValid&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">intDestValid&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">spec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">ldest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">spec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">XSError&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">spec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">spec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">spec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;pdest for $0 should be 0\n&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">spec&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">rename&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">intRat&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">specWritePorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">intRenamePorts&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// 写入rename表, spec表是一个草稿，寄存器的映射和建立都是通过spec_table的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">spec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">spec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">rename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">spec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">rename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debugEn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">diff&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">intRat&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">diffWritePorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">diff&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">diffCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isCommit&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">diffCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commitValid&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">diffCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">rfWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">diff&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">diffCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">ldest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">diff&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">diffCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="renametable">RenameTable&lt;/h3>
&lt;p>就是维护了两张rat,其中一张在rename和commit_walk的进行赋值，arch_table只在完成提交的时候进行赋值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">spec_table&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rename_table_init&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">spec_table_next&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">WireInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">spec_table&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// arch state rename table
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">arch_table&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rename_table_init&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">arch_table_next&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">WireDefault&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">arch_table&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// old_pdest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">old_pdest&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RabCommitWidth&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">need_free&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RabCommitWidth&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// For better timing, we optimize reading and writing to RenameTable as follows:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// (1) Writing at T0 will be actually processed at T1.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// (2) Reading is synchronous now.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// (3) RAddr at T0 will be used to access the table and get data at T0.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// (4) WData at T0 is bypassed to RData at T1.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 不论读写其实都会先打一拍
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">t1_redirect&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">GatedValidRegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// io.redirect是代表指令需要被取消
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">t1_raddr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">readPorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">p&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">RegEnable&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">hold&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// 如果不是hold话就把addr打一拍，反之保持addr不变
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">t1_rdata_use_t1_raddr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">t1_raddr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">spec_table&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// 读取spec_table,和addr是同一拍
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">t1_wSpec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">specWritePorts&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">specWritePorts&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// 写打了一拍 ， 向量长度为RabCommitWidth
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">t1_snpt&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">snpt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">snpt&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">snapshots&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">SnapshotGenerator&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">spec_table&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">t1_snpt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">snptEnq&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">t1_snpt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">snptDeq&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">t1_redirect&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">t1_snpt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">flushVec&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// WRITE: when instruction commits or walking
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// t1_wSpec_addr 保存着将要写入的addr
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 串行？ 并行 ?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">t1_wSpec_addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">t1_wSpec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UIntToOH&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// 每一个提交的指令都会去判断wen, 然后会把地址(逻辑寄存器)转换为onehot
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">spec_table_next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// 我比较好奇，难道不是直接根据addr去写入data更快吗，为什么要去遍历所有的addr,一个是flush不好flush，还有一个就是waw,如果多条指令有相同的逻辑寄存器的话，应该是写入最后那一条
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">matchVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">t1_wSpec_addr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">//单独判断onehot的那一位是不是1,这个i应该就是逻辑寄存器的编号,对应的话w(i)就是1, 这样是为了应对多条commit可能会写入同一个逻辑寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">wMatch&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">ParallelPriorityMux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">matchVec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">t1_wSpec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// ParallelPriorityMux应该是通过二分加速的PriorityMux,优先选左边的1, 应该是0先写入的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// When there&amp;#39;s a flush, we use arch_table to update spec_table.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">next&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">t1_redirect&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">t1_snpt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">useSnpt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">snapshots&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">t1_snpt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">snptSelect&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">arch_table&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span> &lt;span style="color:#7f848e">// flush的话使用arch_table去更新spec_table
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">matchVec&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">wMatch&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">spec_table&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// 写入相应的spec_table
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">spec_table&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">spec_table_next&lt;/span> &lt;span style="color:#7f848e">// 更新寄存器的内容
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// READ: decode-rename stage,如果同时发起读写,且读写地址一致,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">readPorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">t0_bypass&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">specWritePorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">hold&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">t1_raddr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// bypass
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">t1_bypass&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">t0_bypass&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">t0_bypass&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// t0_bypass打了一拍,这一拍开始写
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">bypass_data&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">ParallelPriorityMux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">t1_bypass&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">t1_wSpec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 直接将要写入的数据传递给读，要不然实际上r.data是有错误的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">t1_bypass&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">bypass_data&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">t1_rdata_use_t1_raddr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// arch table, 这里就是正常的通过w.addr进行写了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">archWritePorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// rabcommitwidth
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">arch_table_next&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">arch_mask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">old_pdest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#7f848e">// 对应的是commit的old_pdest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">MuxCase&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">arch_table&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">arch_mask&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#7f848e">//reverse是为了保证优先级高的在左边, arch_table(w.addr) &amp;amp; arch_mask 指的是没写入前对应的物理寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">archWritePorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">arch_mask&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// 如果有多个commit写入同一个逻辑寄存器，那么此时old_pdest应该是前面那一写入的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">arch_table&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">arch_table_next&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rename">Rename&lt;/h3>
&lt;p>Rename的输入来自于DecodeInst , 输出给Dispatch 的就是 DynInst&lt;/p>
&lt;p>然后还包括rename table交互的接口，&lt;/p>
&lt;p>对于输入的每个Staticinst都要创建一个microop,作为Rename的输出，Micro最重要的是源寄存器和目标寄存器的物理寄存器号。源寄存器src的物理寄存器号从rat读取当前的映射，目标寄存器dest需要从FreeList分配，并在RenameTable中建立新的映射，目标寄存器号释放要由Rob决定。&lt;/p>
&lt;p>其中还涉及到一些细节方面的问题，比方说需要根据rob的iswalk来决定一些mux,&lt;/p>
&lt;p>还有bypass ，主要针对同一周期进行重命名的指令，本身源寄存器获取都从rat获取，但有些是需要bypass从前面指令的目的寄存器获取的&lt;/p>
&lt;p>还有一些优化，比方说压缩指令，融合指令，move等等&lt;/p>
&lt;p>还有freeList的stall信号，后面再看它用来干什么&lt;/p>
&lt;p>无论是commit还是walk都会引起物理寄存器号的释放，提交意味着原先的old_pdest已经完全没有用了，因为后续依赖于这个逻辑寄存器的指令也会使用新的pdest,前面的指令也全部执行完成了，那就可以释放了，walk说明这一条指令要被冲刷了，那本条指令投入使用的pdest也可以释放了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// decide if given instruction needs allocating a new physical register (CfCtrl: from decode; RobCommitInfo: from rob)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">needDestReg&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">DecodedInst&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">reg_t&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">RegType&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">reg_t&lt;/span> &lt;span style="color:#c678dd">match&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_I&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rfWen&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ldest&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// 指令的逻辑目标寄存器不是r0,需要提供映射
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_F&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_V&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vecWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_V0&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">v0Wen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_Vl&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vlWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">needDestRegCommit&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">RabCommitInfo&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">reg_t&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">RegType&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">reg_t&lt;/span> &lt;span style="color:#c678dd">match&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_I&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rfWen&lt;/span> &lt;span style="color:#7f848e">// 需要写入寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_F&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_V&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vecWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_V0&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">v0Wen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_Vl&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vlWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">needDestRegWalk&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">RabCommitInfo&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">reg_t&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">RegType&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">reg_t&lt;/span> &lt;span style="color:#c678dd">match&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_I&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rfWen&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ldest&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// 需要写入寄存器，且写入的不是0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_F&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_V&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vecWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_V0&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">v0Wen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">Reg_Vl&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vlWen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// connect [redirect + walk] ports for fp &amp;amp; vec &amp;amp; int free list
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">fpFreeList&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">vecFreeList&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">intFreeList&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">v0FreeList&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">vlFreeList&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e06c75">fl&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">walk&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isWalk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// only when all free list and dispatch1 has enough space can we do allocation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// when isWalk, freelist can definitely allocate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 这是可以从FreeList分配使用物理寄存器的条件,必须要所有的FreeList都可以分配,或者是walk状态
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">intFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">doAllocate&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">fpFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">vecFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">v0FreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">vlFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">dispatchCanAcc&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isWalk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fpFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">doAllocate&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">intFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">vecFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">v0FreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">vlFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">dispatchCanAcc&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isWalk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">vecFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">doAllocate&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">intFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">fpFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">v0FreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">vlFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">dispatchCanAcc&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isWalk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">v0FreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">doAllocate&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">intFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">fpFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">vecFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">vlFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">dispatchCanAcc&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isWalk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">vlFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">doAllocate&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">intFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">fpFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">vecFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">v0FreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">dispatchCanAcc&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isWalk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// dispatch1 ready ++ float point free list ready ++ int free list ready ++ vec free list ready ++ not walk
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 这是可以向指令分发阶段发送MicorOp的条件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">canOut&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">dispatchCanAcc&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">fpFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">intFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">vecFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">v0FreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">vlFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isWalk&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 后面应该有旁路相关的,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * How to set psrc:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * - bypass the pdest to psrc if previous instructions write to the same ldest as lsrc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * - default: psrc from RAT
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * How to set pdest:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * - Mux(isMove, psrc, pdest_from_freelist).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * The critical path of rename lies here:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * When move elimination is enabled, we need to update the rat with psrc.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * However, psrc maybe comes from previous instructions&amp;#39; pdest, which comes from freelist.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * If we expand these logic for pdest(N):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * pdest(N) = Mux(isMove(N), psrc(N), freelist_out(N))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * = Mux(isMove(N), Mux(bypass(N, N - 1), pdest(N - 1),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * Mux(bypass(N, N - 2), pdest(N - 2),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * Mux(bypass(N, 0), pdest(0),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * rat_out(N))...)),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * freelist_out(N))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// a simple functional model for now
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">isMove&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">psrc&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 如果是move指令直接就是psrc,要不然都是从freeList分配来的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// psrc(n) + pdest(1) ,用来检测本指令的寄存器与同一批的其他指令之间是否可以旁路
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">bypassCond&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">MixedVec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">]]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numRegSrc&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">MixedVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tabulate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">srcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">numSrc&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pdestLoc&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">srcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#7f848e">// 2 vector src: v0, vl&amp;amp;vtype
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">println&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">s&amp;#34;[Rename] idx of pdest in bypassCond &lt;/span>&lt;span style="color:#98c379">$pdestLoc&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">v0Cond&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">srcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">SrcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">SrcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">v0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">+&lt;/span> &lt;span style="color:#e5c07b">needV0Dest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">val&lt;/span> &lt;span style="color:#e5c07b">vlCond&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">srcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">s&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">SrcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">+&lt;/span> &lt;span style="color:#e5c07b">needVlDest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">val&lt;/span> &lt;span style="color:#e5c07b">vecCond&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">srcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">SrcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">+&lt;/span> &lt;span style="color:#e5c07b">needVecDest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">val&lt;/span> &lt;span style="color:#e5c07b">fpCond&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">srcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">SrcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">+&lt;/span> &lt;span style="color:#e5c07b">needFpDest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">val&lt;/span> &lt;span style="color:#e5c07b">intCond&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">srcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">SrcType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">xp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">+&lt;/span> &lt;span style="color:#e5c07b">needIntDest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 源和目的寄存器都是需要寄存器的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">target&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">lsrc&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">+&lt;/span> &lt;span style="color:#e5c07b">io.in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#e5c07b">.bits.ldest&lt;/span> &lt;span style="color:#7f848e">// (n 源寄存器 + 1 目标寄存器)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">((((((&lt;/span>&lt;span style="color:#e06c75">cond1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">condV0&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">condVl&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span> &lt;span style="color:#e06c75">cond2&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">cond3&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">t&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">vecCond&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">v0Cond&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">vlCond&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">fpCond&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">intCond&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">target&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">destToSrc&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">indexMatch&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ldest&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">t&lt;/span> &lt;span style="color:#7f848e">// 将第i条指令的(n 源寄存器，1目的寄存器）和前i条指令的目的寄存器进行比较,返回的是第j条指令的第t个寄存器与前i条指令的目的寄存器是否相等
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">writeMatch&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">cond3&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">needIntDest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">cond2&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">needFpDest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">cond1&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">needVecDest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 返回的是一个Seq,代表第i条指令的第j个寄存器是否需要寄存器 &amp;amp;&amp;amp; 前面i条指令是否有目的寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">v0vlMatch&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">condV0&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">needV0Dest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">condVl&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">needVlDest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">indexMatch&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">writeMatch&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">v0vlMatch&lt;/span> &lt;span style="color:#7f848e">// 返回的是一个（）， 代表第i条指令的第t个寄存器与前i条指令的目的寄存器是否相等,且确实有目的寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">bypassCond&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">destToSrc&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span> &lt;span style="color:#7f848e">// 统计的就是第i条指令第j个寄存器和前i-1条指令的目的寄存器的对应情况
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 输出经过旁路之后的寄存器号,如果是源相等的化应该是把最后一条目的寄存器赋值给源(RAW)，如果是目的寄存器和前面的目的寄存器相等的话(WAW)，其实没啥,犯贱
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// foldLeft从左向右遍历,next是元素，在这里是（pdest,bypassCond）,z是当前的累计值,在每一次遍历后z会被新的值更新
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">psrc&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bypassCond&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asBools&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">foldLeft&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">psrc&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">z&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_2&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">z&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">psrc&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bypassCond&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asBools&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">foldLeft&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">psrc&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">z&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_2&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">z&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">psrc&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bypassCond&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asBools&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">foldLeft&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">psrc&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">z&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_2&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">z&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">psrc&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bypassCond&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asBools&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">foldLeft&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">psrc&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">z&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_2&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">z&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">psrc&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bypassCond&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asBools&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">foldLeft&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">psrc&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">z&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_2&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">z&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">isMove&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">psrc&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * Instructions commit: update freelist and rename table
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e5c07b">RabCommitWidth&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">commitValid&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isCommit&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commitValid&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">walkValid&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isWalk&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">walkValid&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// I. RAT Update
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// When redirect happens (mis-prediction), don&amp;#39;t update the rename table
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">intRenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">intSpecWen&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">intRenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">ldest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Ceil&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">IntLogicRegs&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">intRenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pdest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpRenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">fpSpecWen&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpRenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">ldest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Ceil&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">FpLogicRegs&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpRenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">fpFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">allocatePhyReg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vecRenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">vecSpecWen&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vecRenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">ldest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Ceil&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecLogicRegs&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vecRenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">vecFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">allocatePhyReg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">v0RenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">v0SpecWen&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">v0RenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">ldest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Ceil&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">V0LogicRegs&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">v0RenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">v0FreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">allocatePhyReg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vlRenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">vlSpecWen&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vlRenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">uops&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">ldest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Ceil&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VlLogicRegs&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vlRenamePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">vlFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">allocatePhyReg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// II. Free List Update
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">intFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freeReq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">int_need_free&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">intFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freePhyReg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">RegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">int_old_pdest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fpFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freeReq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">GatedValidRegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">commitValid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">needDestRegCommit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Reg_F&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fpFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freePhyReg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp_old_pdest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">vecFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freeReq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">GatedValidRegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">commitValid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">needDestRegCommit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Reg_V&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">vecFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freePhyReg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vec_old_pdest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">v0FreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freeReq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">GatedValidRegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">commitValid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">needDestRegCommit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Reg_V0&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">v0FreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freePhyReg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">v0_old_pdest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">vlFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freeReq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">GatedValidRegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">commitValid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">needDestRegCommit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Reg_Vl&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rabCommits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">vlFreeList&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freePhyReg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">vl_old_pdest&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="compressunit">compressunit&lt;/h2>
&lt;p>这应该是处理压缩指令的&lt;/p>
&lt;h3 id="mefreelist-和-stdfreelist">MEFreeList 和 StdFreeList&lt;/h3>
&lt;p>FreeList 记录了所有的空闲寄存器状态，其大小是可以通过类参数 &lt;code>size&lt;/code> 配置的。FreeList 本质上是一个队列，由入队指针、出队指针和队列存储组成。&lt;/p>
&lt;p>初始化时，FreeList 中包含所有可用的物理寄存器。在我们的设计中，初始时逻辑寄存器 &lt;code>i&lt;/code> 会被映射至物理寄存器 &lt;code>i&lt;/code>，因此 FreeList 在初始状态下包含 32-191 共 160 个空闲物理寄存器号。重命名时，FreeList 会给出至多 &lt;code>RenameWidth&lt;/code> 个空闲物理寄存器号供使用。&lt;strong>物理寄存器被释放时（ROB 提交指令或者回滚），FreeList 每一拍至多可以进入 &lt;code>CommitWidth&lt;/code> 个空闲物理寄存器号。&lt;/strong>&lt;/p>
&lt;p>**在香山处理器的设计中，针对定点物理寄存器支持多次引用，并通过引用计数表（RefTable）记录每一个物理寄存器被引用的次数。**通过引用计数，香山支持将多个逻辑寄存器映射至同一个物理寄存器，并支持对 Move 指令的消除优化（Move Elimination）。在这种情况下，空闲的物理寄存器数量理论上最高可达到物理寄存器总数 - 1。因此，在香山处理器中，定点 FreeList 大小与物理寄存器堆大小相同（默认为 192），浮点 FreeList 大小是物理寄存器堆数量 - 32（默认为 160）。&lt;/p>
&lt;p>目前，FreeList 在香山中共有两种实现，分别在不存在 / 存在引用计数功能的情况下使用，对应 &lt;code>StdFreeList&lt;/code> 和 &lt;code>MEFreeList&lt;/code>。对于不存在引用计数的情况，当发生 ROB 回滚时，FreeList 中释放的空闲寄存器一定是前面恰好被分配出的那一些，且与回滚指令中需要分配新物理寄存器的数量相同。在种情况下，FreeList 的存储不需要被重复写入，只需要将出队指针往前回滚即可。对于存在引用计数的情况，由于重复引用情况的存在（不需要通过 FreeList 分配，而是增加一个物理寄存器的引用计数），回滚的物理寄存器数量与 FreeList 的释放数量并不一定相同。在这种情况下，FreeList 需要维护几个写端口，方便通过引用计数机制来维护实际释放的物理寄存器。&lt;/p>
&lt;h4 id="mefreelist">MEFreeList&lt;/h4>
&lt;p>实际上是一个环形队列，排在队列的是空闲物理寄存器的号码 。 需要分配使用物理寄存器的时候就从头部摘除，Rob交付执行结果的时候进入队列的尾部。在正常情况下，指令成块从译码器出来进入分发模块，不管分发到哪个执行单元，都要在分发之前获取目标寄存器的映射 ， 所以空闲物理寄存器号的分配是成块的，俺指令的先后顺序不会被打乱。即使指令的执行乱序，但执行的结果要在ROB中恢复原来的排序，最后想寄存器组提交和映射物理寄存器释放也是成块的。所以freelist中两个指针的推进都是成块的&lt;/p>
&lt;p>是基于BseFreeList创建的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">MEFreeList&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">BaseFreeList&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">HasPerfEvents&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 用Reg建立一个寄存器堆
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">freeList&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// originally {1, 2, ..., size - 1} are free. Register 0-31 are mapped to x0.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tabulate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">+&lt;/span> 0&lt;span style="color:#e5c07b">.U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PhyRegIdxWidth.W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">tailPtr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">FreeListPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// 循环队列尾指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">doWalkRename&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">walk&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">doAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">doNormalRename&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">doAllocate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">doRename&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">doWalkRename&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">doNormalRename&lt;/span> &lt;span style="color:#7f848e">//来自Rename模块的请求
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">doCommit&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isCommit&lt;/span> &lt;span style="color:#7f848e">// Rob处于提交阶段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * Allocation: from freelist (same as StdFreelist)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">phyRegCandidates&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">headPtrOHVec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sel&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sel&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">freeList&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// 根据headPtrOHVec,选择空闲的物理寄存器号, headPtrOHVec 是 [1000,100,10,0] , 然后就通过这个选择 free[0],free[1]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// 分配空闲寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">//intFreeList.io.allocateReq(i) := needIntDest(i) &amp;amp;&amp;amp; !isMove(i) , allocateReq是这样定义的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">//intFreeList.io.walkReq(i) := walkNeedIntDest(i) &amp;amp;&amp;amp; !walkIsMove(i)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// enqueue instr, is move elimination
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">allocatePhyReg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">phyRegCandidates&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">allocateReq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// 这种方法有点意思的，我现在前i个分配了x个，如果我第i+1需要分配，那显然第x+1个就是它的，反正不管,就它可以实现字增和连续分配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 头指针增加，代表物理寄存器被分配，尾指针增加，代表物理寄存器被释放,头尾之间的代表被分配的了的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// update arch head pointer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">archAlloc&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commitValid&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">commit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">info&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// 这里是构成了需要free list的Vec
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rfWen&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isMove&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">info&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ldest&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">numArchAllocate&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">archAlloc&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">archHeadPtrNew&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">archHeadPtr&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">numArchAllocate&lt;/span> &lt;span style="color:#7f848e">//头指针向前推进
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">archHeadPtrNext&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">doCommit&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">archHeadPtrNew&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">archHeadPtr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 是否真的提交
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">archHeadPtr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">archHeadPtrNext&lt;/span> &lt;span style="color:#7f848e">//改变头指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// update head pointer, 比较好奇，它不能直接把原始版本的转换成独热码版本的吗
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">numAllocate&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">walk&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">walkReq&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">allocateReq&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// 一种是walk,一种是rename,申请和释放
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">headPtrNew&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">lastCycleRedirect&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">redirectedHeadPtr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">numAllocate&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 一个是archptr + walk_num,一个是headptr + allo_num
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">headPtrOHNew&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">lastCycleRedirect&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">redirectedHeadPtrOH&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtrOHVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numAllocate&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">headPtrNext&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">doRename&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtrNew&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 如果需要请求就换
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">headPtrOHNext&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">doRename&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtrOHNew&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtrOH&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 相对应的OH版本
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">headPtrNext&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">headPtrOH&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">headPtrOHNext&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * Deallocation: when refCounter becomes zero, the register can be released to freelist
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e5c07b">RabCommitWidth&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// rob的commit会导致物理寄存器的释放
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freeReq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">//一个一个空位的添加过去
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">freePtr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">tailPtr&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freeReq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">freeList&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">freePtr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">value&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freePhyReg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// update tail pointer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">tailPtrNext&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">tailPtr&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">freeReq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tailPtr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">tailPtrNext&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 统计空闲寄存器的数量,tailPtrNext是释放过后的尾指针，headPtr是分配前的头指针, tailPtrNext一开始是最大的，所以它再往前已经flag反向了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">freeRegCnt&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">doWalkRename&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">lastCycleRedirect&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">distanceBetween&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tailPtrNext&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">walkReq&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">doNormalRename&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">distanceBetween&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tailPtrNext&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">allocateReq&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">distanceBetween&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tailPtrNext&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">freeRegCntReg&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">freeRegCnt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAllocate&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">freeRegCntReg&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e5c07b">RenameWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">//能够分配的条件是空闲寄存器的数量大于等于重命名宽度
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Rename的整个过程没有用到寄存器，不构成流水线的一个阶段&lt;/p>
&lt;h4 id="stdfreelist">StdFreeList&lt;/h4>
&lt;h2 id="物理寄存器组">物理寄存器组&lt;/h2>
&lt;p>物理寄存器组在ExuBlock的指令调度器scheduler.指令在进入scheduler时根据源寄存器当时的映射知道了它的操作数在哪一个或哪两个物理寄存器中，如果物理寄存器的数据尚未到达就会在Scheduler的某一个ReservationStation内去等待。而建立了具体映射的指令则会在取得执行结果后将结果写入相应的物理寄存器，并试图唤醒ReservationStation内正在等待这个结果的指令。一旦这条指令的源操作数都已经到位即被唤醒而可以被调度。&lt;/p>
&lt;p>这里应该是做了一些优化的，写法都比较奇特&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">RfReadPort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dataWidth&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">addrWidth&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">Bundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addrWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dataWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">RfWritePort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dataWidth&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">addrWidth&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">Bundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addrWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dataWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Regfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">numPregs&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">numReadPorts&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">numWritePorts&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hasZero&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">len&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">bankNum&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">isVlRegfile&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">Module&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">io&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">IO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Bundle&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">readPorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numReadPorts&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RfReadPort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">len&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">writePorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numWritePorts&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RfWritePort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">len&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">debug_rports&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">65&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RfReadPort&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">len&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">desiredName&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">println&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">name&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#98c379">&amp;#34;: size:&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">numPregs&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#98c379">&amp;#34; read: &amp;#34;&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">numReadPorts&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#98c379">&amp;#34; write: &amp;#34;&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">numWritePorts&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mem_0&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">isVlRegfile&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">len&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">len&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mem&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numPregs&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">len&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// 寄存器组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">memForRead&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numPregs&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">len&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// memForRead是mem的一个副本，用于读取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">memForRead&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">m&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">m&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">mem_0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">m&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">mem&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">contains&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bankNum&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#98c379">&amp;#34;bankNum must be 1 or 2 or 4&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 寄存器分bank了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">readPorts&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bankNum&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">memForRead&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// 打了一拍
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">banks&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">bankNum&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// filter用来筛选集合中的元素， 0 bankNum 2*bankNum 这些归于一个bank
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">memForRead&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">m&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">index&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#e06c75">bankNum&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">}.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 通过(bankWidth -1 ,0)选择bank
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 比较好奇为什么用前bankWidth位来选择bank，如果用后bankWidth位来选择bank，那不是连续的了吗,我能想到一点好处,连续的寄存器可能会被同时读取，那分bank就能直接去并行读取了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 比较有意思的点是所有的集合其实都会通过VecInit转化为Vec类型的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">bankWidth&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">bankNum&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getWidth&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 选择bank
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">hitBankWire&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">bankNum&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bankWidth&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">})&lt;/span> &lt;span style="color:#7f848e">// 独热码,正常来说hitBankWire只有一个是拉高的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">hitBankReg&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bankNum&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hitBankReg&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">hitBankWire&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">banksRdata&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bankNum&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">len&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">bankNum&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 通过后面的地址去读相应的寄存器,我比较奇怪的一点是不能直接写banks(i)(r.addr)吗，有什么区别吗
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">banksRdata&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">RegEnable&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">banks&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))(&lt;/span>&lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getWidth&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">bankWidth&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span> &lt;span style="color:#e06c75">hitBankWire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 通过hitBankReg选择有效数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">hitBankReg&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">banksRdata&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">writePorts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">writePorts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">writePorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">indices&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">writePorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">//就是不检查最后一个
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// drop(i+1)，从第i+1端口开始的所有端口,有一个相同的hasSameWrite就会被触发
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">hasSameWrite&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">writePorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">drop&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">writePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">writePorts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">reduce&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 直接断言了，说明这样是不行的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">assert&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">hasSameWrite&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;RegFile two or more writePorts write same addr&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 它是自己写了一个sram,没有使用chisel的sram
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 本来mem(w.addr) = wData就可以了的，这样写有什么好处吗?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">mem&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">indices&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">hasZero&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mem_0&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">wenOH&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">writePorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">wData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">wenOH&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">writePorts&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">wenOH&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">mem_0&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">wData&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">mem&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">wData&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rport&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">debug_rports&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rport&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">memForRead&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rport&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对物理寄存器的写入是来自于调度器，为什么不是通过ROB,在ROB排好顺序之后在按照程序编定的次序写入物理寄存器，这样是能够满足程序的正确次序。但是，实际上在在指令被执行之后，结果已经出来的时候就可以唤醒ReservationStation中正在等待结果的指令。从指令调度执行的角度，需要确保同一集合中的指令不会出现混淆，但是不同时间点的不同映射已经解决了这个问题。所以说，指令执行单元的回写需要进入ROB,但是真正的执行结果，可以超近路直接写入物理寄存器组和ReservationStation.&lt;/p>
&lt;h2 id="指令的派发">指令的派发&lt;/h2>
&lt;p>第一级派遣的源码在 &lt;code>Dispatch.scala&lt;/code>，其中包含了对不同指令类型的判断、对每一条指令是否能够进入下一级的判断以及对 BusyTable 的置位（指令会在这一流水级把它的目的寄存器状态置为无效）。第一级 &lt;code>Dispatch&lt;/code> 负责将指令分类并发送至定点、浮点与访存三类派遣队列（Dispatch Queue）&lt;/p>
&lt;p>指令的派发是比较简单的，因为译码出来的结果带有指令应该在什么执行单元执行的信息，即FuType,Dispatch 只要根据这个信息将MicroOp发送到不同的分发队列里就可以了。另一方面，不管是怎么样的指令，都需要按顺序在Rob里留下一个副本，作为以后重新排序的依据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// valid bits for different dispatch queues ,根据FuType来判断指令的类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isInt&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isIntDq0&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isIntDq0&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isIntDq1&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isIntDq1&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isAlu&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isBothDeq0&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isBrh&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isBrh&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isJump&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isBranch&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// cover auipc (a fake branch)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">preDecodeInfo&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">notCFI&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isJump&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isFp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isFArith&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isVArith&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isVsetRvfWvf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isMem&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isMem&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isVls&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isLs&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isLoadStore&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isVls&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isVls&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isStore&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isStore&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isVStore&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isVStore&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isAMO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isAMO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isBlockBackward&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">blockBackward&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isWaitForward&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fromRename&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">waitForward&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有一些mdp啥的看不太懂 ， 感觉也是一种扩展 ，分发本身不是就要干分发到发射队列，写到rob,和store buffer里去吗，为什么会这么复杂&lt;/p>
&lt;h3 id="派遣队列">派遣队列&lt;/h3>
&lt;h4 id="队列的一些定义">队列的一些定义&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">io&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">IO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DispatchQueueIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">enqnum&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dpParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">IntDqDeqWidth&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;dpParams.IntDqDeqWidth must be 8&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">intSchdParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">issueBlockParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;int issueBlockParams must be 4&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">intSchdParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">issueBlockParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">exuBlockParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;int issueBlockParam&amp;#39;s must be 2&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// size: IntDqSize,队列的大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">s_invalid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">:&lt;/span> &lt;span style="color:#e5c07b">s_valid&lt;/span> &lt;span style="color:#e5c07b">::&lt;/span> &lt;span style="color:#e5c07b">Nil&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Enum&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// queue data array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">hasRen&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">dataModule&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Module&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">SyncDataModuleTemplate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DynInst&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">enqnum&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">hasRen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">hasRen&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// 缓冲区 , enqnum = RenameWidth ,deqnum=IntDqDeqWith / 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">robIdxEntries&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">RobPtr&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">stateEntries&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">s_invalid&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">validDeq0&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">validDeq1&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">validDeq0Num&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">validDeq0&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">stateEntries&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">v&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">v&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s&lt;/span>&lt;span style="color:#56b6c2">===&lt;/span>&lt;span style="color:#e06c75">s_valid&lt;/span>&lt;span style="color:#56b6c2">)})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">validDeq1Num&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">validDeq1&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">stateEntries&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">v&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">v&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s&lt;/span>&lt;span style="color:#56b6c2">===&lt;/span>&lt;span style="color:#e06c75">s_valid&lt;/span>&lt;span style="color:#56b6c2">)})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">DispatchQueuePtr&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">CircularQueuePtr&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">DispatchQueuePtr&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 循环缓存指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// head: first valid entry (dispatched entry)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DispatchQueuePtr&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span> &lt;span style="color:#7f848e">// 生成这么多指针,从0 到 2*deqnum - 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">headPtrNext&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DispatchQueuePtr&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">headPtrMask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UIntToMask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">value&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">headPtrOH&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">headPtrOHShift&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">CircularShift&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">headPtrOH&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">headPtrOHVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tabulate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">deqnum&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">headPtrOHShift&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">left&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// tail: first invalid entry (free entry)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">tailPtr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">enqnum&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DispatchQueuePtr&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">tailPtrMask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UIntToMask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">value&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">tailPtrOH&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">tailPtrOHShift&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">CircularShift&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tailPtrOH&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">tailPtrOHVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tabulate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">enqnum&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">tailPtrOHShift&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">left&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// valid entries counter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">validCounter&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Ceil&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">allowEnqueue&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">//allowEnqueue := (numNeedAlloc +&amp;amp; currentValidCounter &amp;lt;= (size - enqnum).U) || (numNeedAlloc +&amp;amp; currentValidCounter - (size - enqnum).U &amp;lt;= numDeq)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">isTrueEmpty&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">stateEntries&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_valid&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">canEnqueue&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">allowEnqueue&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="part-1-update-states-and-uops-when-enqueue-dequeue-commit-redirectreplay">Part 1: update states and uops when enqueue, dequeue, commit, redirect/replay&lt;/h4>
&lt;p>队列写入&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * Part 1: update states and uops when enqueue, dequeue, commit, redirect/replay
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * uop only changes when a new instruction enqueues.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * state changes when
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * (1) enqueue: from s_invalid to s_valid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * (2) dequeue: from s_valid to s_dispatched
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * (3) commit: from s_dispatched to s_invalid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * (4) redirect (branch misprediction or exception): from any state to s_invalid (flushed)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * (5) redirect (replay): from s_dispatched to s_valid (re-dispatch)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// enqueue: from s_invalid to s_valid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 允许入队
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAccept&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">canEnqueue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// needAlloc拉高就是fromRename.valid,反正就是dispatch那边需要分发到这个队列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enqOffset&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">enqnum&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">needAlloc&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">//偏移量，从本周期的第一个入队指令开始计算,假设（0,1,1,2,3）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enqIndexOH&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">enqnum&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">tailPtrOHVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">enqOffset&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// 把偏移量转化为OH编码 (1,10,10,100,1000), 如果选中第i个表项oh(i) = 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// req.valid多了两个条件，canEnterrDpq 和 dqCanAccept,应该就是没有异常或者其他的情况
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">validVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">enqIndexOH&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">v&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">oh&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">v&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">oh&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#7f848e">// 选中的表项,为1的话代表这一条指令选择了这个表项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">validVec&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">canEnqueue&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#7f848e">//这一条表项有指令选择
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">robIdxEntries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">validVec&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">robIdx&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">//把这一条指令的值赋给robIdxEntries
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">stateEntries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_valid&lt;/span> &lt;span style="color:#7f848e">//表项有效
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dqIndex&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">//队列的id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">validDeq0&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isIntDq0Deq0&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">validVec&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">//去判断是Deq0还是Deq1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">validDeq1&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isIntDq0Deq1&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">validVec&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">validDeq0&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isIntDq1Deq0&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">validVec&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">validDeq1&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">FuType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isIntDq1Deq1&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">validVec&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fuType&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">enqnum&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dataModule&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">canEnqueue&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#7f848e">// 写入缓冲区的条件,需要加入队列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">dataModule&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">waddr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">enqOffset&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">value&lt;/span> &lt;span style="color:#7f848e">// 写入的地址,队列的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">dataModule&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wdata&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#7f848e">///写入的数据,bits,microop
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// dequeue: from s_valid to s_dispatched
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">validVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">headPtrOHVec&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">v&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">oh&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">v&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">oh&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#7f848e">//指示哪一条指令可以出队列了,首先得hedPtr选择了这一条表项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">validVec&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stateEntries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_invalid&lt;/span> &lt;span style="color:#7f848e">//失效表项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// redirect: cancel uops currently in the queue
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">needCancel&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">needCancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">stateEntries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e06c75">s_invalid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">robIdxEntries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">needFlush&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">//表项是有效的但是需要flush
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">needCancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stateEntries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_invalid&lt;/span> &lt;span style="color:#7f848e">//此时就把表项置为无效
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">XSInfo&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">needCancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#98c379">&amp;#34;valid entry($i): robIndex ${robIdxEntries(i)} &amp;#34;&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#98c379">&amp;#34;cancelled with redirect robIndex 0x${Hexadecimal(io.redirect.bits.robIdx.asUInt)}\n&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="part-2-update-indices">Part 2: update indices&lt;/h4>
&lt;p>更新队列的头和尾指针&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * Part 2: update indices,更新索引
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * tail: (1) enqueue; (2) redirect
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * head: dequeue
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// dequeue
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">currentValidCounter&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">distanceBetween&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">numDeqTryMask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">currentValidCounter&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// all deq are valid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// only the valid bits are set
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 把currentValidCounter转化为独热码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">UIntToOH&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">currentValidCounter&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">//中间的某一个
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 感觉可以把头指针和尾指针的概念互换一下，现在头指针是负责出队列的，尾指针是负责入队列的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 这些是已经放在端口上了，但是还没有被取出的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 选择没握手的但是entry数据有效的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// numDeqTryMask是tailPtr(0)和headPtr(0)的距离,headPtr是同时增加的,tailPtr不是同时增加的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 它应该是要保证deq的是连续的，所以如果遇到！deq.fire的话，就标记deqEnable_n,比方说deqEnable_n是000010,那么numDeq就是1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">deqEnable_n&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// For dequeue, the first entry should never be s_invalid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// Otherwise, there should be a redirect and tail walks back
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// in this case, we set numDeq to 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">numDeqTryMask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// When the state is s_invalid, we set deqEnable_n to false.B because
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// the entry may leave earlier and require to move forward the deqPtr.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">stateEntries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">value&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e06c75">s_invalid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">numDeqTryMask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">+&lt;/span> &lt;span style="color:#e5c07b">true.B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">numDeq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">PriorityEncoder&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">deqEnable_n&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// PriorityEncoder是从右到左去选择的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// agreement with reservation station: don&amp;#39;t dequeue when redirect.valid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 如果是redirect,那么就不出队列,否则就去往下一个表项,说明如果没有redirect的话，headPtr是同时加一个numDeq的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">headPtrNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">numDeq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 更新头指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// headPtr是一个Vec,代表第更新的时候应该指向下一个要出队列的entry
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 如果deqEnable_n是000010,那么headPtrOH其实是向左边移动了1位
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">headPtrNext&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">headPtrOH&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtrOH&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">ParallelPriorityMux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">deqEnable_n&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtrOHVec&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">XSError&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">headPtrOH&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">toOH&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#98c379">&amp;#34;head: $headPtrOH != UIntToOH(${headPtr.head})&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// For branch mis-prediction or memory violation replay,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// we delay updating the indices for one clock cycle.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// For now, we simply use PopCount to count #instr cancelled.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 上一个周期分支错误
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">lastCycleMisprediction&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">GatedValidRegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// find the last one&amp;#39;s position, starting from headPtr and searching backwards
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 寻找最后一个有效表项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">validBitVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">stateEntries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_valid&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">//有效表项的Vec
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">loValidBitVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">validBitVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">headPtrMask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>&lt;span style="color:#7f848e">// 如果headPtrMask是3,headPtrMask是1000-1 = 0111,Cat是反过来的,0在最前面
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">hiValidBitVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">validBitVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">headPtrMask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">flippedFlag&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">loValidBitVec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">validBitVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 如果loValidBitVec有1,或者最后一个表项是有效的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">leadingZeros&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">PriorityEncoder&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">loValidBitVec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">loValidBitVec&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">hiValidBitVec&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// 找到最右边的表项，就是找到最大的一个表项号,但是此时是反过来的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">lastOneIndex&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">leadingZeros&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">leadingZeros&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 通过size.U - 得到真正的序号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">walkedTailPtr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DispatchQueuePtr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">walkedTailPtr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">flag&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">flippedFlag&lt;/span> &lt;span style="color:#56b6c2">^&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">flag&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">walkedTailPtr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">value&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">lastOneIndex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// enqueue
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">//io.enqRob.needAlloc(i) := io.fromRename(i).valid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">//io.enqRob.req(i).valid := io.fromRename(i).valid &amp;amp;&amp;amp; thisCanActualOut(i) &amp;amp;&amp;amp; dqCanAccept,doCanAccept指的是队列可以接受
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">numEnq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAccept&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 发起请求的有多少个，就进多少个
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">numNeedAlloc&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAccept&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">PopCount&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">needAlloc&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// needAlloc的数量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">lastCycleMisprediction&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">isTrueEmpty&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">walkedTailPtr&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">numEnq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">lastLastCycleMisprediction&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">GatedValidRegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">lastCycleMisprediction&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">enqnum&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">lastLastCycleMisprediction&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">numEnq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tailPtrOH&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">lastLastCycleMisprediction&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">toOH&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">tailPtrOHVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numEnq&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">tailPtrOHAccurate&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">lastCycleMisprediction&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">lastLastCycleMisprediction&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">XSError&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tailPtrOHAccurate&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">tailPtrOH&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">toOH&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#98c379">&amp;#34;tail: $tailPtrOH != UIntToOH(${tailPtr.head})&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// update valid counter and allowEnqueue reg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">validCounter&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">validCounter&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">lastLastCycleMisprediction&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">currentValidCounter&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">validCounter&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">numEnq&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">numDeq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 意思是空闲队列数是要大于enqnum的,或者就是空闲队列数大于enqnum - deqnum
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">allowEnqueue&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numNeedAlloc&lt;/span> &lt;span style="color:#56b6c2">+&amp;amp;&lt;/span> &lt;span style="color:#e06c75">currentValidCounter&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">enqnum&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numNeedAlloc&lt;/span> &lt;span style="color:#56b6c2">+&amp;amp;&lt;/span> &lt;span style="color:#e06c75">currentValidCounter&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">enqnum&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">numDeq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="part3set-output-valid-and-data-bits">Part3:set output valid and data bits&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * Part 3: set output valid and data bits
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">deqData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DynInst&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// How to pipeline the data read:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// T: get the required read data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">deqData&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Some bits have bad timing in Dispatch but will not be used at Dispatch2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// They will use the slow path from data module
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">dataModule&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rdata&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// do not dequeue when io.redirect valid because it may cause dispatchPtr work improperly
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">headPtrOHVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">stateEntries&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">lastCycleMisprediction&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// T-1: select data from the following (deqnum + 1 + numEnq) sources with priority, 从以下（deqnum + 1 + numEnq）个数据源按照优先级选择数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// For data(i): (1) current output (deqnum - i); (2) next-step data (i + 1) // 对于data(i),（1）当前输出（deqnum - i),(2)下一步data (i+1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// For the next-step data(i): (1) enqueue data (enqnum); (2) data from storage (1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// [0,deqnum-1] 和[deqnum,2*depnum-1]数据源是不一样的,我猜测[deqnum,2*deqnum-1]是下一步的数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">nextStepData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DynInst&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ptrMatch&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">QPtrMatchMatrix&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">headPtr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">tailPtr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enqMatchVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ptrMatch&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// i是定的,旁路应该是直接把输入的数据旁路给输出的,它应该就是在deq是定的时候去遍历enq,判断是否有一样的指针,有问题啊？？这东西应该只有一个是拉高的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enqBypassEnVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">needAlloc&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">enqOffset&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">v&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">v&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">enqMatchVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enqBypassEn&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">canAccept&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">enqBypassEnVec&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span> &lt;span style="color:#7f848e">//旁路
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">enqBypassData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">enqBypassEnVec&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">readData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">deqData&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">dataModule&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rdata&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nextStepData&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">enqBypassEn&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">enqBypassData&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">readData&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 读取的数据,和旁路的数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 如果deqEnable_n是000100, 那么deqData(0) = nextStepData(2), deqData(1) = nextStepData(3), deqData(2) = nextStepData(4)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 因为前几个数据已经被读了，所以需要顺位过去;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 如果本次读满了，deqEnable_n = 1 &amp;lt;&amp;lt; (deqnum + 1) , 那实际上是直接把下一批的数据覆盖过来,要不然还是会带着一些本批的数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">deqData&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">ParallelPriorityMux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">deqEnable_n&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">nextStepData&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">drop&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">deqnum&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">//丢弃前i个元素，保留后面的deqnum + 1个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// T-2: read data from storage: next
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">deqnum&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 因为ren不一定有，所有要用get(i)确保安全访问
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">dataModule&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ren&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">redirect&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">reduce&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">|&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 读取队列中的数据,读取条件是io.deq中有valid,或者
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dataModule&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">raddr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">headPtrNext&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">value&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 设置好从dataModule读出的地址,它是直接从headPtrNext读的,T-2读数据，T-1读到数据
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山源代码剖析——PMA和PMP</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/</link><pubDate>Sun, 12 Jan 2025 23:49:47 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/</guid><description>&lt;p>PMP : 物理存储保护（Physical Memory Protection) module ,它将所有的访问权限都集中起来&lt;/p>
&lt;p>PMA:物理存储属性（Physical Memory Attributes),PMP实施存储空间保护的依据&lt;/p>
&lt;p>PMP + PMA 的保护方案&lt;/p>
&lt;p>每当目标地址访问内存单元时，先向PMP模块查询一下，PMP用这个目标地址找到所述的区间，然后返回地址的属性。&lt;/p>
&lt;h2 id="补充来自-riscv手册">补充（来自 riscv手册）&lt;/h2>
&lt;p>PMA是底层硬件的固有属性，在系统运行期间很少发生变化。与PMP不同，PMA不随执行上下文而变化。某些存储区域的 PMA 在芯片设计时就已确定——例如片上 ROM。其他的在电路板设计时是固定的，例如取决于哪些其他芯片连接到片外总线。片外总线还可能支持可以在每个电源周期（冷插拔）或在系统运行时动态更改（热插拔）的设备。某些设备可能在运行时进行配置，以支持意味着不同 PMA 的不同用途，例如，片上暂存器 RAM 可能由一个最终应用程序中的一个内核私有缓存，或者在另一个最终应用程序中作为共享非缓存内存进行访问最终应用程序。&lt;/p>
&lt;p>为了帮助系统调试，我们强烈建议在可能的情况下，RISCV 处理器精确捕获未通过 PMA 检查的物理内存访问。精确捕获的 PMA 违规表现为指令、加载或存储访问错误异常，与虚拟内存页错误异常不同。&lt;/p>
&lt;h3 id="主内存与-io-与空闲区域">主内存与 I/O 与空闲区域&lt;/h3>
&lt;p>给定内存地址范围最重要的特征是它是否拥有常规主内存或 I/O 设备，或者是否为空。&lt;/p>
&lt;p>主内存区域始终支持所连接设备所需的所有访问宽度的读写，并且可以指定是否支持取指令。&lt;/p>
&lt;p>I/O 区域可以指定支持哪些数据宽度的读、写或执行访问组合。&lt;/p>
&lt;p>对于具有基于页面的虚拟内存的系统，I/O 和内存区域可以指定支持硬件页表读取和硬件页表写入的组合。&lt;/p>
&lt;h4 id="atomicity-pmas">Atomicity PMAs&lt;/h4>
&lt;p>原子性 PMA 描述了该地址区域支持哪些原子指令。对原子指令的支持分为两类：LR/SC 和 AMO。&lt;/p>
&lt;p>未完&lt;/p>
&lt;h3 id="pmp">PMP&lt;/h3>
&lt;p>为了支持安全处理并包含故障，需要限制硬件上运行的软件可访问的物理地址。可选的物理内存保护 (PMP) 单元提供 per-hart 机器模式控制寄存器，允许为每个物理内存区域指定物理内存访问权限（读、写、执行）。 PMP 值的检查与第 3.6 节中描述的 PMA 检查并行。&lt;/p>
&lt;p>PMP 检查适用于所有有效特权模式为 S 或 U 的访问，包括 S 和 U 模式下的取指令、mstatus 寄存器中 MPRV 位清零时 S 和 U 模式下的数据访问，以及当 mstatus 寄存器中的 MPRV 位清零时的任何模式下的数据访问。 mstatus 中的 MPRV 位被设置，并且 mstatus 中的 MPP 字段包含 S 或 U。PMP 检查也适用于虚拟地址转换的页表访问，其有效特权模式为 S。可选地，PMP 检查可以另外还适用于 M 模式访问，在这种情况下，PMP 寄存器本身被锁定，因此即使是 M 模式软件也无法更改它们，直到 hart 复位。实际上，PMP 可以向 S 和 U 模式授予权限（默认情况下没有权限），并且可以撤销 M 模式的权限（默认情况下具有完全权限）。&lt;/p>
&lt;h4 id="pmp-csrs">PMP CSRs&lt;/h4>
&lt;p>PMP 条目由 8 位配置寄存器和 1 个 MXLEN 位地址寄存器描述。某些 PMP 设置还使用与前面的 PMP 条目关联的地址寄存器。最多支持 64 个 PMP 条目。实现可以实现零个、16 个或 64 个 PMP CSR；必须首先实施编号最低的 PMP CSR。所有 PMP CSR 字段都是 WARL，并且可以是只读零。 PMP CSR 仅适用于 M 模式。&lt;/p>
&lt;p>PMP 配置寄存器密集地封装到 CSR 中，以最大限度地减少上下文切换时间。对于 RV32，16 个 CSR（pmpcfg0–pmpcfg15）保存 64 个 PMP 条目的配置 pmp0cfg–pmp63cfg，如图 3.31 所示。对于 RV64，八个偶数 CSR、pmpcfg0、pmpcfg2、. 。 。 、pmpcfg14，保存了64个PMP表项的配置，如图3.32所示。对于 RV64，奇数配置寄存器 pmpcfg1、pmpcfg3、. 。 。 、pmpcfg15 是非法的。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 172;
flex-basis: 413px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113143541094.png" data-size="758x440">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113143541094.png"
width="758"
height="440"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113143541094_hu2652891639521594230.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113143541094_hu11471525476637872523.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>PMP 地址寄存器是名为 pmpaddr0–pmpaddr63 的 CSR。每个 PMP 地址寄存器对 RV32 的 34 位物理地址的第 33-2 位进行编码，如图 3.33 所示。对于 RV64，每个 PMP 地址寄存器对 56 位物理地址的第 55-2 位进行编码，如图 3.34 所示。并非所有物理地址位都可以实现，因此 pmpaddr 寄存器是 WARL。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 379;
flex-basis: 909px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113143651160.png" data-size="1073x283">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113143651160.png"
width="1073"
height="283"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113143651160_hu9654784109896776822.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113143651160_hu13186990992869256923.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 667;
flex-basis: 1602px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113144001268.png" data-size="1162x174">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113144001268.png"
width="1162"
height="174"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113144001268_hu14909258957672509025.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113144001268_hu17652041549485841022.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="address-matching">Address Matching&lt;/h4>
&lt;p>PMP 条目配置寄存器中的 A 字段对关联 PMP 地址寄存器的地址匹配模式进行编码。该字段的编码如表3.10所示。当A=0时，该PMP条目被禁用并且不匹配任何地址。支持另外两种地址匹配模式：自然对齐的 2 幂区域 (NAPOT)，包括自然对齐的四字节区域 (NA4) 的特殊情况；以及任意范围的顶部边界 (TOR)。这些模式支持四字节粒度。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 293;
flex-basis: 704px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113144712293.png" data-size="883x301">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113144712293.png"
width="883"
height="301"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113144712293_hu15152675668236492438.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113144712293_hu542229057566436269.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>NAPOT 范围利用相关地址寄存器的低位来编码范围的大小，如表 3.11 所示。&lt;/p>
&lt;p>pmpaddr的低位表示区域的大小，高位表示右移2bit的基地址&lt;/p>
&lt;p>&lt;a class="link" href="https://www.reddit.com/r/RISCV/comments/ypu6kx/how_to_convert_a_range_of_memory_to_pmpaddrx_for/" target="_blank" rel="noopener"
>https://www.reddit.com/r/RISCV/comments/ypu6kx/how_to_convert_a_range_of_memory_to_pmpaddrx_for/&lt;/a> 有助于理解它的意思&lt;/p>
&lt;p>比方说pmpaddr 为 10001 0111111的话， 基地址就是 10001 0000000 00 ， 大小就是 2^(6+3) = 1 000000000 ,所以比对的时候前9位是需要做mask的 ，需要比对后面的位数&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 228;
flex-basis: 549px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113144901023.png" data-size="1021x446">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113144901023.png"
width="1021"
height="446"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113144901023_hu986956767677688106.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90pma%E5%92%8Cpmp/image-20250113144901023_hu17862132848752128846.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>如果选择 TOR，则关联的地址寄存器形成地址范围的顶部，而前面的 PMP 地址寄存器形成地址范围的底部。如果 PMP 条目 i 的 A 字段设置为 TOR，则该条目与任何地址 y 匹配，使得 pmpaddri−1 ≤ y &amp;lt; pmpaddri （与 pmmpcfgi−1 的值无关）。如果 PMP 条目 0 的 A 字段设置为 TOR，则使用零作为下限，因此它匹配任何地址 y &amp;lt; pmpaddr0。&lt;/p>
&lt;p>PMP地址寄存器，在32位RISCV上，pmpaddr是32位，物理地址是36位，所以pmpaddr的内容是物理地址的bit2-bit33, bit34,bit35也是忽略的&lt;/p>
&lt;h4 id="locking-and-privilege-mode">Locking and Privilege Mode&lt;/h4>
&lt;p>L 位表示 PMP 条目已锁定，即对配置寄存器和相关地址寄存器的写入被忽略。锁定的 PMP 条目将保持锁定状态，直到重置 Hart。如果 PMP 条目 i 被锁定，则对 pmpicfg 和 pmpaddri 的写入将被忽略。此外，如果 PMP 条目 i 被锁定并且 pmpicfg.A 设置为 TOR，则忽略对 pmpaddri-1 的写入。 即使 A 字段设置为 OFF，设置 L 位也会锁定 PMP 条目。 除了锁定 PMP 条目之外，L 位还指示是否对 M 模式访问强制执行 R/W/X 权限。当 L 位被设置时，这些权限将针对所有特权模式强制执行。当L位清零时，任何与PMP条目匹配的M模式访问都会成功； R/W/X 权限仅适用于 S 和 U 模式。&lt;/p>
&lt;h2 id="香山的pmp和pma">香山的pmp和pma&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// PMP.scala
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">PMP&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">PMPXSModule&lt;/span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">HasXSParameter&lt;/span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">PMPMethod&lt;/span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">PMAMethod&lt;/span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">HasCSRConst&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">io&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">IO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Bundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">distribute_csr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Flipped&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DistributedCSRIO&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">NumPMP&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pma&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">NumPMA&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">distribute_csr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">NumPMP&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span> &lt;span style="color:#7f848e">// NumPMP = 16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pma&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">NumPMA&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span> &lt;span style="color:#7f848e">// Numpma = 16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pmpMapping&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">pmp_gen_mapping&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pmp_init&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">NumPMP&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">PmpcfgBase&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">PmpaddrBase&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 生成PMP比对表 ，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pmaMapping&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">pmp_gen_mapping&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pma_init&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">NumPMA&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">PmacfgBase&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">PmaaddrBase&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pma&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 生成PMA比对表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mapping&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">pmpMapping&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#e06c75">pmaMapping&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">rdata&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PMXLEN&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">MaskedRegMap&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">generate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mapping&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">rdata&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 讲比对表项放在CSR寄存器里
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pma&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pma&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 在 CSRConst.scala有寄存器的基地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e5c07b">PmpcfgBase&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0x3A0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e5c07b">PmpaddrBase&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0x3B0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Machine level PMA
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e5c07b">PmacfgBase&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0x7C0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e5c07b">PmaaddrBase&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0x7C8&lt;/span> &lt;span style="color:#7f848e">// 64 entry at most
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">trait&lt;/span> &lt;span style="color:#e5c07b">PMPMethod&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">PMPConst&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">pmp_init&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span>&lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">//生成了3组信号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cfg&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">WireInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">NumPMP&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PMXLEN&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// val addr = Wire(Vec(NumPMP, UInt((PMPAddrBits-PMPOffBits).W)))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// val mask = Wire(Vec(NumPMP, UInt(PMPAddrBits.W)))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// INFO: these CSRs could be uninitialized, but for difftesting with NEMU, we opt to initialize them.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">WireInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">NumPMP&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e5c07b">PMPAddrBits&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">WireInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">NumPMP&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PMPAddrBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">pmp_gen_mapping&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">init&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">num&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">16&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cfgBase&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addrBase&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">entries&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 一个csr寄存器配置的pmp条目 ， 32 / 8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pmpCfgPerCSR&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">PMXLEN&lt;/span> &lt;span style="color:#56b6c2">/&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">().&lt;/span>&lt;span style="color:#e06c75">getWidth&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 获取第i个 pmp对应的CSR
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">pmpCfgIndex&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PMXLEN&lt;/span> &lt;span style="color:#56b6c2">/&lt;/span> &lt;span style="color:#d19a66">32&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">/&lt;/span> &lt;span style="color:#e06c75">pmpCfgPerCSR&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">init_value&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">init&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/** to fit MaskedRegMap&amp;#39;s write, declare cfgs as Merged CSRs and split them into each pmp */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cfgMerged&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">init_value&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">//(Vec(num / pmpCfgPerCSR, UInt(PMXLEN.W))) // RegInit(VecInit(Seq.fill(num / pmpCfgPerCSR)(0.U(PMXLEN.W))))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 这里把cfgs按照 pmp的个数进行划分了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cfgs&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">WireInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfgMerged&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">num&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">init_value&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_2&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// (Vec(num, UInt((PMPAddrBits-PMPOffBits).W)))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">init_value&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_3&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// (Vec(num, UInt(PMPAddrBits.W)))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">entries&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">indices&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">entries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfgs&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cfg_mapping&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#e06c75">by&lt;/span> &lt;span style="color:#e06c75">pmpCfgPerCSR&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#e5c07b">Map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">MaskedRegMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">cfgBase&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">pmpCfgIndex&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">reg&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">cfgMerged&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#e06c75">pmpCfgPerCSR&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">wmask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">WritableMask&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">wfn&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPBase&lt;/span>&lt;span style="color:#56b6c2">().&lt;/span>&lt;span style="color:#e06c75">write_cfg_vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">cfgMerged&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#e06c75">pmpCfgPerCSR&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// cfgMerged（i/pmpCfgPerCSR)是以CSR为单位的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}).&lt;/span>&lt;span style="color:#e06c75">fold&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Map&lt;/span>&lt;span style="color:#56b6c2">())((&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// ugly code, hit me if u have better codes, 这个意思就是把每次的map 得到的键值对合并成一个大的Map , 而不是Seq了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addr_mapping&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">num&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#e5c07b">Map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// MaskedRegMap对 整个数据进行重新组织了 (Int, (UInt, UInt, UInt =&amp;gt; UInt, UInt, UInt =&amp;gt; UInt)) = (addr, (reg, wmask, wfn, rmask, rfn))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">MaskedRegMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">addrBase&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#7f848e">// CSR地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">reg&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#7f848e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">wmask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">WritableMask&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">wfn&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e06c75">num&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">entries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">write_addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">entries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">entries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">write_addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rmask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">WritableMask&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rfn&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPBase&lt;/span>&lt;span style="color:#56b6c2">().&lt;/span>&lt;span style="color:#e06c75">read_addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">entries&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}).&lt;/span>&lt;span style="color:#e06c75">fold&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Map&lt;/span>&lt;span style="color:#56b6c2">())((&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// ugly code, hit me if u have better codes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cfg_mapping&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#e06c75">addr_mapping&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// PMPReadWriteMethodBare特质的一个方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">write_cfg_vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e06c75">index&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">oldcfg&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">cfgs&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// pmp为单位
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cfgVec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfgs&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getWidth&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">cfgVec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">indices&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// new config
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cfg_w_m_tmp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">cfgs&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)*&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// old config
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cfg_old_tmp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">oldcfg&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)*&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cfgVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">cfg_old_tmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">cfg_old_tmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">l&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// 如果没有lock的话
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">cfgVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">cfg_w_m_tmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cfgVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">cfg_w_m_tmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">cfg_w_m_tmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#7f848e">// 意思是说只有有读权限，写权限才是有效的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">CoarserGrain&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">cfgVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg_w_m_tmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">cfg_w_m_tmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#7f848e">// 10 -&amp;gt; 11 na4 -&amp;gt; napot
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfgVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">na4_napot&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// a(1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">match_mask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfgVec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cfgVec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// PMPConfig:PMP配置， paddr: 物理地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">match_mask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">paddr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 1 &amp;lt;&amp;lt; platformGrain : 1page 4KB , 它会把 前10位全部赋值为1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">match_mask_c_addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">paddr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#56b6c2">(((&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e5c07b">PlatformGrain&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">paddr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getWidth&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">match_mask_c_addr&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">~(&lt;/span>&lt;span style="color:#e06c75">match_mask_c_addr&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#7f848e">// (a &amp;amp; ~(a + 1) , 0b11) ， 1010 11111 0100 11111 -&amp;gt; 000011111 ,把第1个0左边的全部置0 ，所以它生成的是mask ,针对于物理地址，
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// PMPConfig就是封装了配置寄存器的的位
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">PMPBundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">l&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// res(1), unuse in pmp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">atomic&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// res(0), unuse in pmp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">res&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">atomic&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// in pmp, unused
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">off&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">tor&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">na4&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">CoarserGrain&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">napot&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">CoarserGrain&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asBool&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#d19a66">3.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">off_tor&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">na4_napot&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">locked&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">l&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">addr_locked&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">locked&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">addr_locked&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">locked&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">locked&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tor&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 所以说一个PMPEntry表项应该是有 cfg addr mask 3个变量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">PMPBase&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">PMPBundle&lt;/span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">PMPReadWriteMethod&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cfg&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e5c07b">PMPAddrBits&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// PMPOffBits = 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getWidth&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getWidth&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">cfg&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">PMPBase&lt;/span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">PMPMatchMethod&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PMPAddrBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// help to match in napot
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">write_addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">paddr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr_locked&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">match_mask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">paddr&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr_locked&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">next&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">paddr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">write_addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">paddr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr_locked&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">match_mask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">paddr&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr_locked&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">paddr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getWidth&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getWidth&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">cfg&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>PMAMethod 中有个pma_init(),创建了PMA的全部表项 ，函数返回的类型也是Seq(cfg,addr,mask)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">pma_init&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">genAddr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">init_addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BigInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">init_addr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e5c07b">PMPAddrBits&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">genMask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">init_addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BigInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BigInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">match_mask_addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">init_addr&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#d19a66">0x1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#56b6c2">(((&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e5c07b">PlatformGrain&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">match_mask_addr&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">~(&lt;/span>&lt;span style="color:#e06c75">match_mask_addr&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PMPAddrBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">NumPMA&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">16&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cfg_list&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">ListBuffer&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">]()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addr_list&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">ListBuffer&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">]()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mask_list&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">ListBuffer&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">]()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">base_addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BigInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">range&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BigInt&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#7f848e">// only use for napot mode
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">l&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">atomic&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">shift_addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">base_addr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">get_napot&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">base_addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">range&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cfg_list&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PMPConfigUInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">l&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">atomic&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addr_list&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">genAddr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mask_list&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">genMask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x0&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">range&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0x1000000000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">atomic&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x0&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">range&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0x80000000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x3C000000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x3A001000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x3A000000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x39002000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x39000000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x38022000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x38021000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x38020000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x30050000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// FIXME: GPU space is cacheable?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x30010000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x20000000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0x10000000&lt;/span>&lt;span style="color:#e06c75">L&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg_list&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">length&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">16&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addPMA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cfgInitMerge&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tabulate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">/&lt;/span> &lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cfg_list&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">drop&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">foldRight&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">BigInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0L&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">result&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">result&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getWidth&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">litValue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PMXLEN&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">addr_list&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">mask_list&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfgInitMerge&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">toSeq&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">toSeq&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">get_napot&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">base&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BigInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">range&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BigInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BigInt&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 1 page = 4096 bytes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e5c07b">PlatformGrainBytes&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e5c07b">PlatformGrain&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">base&lt;/span> &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#e5c07b">PlatformGrainBytes&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">println&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;base:%x&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">base&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">range&lt;/span> &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#e5c07b">PlatformGrainBytes&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">println&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;range: %x&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">range&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">base&lt;/span> &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#e5c07b">PlatformGrainBytes&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">range&lt;/span> &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#e5c07b">PlatformGrainBytes&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">base&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">range&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">match_mask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">paddr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">match_mask_addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">paddr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#56b6c2">(((&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e5c07b">PlatformGrain&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">paddr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getWidth&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">match_mask_addr&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">~(&lt;/span>&lt;span style="color:#e06c75">match_mask_addr&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PMPOffBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">shift_addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BigInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每当想要访问一个物理存储地址的时候，就要在一个PMPReqBundle上向PMP发出一个查询请求,addr是物理地址，size是目标地址区间的大小，已字节为单位，cmd为访问意图，读写，还是执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">PMPReqBundle&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">lgMaxSize&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">PMPBundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">PMPAddrBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Ceil&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">lgMaxSize&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cmd&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">TlbCmd&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Unit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">cmd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Unit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// req minimal permission and req align size
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">lgMaxSize&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">TlbCmd&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">PMPRespBundle&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">PMPBundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ld&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span> &lt;span style="color:#7f848e">//表示可读
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">st&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span> &lt;span style="color:#7f848e">//表示可写
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">instr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span> &lt;span style="color:#7f848e">// 表示可执行（指令）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mmio&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span> &lt;span style="color:#7f848e">// 表示目标单元在MMIO中，说明不可以缓存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">atomic&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span> &lt;span style="color:#7f848e">// 表示对此单元的访问可以是原子操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#56b6c2">|(&lt;/span>&lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">PMPRespBundle&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">PMPRespBundle&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">res&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPRespBundle&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">res&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ld&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ld&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ld&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">res&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">st&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">st&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">st&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">res&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">instr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">instr&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">instr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">res&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mmio&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mmio&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mmio&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">res&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">atomic&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">atomic&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">atomic&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">res&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>PMPCheck module连接着PMPReqBundle和PMPRespBundle&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">PMPCheckIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">lgMaxSize&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">PMPBundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">check_env&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPCheckerEnv&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Flipped&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Valid&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPReqBundle&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">lgMaxSize&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// usage: assign the valid to fire signal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">resp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPRespBundle&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mode&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e06c75">pma&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Valid&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">PMPReqBundle&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">check_env&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mode&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pma&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">resp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">req_apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Unit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">valid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mode&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e06c75">pma&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">check_env&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mode&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pma&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">req_apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">resp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 检验环境，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">PMPCheckerEnv&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">PMPBundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mode&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">NumPMP&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pma&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">NumPMA&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mode&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e06c75">pma&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Unit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mode&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">mode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pma&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pma&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">PMPChecker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lgMaxSize&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sameCycle&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">leaveHitMux&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pmpUsed&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">PMPModule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">PMPCheckMethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">PMACheckMethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(!(&lt;/span>&lt;span style="color:#e06c75">leaveHitMux&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">sameCycle&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">io&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">IO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPCheckIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">lgMaxSize&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 这个很重要，应该就是负责查找pmp的，然后返回对应的cfg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">res_pmp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">pmp_match_res&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">leaveHitMux&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">check_env&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">check_env&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mode&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">lgMaxSize&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">res_pma&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">pma_match_res&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">leaveHitMux&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">check_env&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pma&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">check_env&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mode&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">lgMaxSize&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">resp_pmp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">pmp_check&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">res_pmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">resp_pma&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">pma_check&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">res_pma&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">resp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pmpUsed&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">resp_pmp&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">resp_pma&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">resp_pma&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sameCycle&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">leaveHitMux&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">resp&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">resp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">resp&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">RegEnable&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比如在FrontendImp会创建pmp和pmp_check ,&lt;/p>
&lt;p>所以是pmp_check联系了pmp还有其他的组建&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e5c07b">PortNumber&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">ICacheParameters&lt;/span>&lt;span style="color:#56b6c2">().&lt;/span>&lt;span style="color:#e5c07b">PortNumber&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Module&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMP&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 比较神奇的点是这样竟然可以把PMPChecker的端口给复制几遍
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pmp_check&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">coreParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ipmpPortNum&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e5c07b">Module&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPChecker&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">sameCycle&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">distribute_csr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">csrCtrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">distribute_csr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pmp_req_vec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">coreParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ipmpPortNum&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Valid&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPReqBundle&lt;/span>&lt;span style="color:#56b6c2">())))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e5c07b">PortNumber&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">pmp_req_vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">icache&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pmp_req_vec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">last&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">ifu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#e06c75">pmp_check&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">indices&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pmp_check&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tlbCsr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">priv&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">imode&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pma&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pmp_req_vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e5c07b">PortNumber&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">icache&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">resp&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">pmp_check&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ifu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">resp&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">pmp_check&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">last&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">resp&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// PMPCheckMethod 这个trait应该就是负责去查找对应的地址然后返回pmp的config 的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">trait&lt;/span> &lt;span style="color:#e5c07b">PMPCheckMethod&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">PMPConst&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 通过pmp_conf 和 cmd返回对应的权限
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">pmp_check&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">PMPConfig&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">resp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPRespBundle&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ld&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">TlbCmd&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isRead&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e5c07b">TlbCmd&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isAmo&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">r&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">st&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">TlbCmd&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isWrite&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e5c07b">TlbCmd&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isAmo&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">instr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">TlbCmd&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isExec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mmio&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">atomic&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">resp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 通过req的addr去查找对应的pmp_con f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">pmp_match_res&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">leaveHitMux&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pmpEntries&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mode&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lgMaxSize&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">pmpEntries&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e5c07b">NumPMP&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">passThrough&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pmpEntries&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isEmpty&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mode&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pmpDefault&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">WireInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pmpDefault&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">passThrough&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pmpDefault&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">passThrough&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pmpDefault&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">passThrough&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">match_vec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">num&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cfg_vec&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">num&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">PMPEntry&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 把pmpDefault 放在第一个位置，后面跟随着pmpEntries的前num-1个位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 所以最终得到的是（pmp,last_pmp)的元组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// .zipWithIndex 会把元素和index一起传入,构成一个元组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">pmpEntries&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pmpDefault&lt;/span> &lt;span style="color:#56b6c2">+:&lt;/span> &lt;span style="color:#e06c75">pmpEntries&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">take&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">num&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">last_pmp&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 通过mask进行比较
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">is_match&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">is_match&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">lgMaxSize&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">last_pmp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ignore&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">passThrough&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">l&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">aligned&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">aligned&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">lgMaxSize&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">last_pmp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cur&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">WireInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cur&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">aligned&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">ignore&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cur&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">aligned&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">ignore&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cur&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">aligned&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pmp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">ignore&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// Mux(is_match, cur, prev)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">match_vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">is_match&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cfg_vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">cur&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// default value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">match_vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">num&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cfg_vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">num&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pmpDefault&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 它应该是返回了一个符合要求的表项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">leaveHitMux&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">ParallelPriorityMux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">match_vec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RegEnable&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span> &lt;span style="color:#e5c07b">RegEnable&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg_vec&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">ParallelPriorityMux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">match_vec&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">cfg_vec&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山源代码剖析——香山SOC的顶层</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E9%A6%99%E5%B1%B1soc%E7%9A%84%E9%A1%B6%E5%B1%82/</link><pubDate>Sun, 12 Jan 2025 23:26:10 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E9%A6%99%E5%B1%B1soc%E7%9A%84%E9%A1%B6%E5%B1%82/</guid><description>&lt;p>// top.scala里包含香山的头文件&lt;/p>
&lt;p>// 有一个XSCore.scala文件&lt;/p>
&lt;h2 id="xstop和xscore">XSTop和XSCore&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">XSCore&lt;/span>&lt;span style="color:#56b6c2">()(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">config.Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">XSCoreBase&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">HasXSDts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">module&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">XSCoreImp&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">XSCoreBase&lt;/span>&lt;span style="color:#56b6c2">()(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">config.Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">HasXSParameter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">shouldBeInlined&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// outer facing nodes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">frontend&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Frontend&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">csrOut&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">BundleBridgeSource&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DistributedCSRIO&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">backend&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Backend&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">backendParams&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">memBlock&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">MemBlock&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">memBlock&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">frontendBridge&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">icache_node&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">frontend&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">icache&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">clientNode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">memBlock&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">frontendBridge&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">instr_uncache_node&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">frontend&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">instrUncache&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">clientNode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Chisel_diplomacy框架</title><link>https://VastCircle.github.io/2025/chisel_diplomacy%E6%A1%86%E6%9E%B6/</link><pubDate>Fri, 10 Jan 2025 14:14:12 +0800</pubDate><guid>https://VastCircle.github.io/2025/chisel_diplomacy%E6%A1%86%E6%9E%B6/</guid><description>&lt;p>Diplomacy将模块的Port抽象为节点(Node),然后进行协商，自动找到最优的线宽，以减少复用模块时需要修改的线宽代码&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 206;
flex-basis: 496px"
>
&lt;a href="https://VastCircle.github.io/2025/chisel_diplomacy%E6%A1%86%E6%9E%B6/image-20250110144009550.png" data-size="858x415">
&lt;img src="https://VastCircle.github.io/2025/chisel_diplomacy%E6%A1%86%E6%9E%B6/image-20250110144009550.png"
width="858"
height="415"
srcset="https://VastCircle.github.io/2025/chisel_diplomacy%E6%A1%86%E6%9E%B6/image-20250110144009550_hu13342639607822788397.png 480w, https://VastCircle.github.io/2025/chisel_diplomacy%E6%A1%86%E6%9E%B6/image-20250110144009550_hu10756195594024898727.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="节点">节点&lt;/h3>
&lt;p>Source Node :上级输入端口抽象的节点&lt;/p>
&lt;p>Nexus Node:当前端口的节点&lt;/p>
&lt;p>Sink Node:输出到下一个module的节点&lt;/p>
&lt;p>Node 的成员变量 ：&lt;/p>
&lt;p>in ,输入的端口序列&lt;/p>
&lt;p>out,输出的端口序列&lt;/p>
&lt;p>edges,输入输出参数&lt;/p>
&lt;h3 id="参数">参数&lt;/h3>
&lt;p>UpwardParam :表示从上层module传输过来的参数&lt;/p>
&lt;p>DownwardParam:表示传输到下层module的参数&lt;/p>
&lt;p>EdgeParam:表示当前module的参数&lt;/p>
&lt;h3 id="参数协商">参数协商&lt;/h3>
&lt;p>参数协商必须实现一个抽象接口SimpleNodeImp&lt;/p>
&lt;p>edge函数，完成参数的协商，并输出最终参数线宽&lt;/p>
&lt;p>bundle,输出实际的参数类型和线宽&lt;/p>
&lt;p>render,输出参数信息，用于查看分析&lt;/p>
&lt;h2 id="参数协商的加法器">参数协商的加法器&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 169;
flex-basis: 405px"
>
&lt;a href="https://VastCircle.github.io/2025/chisel_diplomacy%E6%A1%86%E6%9E%B6/image-20250110142103961.png" data-size="996x589">
&lt;img src="https://VastCircle.github.io/2025/chisel_diplomacy%E6%A1%86%E6%9E%B6/image-20250110142103961.png"
width="996"
height="589"
srcset="https://VastCircle.github.io/2025/chisel_diplomacy%E6%A1%86%E6%9E%B6/image-20250110142103961_hu2121043938663064800.png 480w, https://VastCircle.github.io/2025/chisel_diplomacy%E6%A1%86%E6%9E%B6/image-20250110142103961_hu6421885722182202836.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>为了展示拓扑参数化，实现思路如上图。将加法器的输入抽象成driver模块。实现操作的是adder模块。然后来一个checker模块，看看计算结果是不是正确。&lt;/p>
&lt;p>driver产生随机数，adder累加，checker看看加的是不是对，输出判断结果。&lt;/p>
&lt;p>其中driver的数目是可参数化的。结点之间传递的参数要经过协商，取小的值。&lt;/p>
&lt;h3 id="参数-1">参数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">UpwardParam&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">DownwardParam&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">EdgeParam&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="参数协商-1">参数协商&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">object&lt;/span> &lt;span style="color:#e5c07b">AdderNodeImp&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">SimpleNodeImp&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">DownwardParam&lt;/span>, &lt;span style="color:#e5c07b">UpwardParam&lt;/span>, &lt;span style="color:#e5c07b">EdgeParam&lt;/span>, &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">edge&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pd&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">DownwardParam&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pu&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UpwardParam&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">sourceInfo&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">SourceInfo&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pd&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">pu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">EdgeParam&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pd&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">EdgeParam&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">bundle&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">EdgeParam&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">render&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">EdgeParam&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RenderedEdge&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;blue&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">s&amp;#34;width = &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="节点-1">节点&lt;/h3>
&lt;h4 id="驱动节点">驱动节点&lt;/h4>
&lt;p>驱动器节点的参数是Seq，因为它输出到加法器和监控器两个节点。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/** node for [[AdderDriver]] (source) */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">AdderDriverNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">widths&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">DownwardParam&lt;/span>&lt;span style="color:#56b6c2">])(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">valName&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">ValName&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">SourceNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">AdderNodeImp&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">widths&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="监控器节点">监控器节点&lt;/h4>
&lt;p>Monitor有3个节点，每个节点只有一个输入参数，但是最终SinkNode模块依然要转为Seq类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/** node for [[AdderMonitor]] (sink) */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">AdderMonitorNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UpwardParam&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">valName&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">ValName&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">SinkNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">AdderNodeImp&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="加法器节点">加法器节点&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/** node for [[Adder]] (nexus) */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">AdderNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dFn&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">DownwardParam&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">DownwardParam&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">uFn&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UpwardParam&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">UpwardParam&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">valName&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">ValName&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">NexusNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">AdderNodeImp&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">dFn&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">uFn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="加法器电路">加法器电路&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/** adder DUT (nexus) */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Adder&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">node&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">AdderNode&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e06c75">dps&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">DownwardParam&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dps&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">forall&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dp&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">dp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">dps&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#98c379">&amp;#34;inward, downward adder widths must be equivalent&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dps&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e06c75">ups&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UpwardParam&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ups&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">forall&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">up&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">up&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">ups&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#98c379">&amp;#34;outward, upward adder widths must be equivalent&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ups&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// node元组的第一个元素存放着真实的信号，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">module&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">LazyModuleImp&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">unzip&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reduce&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">desiredName&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Adder&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="驱动器电路">驱动器电路&lt;/h4>
&lt;p>驱动器电路有一个节点，节点有numOutputs个输出，&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/** driver (source)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * drives one random number on multiple outputs */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">AdderDriver&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">numOutputs&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">node&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">AdderDriverNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numOutputs&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e5c07b">DownwardParam&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">module&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">LazyModuleImp&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// check that node parameters converge after negotiation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">negotiatedWidths&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">edges&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">negotiatedWidths&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">forall&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">negotiatedWidths&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#98c379">&amp;#34;outputs must all have agreed on same width&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">finalWidth&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">negotiatedWidths&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// generate random addend (notice the use of the negotiated width)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">randomAddend&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">FibonacciLFSR&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">maxPeriod&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">finalWidth&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// drive signals
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addend&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">addend&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">randomAddend&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">desiredName&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;AdderDriver&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="监控器">监控器&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/** monitor (sink) */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">AdderMonitor&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">numOperands&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">nodeSeq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numOperands&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">AdderMonitorNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UpwardParam&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">nodeSum&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">AdderMonitorNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">UpwardParam&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">module&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">LazyModuleImp&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">io&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">IO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Bundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">error&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// print operation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">printf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">nodeSeq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">node&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#98c379">&amp;#34;${node.in.head._1}&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">reduce&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#98c379">&amp;#34; + &amp;#34;&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#98c379">&amp;#34; = ${nodeSum.in.head._1}&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// basic correctness checking
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">error&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nodeSum&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e06c75">nodeSeq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">reduce&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">desiredName&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;AdderMonitor&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="顶层module">顶层module&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/** top-level connector */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">AdderTestHarness&lt;/span>&lt;span style="color:#56b6c2">()(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">numOperands&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">adder&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Adder&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 8 will be the downward-traveling widths from our drivers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">drivers&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">numOperands&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">AdderDriver&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">numOutputs&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 4 will be the upward-traveling width from our monitor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">monitor&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">AdderMonitor&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">numOperands&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">numOperands&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// create edges via binding operators between nodes in order to define a complete graph
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">drivers&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">driver&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">adder&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">node&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">driver&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">node&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">drivers&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zip&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">monitor&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">nodeSeq&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">driver&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">monitorNode&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">monitorNode&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">driver&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">node&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">monitor&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">nodeSum&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">adder&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">module&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">LazyModuleImp&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">monitor&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">module&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">error&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">printf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;something went wrong&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">desiredName&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;AdderTestHarness&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/feihe0755/article/details/142212505?spm=1001.2101.3001.6650.1&amp;amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7Ebaidujs_baidulandingword%7ECtr-1-142212505-blog-122988408.235%5Ev43%5Epc_blog_bottom_relevance_base9&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7Ebaidujs_baidulandingword%7ECtr-1-142212505-blog-122988408.235%5Ev43%5Epc_blog_bottom_relevance_base9&amp;amp;utm_relevant_index=2" target="_blank" rel="noopener"
>chisel开发diplomacy框架&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/366476459" target="_blank" rel="noopener"
>chisel初体验-高级参数化&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/qq_39507748/article/details/120587159?spm=1001.2101.3001.6650.2&amp;amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-2-120587159-blog-142212505.235%5Ev43%5Epc_blog_bottom_relevance_base9&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-2-120587159-blog-142212505.235%5Ev43%5Epc_blog_bottom_relevance_base9&amp;amp;utm_relevant_index=5" target="_blank" rel="noopener"
>chisel相比verilog的优势——diplomacy&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>笔记</title><link>https://VastCircle.github.io/2025/%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 08 Jan 2025 15:51:40 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>大语言模型加速器&lt;/p>
&lt;p>llm for chip design&lt;/p>
&lt;p>全加操作&lt;/p>
&lt;p>内存利用率&lt;/p>
&lt;p>稀疏&lt;/p>
&lt;p>稀疏度要很高才可以打平这个帐&lt;/p>
&lt;p>a55&lt;/p>
&lt;p>协处理器&lt;/p>
&lt;p>共享share的l1&lt;/p>
&lt;p>smt提供一个核&lt;/p>
&lt;p>希望某一些数据不要被踢走&lt;/p>
&lt;p>DVR&lt;/p>
&lt;p>内存ECC&lt;/p>
&lt;p>可靠性&lt;/p>
&lt;p>ARM R系列 汽车芯片&lt;/p>
&lt;p>google 60%的处理器错误无法检测&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山源代码剖析——存储子系统与Tilelink</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/</link><pubDate>Tue, 07 Jan 2025 23:02:49 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/</guid><description>&lt;h2 id="简介">简介&lt;/h2>
&lt;p>根据操作的目的和作用，可以把 Link 上的操作分成三大类：&lt;/p>
&lt;p>A 类， A 表示 Access 。凡用来从存储器读写数据的操作都属于 A 类，具体有 Get 、 Put 、 Atomic 等。&lt;/p>
&lt;p>H 类， H 表示 Hint 。用于预示即将访问的存储区域，属于这一类的操作只有 Intent （意图）。&lt;/p>
&lt;p>T 类， T 表示 Transfer ，用来在设备（节点）间迁移缓存数据块或改变其使用权限，具体有 Acquire 和 Release 等。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 109;
flex-basis: 262px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20250107231156535.png" data-size="911x834">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20250107231156535.png"
width="911"
height="834"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20250107231156535_hu10667389775857891852.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20250107231156535_hu2536061788417372235.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>acquire(获取)，release(释放)，probe(强制废除)&lt;/p>
&lt;p>操作权限的下降由下方节点对上方节点发出，下降由下方节点对上方节点发出&lt;/p>
&lt;p>从设备是根，主设备要去访问从设备的地址，下面的图实际上主设备没有画出来&lt;/p>
&lt;p>Nothing: 当前不缓存数据副本的节点。既没有读权限，也没有写权限。&lt;/p>
&lt;p>Trunk :具有缓存副本的节点，位于 Tip 和 Root 之间的路径上。对副本既没有读权限，也没有写权限。对于提示处发生的写入，该副本可能已过时。&lt;/p>
&lt;p>Tip（with no Branches）:具有缓存副本的节点，用作内存访问序列化点。对其副本具有读/写权限，该副本可能包含脏数据。&lt;/p>
&lt;p>Tip（with Branches）:具有缓存副本的节点，用作写入序列化点。对其副本具有读取和写入权限，该副本可能包含过去写入的脏数据。&lt;/p>
&lt;p>Branch: 具有位于提示上方的缓存副本的节点。对其副本具有只读权限。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 421;
flex-basis: 1012px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20250107233550644.png" data-size="873x207">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20250107233550644.png"
width="873"
height="207"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20250107233550644_hu12233268822795284868.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20250107233550644_hu12825668928755378385.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 149;
flex-basis: 357px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20241122165832557.png" data-size="480x322">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20241122165832557.png"
width="480"
height="322"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20241122165832557_hu5086166827793620406.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20241122165832557_hu5752016001538414188.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>“TT”代 表 Trunk Tip（最靠近主设备的结点），“T”代 表 Trunk，“B”代表Branch。&lt;/p>
&lt;p>从A-&amp;gt;B,是其中一个主设备发起了请求，此时整条路径会从N-&amp;gt;T,通过A,D通道就能够实现，如果主设备向TT写数据，只要通过A通道发起PutFullData或者PutParitialData就可以了&lt;/p>
&lt;p>此时如果第二个主设备发起访存，就会到c的情况，TT节点变成了B,不能写了，因为此时两个master是同时共享了缓存块，只有分叉点才可读可写，但实际上是无法跨过去的 ，此时 T-&amp;gt;B ,发起权限转变的是交叉点，通过B通道向上发起ProbePerm，如果c要写入的化，那就c-&amp;gt;b,把设备2的路径作废，并且写的设备要下沉到TT才可以（竟然不是需要了再回写），&lt;/p>
&lt;p>Release只能通过C通道发起&lt;/p>
&lt;p>对于d图，设备3加入，此时设备A放弃了缓存，此时首先要强制TT回写到新的分叉点&lt;/p>
&lt;p>N 无， B可读 ，T可读可写&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 303;
flex-basis: 727px"
>
&lt;a href="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20250108000239580.png" data-size="773x255">
&lt;img src="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20250108000239580.png"
width="773"
height="255"
srcset="https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20250108000239580_hu1184381018833175489.png 480w, https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90%E5%AD%98%E5%82%A8%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%8Etilelink/image-20250108000239580_hu10846378078455119179.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="代码">代码&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">abstract&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">TLBundleBase&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">GenericParameterizedBundle&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 有确定的sink和source
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addressBits&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dataBits&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sourceBits&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sinkBits&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sizeBits&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">echoFields&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">BundleFieldBase&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">requestFields&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">BundleFieldBase&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">responseFields&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">BundleFieldBase&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hasBCE&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Chisel has issues with 0-width wires
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">require&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addressBits&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dataBits&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sourceBits&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sinkBits&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sizeBits&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">isPow2&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dataBits&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">echoFields&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">f&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">require&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">f&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">key&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isControl&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">s&amp;#34;&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">f&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379"> is not a legal echo field&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addrLoBits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dataBits&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">union&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">max&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addressBits&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addressBits&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">max&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dataBits&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dataBits&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">max&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sourceBits&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sourceBits&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">max&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sinkBits&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sinkBits&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">max&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sizeBits&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sizeBits&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">echoFields&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">BundleField&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">union&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">echoFields&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">echoFields&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">requestFields&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">BundleField&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">union&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">requestFields&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">requestFields&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">responseFields&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">BundleField&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">union&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">responseFields&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">responseFields&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hasBCE&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">hasBCE&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在TLBundleBase(和TLBundleParameters)的基础上定义trait TLCannel , 派生出TLDataChannel 和 TLAddrChannel&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">sealed&lt;/span> &lt;span style="color:#c678dd">trait&lt;/span> &lt;span style="color:#e5c07b">TLChannel&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">TLBundleBase&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">channelName&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">sealed&lt;/span> &lt;span style="color:#c678dd">trait&lt;/span> &lt;span style="color:#e5c07b">TLDataChannel&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">TLChannel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">sealed&lt;/span> &lt;span style="color:#c678dd">trait&lt;/span> &lt;span style="color:#e5c07b">TLAddrChannel&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">TLDataChannel&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">final&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">TLBundleA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">TLBundleBase&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">TLAddrChannel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">channelName&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#39;A&amp;#39; channel&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// fixed fields during multibeat:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">opcode&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">3.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">param&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">TLAtomics&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">aWidth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">TLHints&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">max&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// amo_opcode || grow perms || hint
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sizeBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">source&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sourceBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// from
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">address&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addressBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">user&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">BundleMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">requestFields&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">echo&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">BundleMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">echoFields&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// variable fields during multibeat:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dataBits&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dataBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">corrupt&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#7f848e">// only applies to *Data messages
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 报文及操作符的定义
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">object&lt;/span> &lt;span style="color:#e5c07b">TLMessages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// A B C D E
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">PutFullData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . . =&amp;gt; AccessAck
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">PutPartialData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . . =&amp;gt; AccessAck
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">ArithmeticData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . . =&amp;gt; AccessAckData
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">LogicalData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">3.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . . =&amp;gt; AccessAckData
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">Get&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">4.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . . =&amp;gt; AccessAckData
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">Hint&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">5.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . . =&amp;gt; HintAck
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">AcquireBlock&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">6.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . =&amp;gt; Grant[Data]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">AcquirePerm&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">7.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . =&amp;gt; Grant[Data]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">Probe&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">6.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . =&amp;gt; ProbeAck[Data]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">AccessAck&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . .
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">AccessAckData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . .
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">HintAck&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . .
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">ProbeAck&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">4.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// .
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">ProbeAckData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">5.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// .
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">Release&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">6.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . =&amp;gt; ReleaseAck
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">ReleaseData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">7.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . =&amp;gt; ReleaseAck
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">Grant&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">4.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . =&amp;gt; GrantAck
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">GrantData&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">5.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// . =&amp;gt; GrantAck
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">ReleaseAck&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">6.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// .
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">GrantAck&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#7f848e">// .
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e5c07b">AcquirePerm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isB&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e5c07b">Probe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isC&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e5c07b">ReleaseData&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isD&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e5c07b">ReleaseAck&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">adResponse&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">AccessAck&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">AccessAck&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">AccessAckData&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">AccessAckData&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">AccessAckData&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">HintAck&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Grant&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Grant&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">bcResponse&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">AccessAck&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">AccessAck&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">AccessAckData&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">AccessAckData&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">AccessAckData&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">HintAck&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">ProbeAck&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">ProbeAck&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;PutFullData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;PutPartialData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;ArithmeticData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLAtomics&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">ArithMsg&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;LogicalData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLAtomics&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">LogicMsg&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Get&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Hint&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLHints&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">HintsMsg&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;AcquireBlock&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgGrow&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;AcquirePerm&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgGrow&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;PutFullData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;PutPartialData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;ArithmeticData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLAtomics&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">ArithMsg&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;LogicalData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLAtomics&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">LogicMsg&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Get&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Hint&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLHints&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">HintsMsg&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Probe&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgCap&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;AccessAck&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;AccessAckData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;HintAck&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Invalid Opcode&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;ProbeAck&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReport&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;ProbeAckData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReport&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Release&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReport&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;ReleaseData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReport&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;AccessAck&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;AccessAckData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;HintAck&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Invalid Opcode&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Grant&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgCap&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;GrantData&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgCap&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;ReleaseAck&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e5c07b">TLPermissions&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">object&lt;/span> &lt;span style="color:#e5c07b">TLPermissions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">aWidth&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">bdWidth&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cWidth&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Cap types (Grant = new permissions, Probe = permisions &amp;lt;= target)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">toT&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bdWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">toB&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bdWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">toN&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bdWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isCap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">toN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Grow types (Acquire = permissions &amp;gt;= target)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">NtoB&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">aWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">NtoT&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">aWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">BtoT&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">aWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isGrow&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e5c07b">BtoT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Shrink types (ProbeAck, Release)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">TtoB&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">TtoN&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">BtoN&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isShrink&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e5c07b">BtoN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Report types (ProbeAck, Release)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">TtoT&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">3.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">BtoB&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">4.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">NtoN&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">5.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cWidth&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isReport&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e5c07b">NtoN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">PermMsgGrow&lt;/span>&lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Grow NtoB&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;Grow NtoT&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;Grow BtoT&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">PermMsgCap&lt;/span>&lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Cap toT&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;Cap toB&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;Cap toN&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">PermMsgReport&lt;/span>&lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Shrink TtoB&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;Shrink TtoN&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;Shrink BtoN&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;Report TotT&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;Report BtoB&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;Report NtoN&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">PermMsgReserved&lt;/span>&lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Reserved&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">object&lt;/span> &lt;span style="color:#e5c07b">TLAtomics&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">width&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Arithmetic types
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">MIN&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">MAX&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">MINU&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">MAXU&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">3.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">ADD&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">4.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isArithmetic&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e5c07b">ADD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Logical types
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">XOR&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">OR&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">AND&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">SWAP&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">3.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isLogical&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e5c07b">SWAP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">ArithMsg&lt;/span>&lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;MIN&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;MAX&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;MINU&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;MAXU&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;ADD&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">LogicMsg&lt;/span>&lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;XOR&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;OR&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;AND&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;SWAP&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">object&lt;/span> &lt;span style="color:#e5c07b">TLHints&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">width&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">PREFETCH_READ&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">PREFETCH_WRITE&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">width&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isHints&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e5c07b">PREFETCH_WRITE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">HintsMsg&lt;/span>&lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;PrefetchRead&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;PrefetchWrite&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">TLBundle&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">Record&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Emulate a Bundle with elements abcde or ad depending on params.hasBCE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 因为通道不一定存在，所以通过opt先确定通道是否存在，然后在创建
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">optA&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// Some表示必须要
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">optB&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">hasBCE&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">option&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Flipped&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleB&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">optC&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">hasBCE&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">option&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleC&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">optD&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Some&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Flipped&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleD&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">optE&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">hasBCE&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">option&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleE&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">DecoupledIO&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">TLBundleA&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">optA&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getOrElse&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">WireDefault&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">DecoupledIO&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">TLBundleB&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">optB&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getOrElse&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">WireDefault&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleB&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">DecoupledIO&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">TLBundleC&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">optC&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getOrElse&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">WireDefault&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleC&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">DecoupledIO&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">TLBundleD&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">optD&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getOrElse&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">WireDefault&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleD&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">DecoupledIO&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">TLBundleE&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">optE&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getOrElse&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">WireDefault&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleE&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">cloneType&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">this.&lt;/span>&lt;span style="color:#c678dd">type&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundle&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">asInstanceOf&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">this.&lt;/span>&lt;span style="color:#c678dd">type&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">elements&lt;/span> &lt;span style="color:#c678dd">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">hasBCE&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">ListMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;e&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;d&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;c&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;b&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;a&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">ListMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;d&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;a&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">tieoff&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Unit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">DataMirror&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">specifiedDirectionOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">match&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">SpecifiedDirection&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">Input&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#e5c07b">SpecifiedDirection&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">Output&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">object&lt;/span> &lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">emptyBundleParams&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addressBits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dataBits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sourceBits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sinkBits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sizeBits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">echoFields&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Nil&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">requestFields&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Nil&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">responseFields&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Nil&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hasBCE&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">union&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foldLeft&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">emptyBundleParams&lt;/span>&lt;span style="color:#56b6c2">)((&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">y&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">union&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">y&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">master&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLMasterPortParameters&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLSlavePortParameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">addressBits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">maxAddress&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dataBits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">beatBytes&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sourceBits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">master&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">endSourceId&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sinkBits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">endSinkId&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sizeBits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Ceil&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">max&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">master&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">maxTransfer&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">maxTransfer&lt;/span>&lt;span style="color:#56b6c2">))+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">echoFields&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">master&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">echoFields&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">requestFields&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">BundleField&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">accept&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">master&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">requestFields&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">requestKeys&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">responseFields&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">BundleField&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">accept&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">responseFields&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">master&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">responseKeys&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">hasBCE&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">master&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">anySupportProbe&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">anySupportAcquireB&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">TLMasterPortParameters&lt;/span> &lt;span style="color:#c678dd">private&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">masters&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">TLMasterParameters&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">channelBytes&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLChannelBeatBytes&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">minLatency&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">echoFields&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">BundleFieldBase&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">requestFields&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">BundleFieldBase&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">responseKeys&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">BundleKeyBase&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些参数是需要经过一系列的参数协调的，总的TLBundle的生成路径是&lt;/p>
&lt;p>有待创建的 TLBundle 连接 Master 和 Slave 双方， Master 要有一组 TLMasterParameter , Slave 一方则要有一组 TLSlaveParameter&lt;/p>
&lt;p>首先是 Master 和 Slave 双方 TLMasterParameters 和 TLSlaveParamete 的创建。&lt;/p>
&lt;p>在此基础上创建原始的 TLMasterPortParameters 和 TLSlavePortParameters 。&lt;/p>
&lt;p>通过 Diplomacy 在原始 TLMasterPortParameters 和 TLSlavePortParameters 之间进行协调。根据协调后的 TLMasterPortParameters 和 TLSlavePortParameters 创建 TLBundleParameters 。&lt;/p>
&lt;p>根据所创建的 TLBundleParameters 创建 TLBundle 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">TLEdgeParameters&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">master&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLMasterPortParameters&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLSlavePortParameters&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sourceInfo&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">SourceInfo&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">FormatEdge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// legacy names:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">manager&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">slave&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">client&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">maxTransfer&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">max&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">master&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">maxTransfer&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">maxTransfer&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">maxLgSize&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">log2Ceil&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">maxTransfer&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Sanity check the link...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">require&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">maxTransfer&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">beatBytes&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">s&amp;#34;Link&amp;#39;s max transfer (&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">maxTransfer&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">) &amp;lt; &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">slaves&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">name&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">&amp;#39;s beatBytes (&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">beatBytes&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">)&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">diplomaticClaimsMasterToSlave&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">master&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">anyEmitClaims&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">intersect&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">anySupportClaims&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">bundle&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">master&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">formatEdge&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">master&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">infoString&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#98c379">&amp;#34;\n&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">slave&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">infoString&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">TLEdge&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">client&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLClientPortParameters&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLManagerPortParameters&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sourceInfo&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">SourceInfo&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">TLEdgeParameters&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">client&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">sourceInfo&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>TLEdge是对于TLEdgeParameters的扩展，&lt;code>TLEdge&lt;/code> 类提供了丰富的功能，用于处理 TileLink 协议中消息的各种操作。它包含对不同类型 &lt;strong>TLBundle&lt;/strong>（A、B、C、D、E）消息的处理方法，涵盖了是否携带数据、是否为请求或响应、消息的大小、数据等信息。&lt;/p>
&lt;p>&lt;strong>&lt;code>isAligned(address: UInt, lgSize: UInt): Bool&lt;/code>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>检查给定的地址是否与数据传输的大小对齐。&lt;/li>
&lt;li>它根据 &lt;code>lgSize&lt;/code> 生成一个掩码，并将其与 &lt;code>address&lt;/code> 进行比较以确定对齐。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>mask(address: UInt, lgSize: UInt): UInt&lt;/code>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>根据 &lt;code>address&lt;/code> 和 &lt;code>lgSize&lt;/code> 生成一个掩码，该掩码用于 TileLink 通信。它调用 &lt;code>MaskGen&lt;/code> 来生成该掩码。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>staticHasData(bundle: TLChannel): Option[Boolean]&lt;/code>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>检查特定的 &lt;strong>TLBundle&lt;/strong>（A、B、C、D 或 E）是否静态地携带数据，这取决于 &lt;code>client&lt;/code> 或 &lt;code>manager&lt;/code> 的能力。&lt;/li>
&lt;li>例如，某些类型的 &lt;strong>TLBundleA&lt;/strong> 消息可能包含数据，具体取决于管理器是否支持算术、逻辑操作或特定的读/写操作。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>isRequest(x: TLChannel): Bool&lt;/code>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>确定给定的 &lt;strong>TLChannel&lt;/strong>（它可以是 A、B、C、D 或 E 类型的包）是否表示请求消息。&lt;/li>
&lt;li>例如，&lt;strong>TLBundleA&lt;/strong>、&lt;strong>TLBundleB&lt;/strong> 和特定的 &lt;strong>TLBundleC/D&lt;/strong> 消息是请求，而 &lt;strong>TLBundleE&lt;/strong> 不是请求。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>isResponse(x: TLChannel): Bool&lt;/code>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>与 &lt;code>isRequest&lt;/code> 方法相反，检查给定的通道是否表示响应消息。例如，&lt;strong>TLBundleD&lt;/strong> 和 &lt;strong>TLBundleE&lt;/strong> 是响应消息。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>hasData(x: TLChannel): Bool&lt;/code>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>检查给定的 &lt;strong>TLChannel&lt;/strong> 是否包含数据。该方法结合了静态检查（通过 &lt;code>staticHasData&lt;/code>）和基于消息 &lt;code>opcode&lt;/code> 的动态检查。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>opcode(x: TLDataChannel): UInt&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>param(x: TLDataChannel): UInt&lt;/code>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>这两个方法分别返回给定 &lt;strong>TLDataChannel&lt;/strong> 的 &lt;code>opcode&lt;/code> 和 &lt;code>param&lt;/code> 字段。这些字段用于标识事务类型（例如，读、写、获取等）及其相关参数。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>size(x: TLDataChannel): UInt&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>data(x: TLDataChannel): UInt&lt;/code>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>这些方法分别获取给定 &lt;strong>TLDataChannel&lt;/strong> 的 &lt;code>size&lt;/code> 和 &lt;code>data&lt;/code> 字段，这对于确定传输数据的大小和实际数据内容至关重要。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>corrupt(x: TLDataChannel): Bool&lt;/code>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>检查给定的 &lt;strong>TLDataChannel&lt;/strong> 是否设置了损坏标志，这表示该事务在传输过程中可能已被损坏。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>mask(x: TLAddrChannel): UInt&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>full_mask(x: TLAddrChannel): UInt&lt;/code>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>这些方法返回地址通道的 &lt;code>mask&lt;/code>，它在 TileLink 中用于地址的筛选和特定位的过滤。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>numBeats(x: TLChannel): UInt&lt;/code>&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>该方法计算 TileLink 消息传输所需的节拍数。在 TileLink 协议中，消息的传输是按节拍进行的，方法根据消息大小、数据是否携带以及其他参数来计算所需的节拍数。&lt;/li>
&lt;/ul>
&lt;p>TLEdgeOut和TLEdgeIn又是对于TLEdge的补充，包含着报文的具体实现函数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e5c07b">Put&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">fromSource&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">toAddress&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">lgSize&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">data&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">corrupt&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">TLBundleA&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">anySupportPutFull&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">s&amp;#34;TileLink: No managers visible from this edge support Puts, but one of these clients would try to request one: &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">client&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">clients&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">legal&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">supportsPutFullFast&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">toAddress&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">lgSize&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">bundle&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">opcode&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">TLMessages&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">PutFullData&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">param&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">lgSize&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">fromSource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">address&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">toAddress&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">toAddress&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">lgSize&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">corrupt&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">corrupt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">legal&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tlbuffer">TLBuffer&lt;/h2>
&lt;p>就是一个队列，用于对数据进行缓冲的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">TLBuffer&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ace&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">bd&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ace&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">bd&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">ace&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">bd&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">ace&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">abcde&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">abcde&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">abcde&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">()(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">default&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">node&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBufferNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">module&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Impl&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Impl&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">LazyModuleImp&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// node.in 和 node.out都是二元组，（in,edgein) (out,edgeOut) , 分别对应具体输入端口和输入参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">edgeIn&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">edgeOut&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 为输入创建一个队列a连接到输出a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">edgeOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">anySupportAcquireB&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">edgeOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">client&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">anySupportProbe&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// 如果支持TL-C
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">e&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 说明in是一个slave , out是一个master
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">depth&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">flow&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pipe&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Boolean&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">depth&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;Buffer depth must be &amp;gt;= 0&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">isDefined&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">depth&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">latency&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">isDefined&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">flow&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// flow 表示，只要队列为空，数据不进队列，直接可以通过出口出去
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// pipe表示每从队列出去一个数据就允许进入一个数据 ，应该主要是如果满了，在deq_ready的当前周期就允许输入数据了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">Data&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">DecoupledIO&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span> &lt;span style="color:#c678dd">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">isDefined&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Queue&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">depth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">flow&lt;/span>&lt;span style="color:#c678dd">=&lt;/span>&lt;span style="color:#e06c75">flow&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pipe&lt;/span>&lt;span style="color:#c678dd">=&lt;/span>&lt;span style="color:#e06c75">pipe&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">irrevocable&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">Data&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">ReadyValidIO&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span> &lt;span style="color:#c678dd">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">isDefined&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Queue&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">irrevocable&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">depth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">flow&lt;/span>&lt;span style="color:#c678dd">=&lt;/span>&lt;span style="color:#e06c75">flow&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pipe&lt;/span>&lt;span style="color:#c678dd">=&lt;/span>&lt;span style="color:#e06c75">pipe&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">sq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">Data&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">DecoupledIO&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span> &lt;span style="color:#c678dd">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">isDefined&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">sq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Module&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">ShiftQueue&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">depth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">flow&lt;/span>&lt;span style="color:#c678dd">=&lt;/span>&lt;span style="color:#e06c75">flow&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">pipe&lt;/span>&lt;span style="color:#c678dd">=&lt;/span>&lt;span style="color:#e06c75">pipe&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">toString&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;BufferParams:%d%s%s&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">format&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">depth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">flow&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#98c379">&amp;#34;F&amp;#34;&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pipe&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#98c379">&amp;#34;P&amp;#34;&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 参数协调
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">TLBufferNode&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">valName&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">ValName&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">TLAdapterNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">clientFn&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">p&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">v1copy&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">minLatency&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">minLatency&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">latency&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">latency&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">managerFn&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">p&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">v1copy&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">minLatency&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">minLatency&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">latency&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">latency&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">nodedebugstring&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#98c379">s&amp;#34;a:&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">toString&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">, b:&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">toString&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">, c:&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">toString&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">, d:&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">toString&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">, e:&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">toString&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">circuitIdentity&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">List&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">forall&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">none&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">object&lt;/span> &lt;span style="color:#e5c07b">TLBuffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLNode&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">default&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">abcde&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLNode&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">abcde&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">abcde&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ace&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">bd&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLNode&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ace&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">bd&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">ace&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">bd&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">ace&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">BufferParams&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLNode&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">buffer&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBuffer&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">buffer&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">node&lt;/span> &lt;span style="color:#7f848e">// 返回的是一个node,TLBufferNode
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">chain&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">depth&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">name&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Option&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">TLNode&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">buffers&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">depth&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBuffer&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">buffers&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">suggestName&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">s&amp;#34;&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">n&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">_&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">buffers&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">chainNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">depth&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">name&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Option&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">String&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLNode&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">chain&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">depth&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">name&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reduceLeftOption&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">*=*&lt;/span> &lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getOrElse&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">TLNameNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;no_buffer&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tlxbar">TLXbar&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">TLXbar&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLArbiter.Policy&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">TLArbiter&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">roundRobin&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">node&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLNexusNode&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">clientFn&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">seq&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">v1copy&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">echoFields&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">BundleField&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">union&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">flatMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">echoFields&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">requestFields&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">BundleField&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">union&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">flatMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">requestFields&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">responseKeys&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">flatMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">responseKeys&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">distinct&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">minLatency&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">minLatency&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">min&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">clients&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">TLXbar&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mapInputIds&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">flatMap&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">range&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">port&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">port&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">clients&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">client&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">client&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">v1copy&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sourceId&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">client&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sourceId&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">shift&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">range&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">start&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">managerFn&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">seq&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fifoIdFactory&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">TLXbar&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">relabeler&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">v1copy&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">responseFields&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">BundleField&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">union&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">flatMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">responseFields&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">requestKeys&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">flatMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">requestKeys&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">distinct&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">minLatency&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">minLatency&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">min&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">endSinkId&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">TLXbar&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mapOutputIds&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">end&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">max&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">managers&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">flatMap&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">port&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">require&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">port&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">beatBytes&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">beatBytes&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">s&amp;#34;Xbar (&lt;/span>&lt;span style="color:#98c379">$name&lt;/span>&lt;span style="color:#98c379"> with parent &lt;/span>&lt;span style="color:#98c379">$parent&lt;/span>&lt;span style="color:#98c379">) data widths don&amp;#39;t match: &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">port&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">managers&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">name&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379"> has &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">port&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">beatBytes&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">B vs &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">managers&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">name&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379"> has &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">beatBytes&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">B&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fifoIdMapper&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">fifoIdFactory&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">port&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">managers&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">manager&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">v1copy&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fifoId&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fifoId&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">fifoIdMapper&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">circuitIdentity&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">outputs&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">inputs&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">module&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Impl&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Impl&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">LazyModuleImp&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#d19a66">32&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">println&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">s&amp;#34;!!! WARNING !!!&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">println&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">s&amp;#34; Your TLXbar (&lt;/span>&lt;span style="color:#98c379">$name&lt;/span>&lt;span style="color:#98c379"> with parent &lt;/span>&lt;span style="color:#98c379">$parent&lt;/span>&lt;span style="color:#98c379">) is very large, with &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379"> Masters and &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379"> Slaves.&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">println&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">s&amp;#34;!!! WARNING !!!&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">TLXbar&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">circuit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">node&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 创建了一个TLXbar
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">object&lt;/span> &lt;span style="color:#e5c07b">TLXbar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">circuit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLArbiter.Policy&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">seqIn&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[(&lt;/span>&lt;span style="color:#e5c07b">TLBundle&lt;/span>, &lt;span style="color:#e5c07b">TLEdge&lt;/span>&lt;span style="color:#56b6c2">)],&lt;/span> &lt;span style="color:#e06c75">seqOut&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[(&lt;/span>&lt;span style="color:#e5c07b">TLBundle&lt;/span>, &lt;span style="color:#e5c07b">TLEdge&lt;/span>&lt;span style="color:#56b6c2">)])&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Unit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">seqOut_ACancel&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">seqOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sOut&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundle_ACancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span> &lt;span style="color:#e06c75">sOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_2&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">seqIn_ACancel&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">seqIn&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sIn&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">TLBundle_ACancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sIn&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">sIn&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_2&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 调用TLXbar_ACancel.circule来对新生成的对象进行创建
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">TLXbar_ACancel&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">circuit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">seqIn_ACancel&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">seqOut_ACancel&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// seqOut_Acencel是一个[TLBundle_ACancel,TLEdge]对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">seqOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">seqOut_ACancel&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sOut&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">sOut_ACancel&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sOut&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">sOut_ACancel&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asDecoupled&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLArbiter.Policy&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">TLArbiter&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">roundRobin&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLNode&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">xbar&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLXbar&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">xbar&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">mapInputIds&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ports&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">TLMasterPortParameters&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">assignRanges&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ports&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">endSourceId&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">mapOutputIds&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ports&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">TLSlavePortParameters&lt;/span> &lt;span style="color:#56b6c2">])&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">assignRanges&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ports&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">endSinkId&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">assignRanges&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sizes&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">pow2Sizes&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">sizes&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">z&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">z&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">log2Ceil&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">z&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">tuples&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">pow2Sizes&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sortBy&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// record old index, then sort by increasing size
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">starts&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">tuples&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">scanRight&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">tail&lt;/span> &lt;span style="color:#7f848e">// suffix-sum of the sizes = the start positions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ranges&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tuples&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">starts&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">sz&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">st&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sz&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">IdRange&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">IdRange&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">st&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">st&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#e06c75">sz&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ranges&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sortBy&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_2&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// Restore original order
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">relabeler&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">var&lt;/span> &lt;span style="color:#e06c75">idFactory&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">fifoMap&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">scala&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">collection&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mutable&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">HashMap&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">empty&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">Int&lt;/span>, &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">fifoMap&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">contains&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#e06c75">fifoMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">out&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">idFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">idFactory&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">idFactory&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fifoMap&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Replicate an input port to each output port
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">fanout&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">TLChannel&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">DecoupledIO&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e06c75">select&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e06c75">force&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">Boolean&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Nil&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">DecoupledIO&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">]]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">filtered&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">select&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">chiselTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">select&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">filtered&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">force&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">lift&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">getOrElse&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#e5c07b">IdentityModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">filtered&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">select&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">select&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">select&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">filtered&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">filtered&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ReadyValidCancel机制:发送方有两个信号线 earlyValid和lateCancel,发送方在可能有信号发送的时候就发起earlyValid,但是统发发送lateCancel就可以取消报文&lt;/p>
&lt;p>在xbar中， 当有多路输入同时发起信号传输的时候，十字开关的仲裁器就可以选择其中的一路，指向被选中的那一路中继来自输出端的ready信号&lt;/p>
&lt;p>通过Bundle可以扩充ValidCancel&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">ValidCancel&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">+T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">Data&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">Bundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">earlyValid&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">lateCancel&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">validQual&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">earlyValid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">lateCancel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/** Down-converts a ValidCancel output to a Valid bundle, dropping early/late timing split. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">andNotCancel&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Valid&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">out&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Valid&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">validQual&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">object&lt;/span> &lt;span style="color:#e5c07b">ValidCancel&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/** Wraps some Data with a ValidCancel interface. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">Data&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">ValidCancel&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">ValidCancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/** A [[Bundle]] containing &amp;#39;earlyValid&amp;#39;, &amp;#39;lateCancel&amp;#39;, and &amp;#39;ready&amp;#39; signals that handshake
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * the transfer of data stored in the &amp;#39;bits&amp;#39; subfield.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * The base protocol implied by the directionality is that
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * the producer uses the interface as-is (outputs bits)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * while the consumer uses the flipped interface (inputs bits).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * @param gen the type of data to be wrapped in Ready/Valid/Cancel
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">ReadyValidCancel&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">+T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">Data&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">ValidCancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Input&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">mightFire&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">earlyValid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">fire&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">validQual&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/** Down-converts a ReadyValidCancel output to a DecoupledIO bundle, dropping early/late timing split. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">asDecoupled&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">DecoupledIO&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">out&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">DecoupledIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">validQual&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">object&lt;/span> &lt;span style="color:#e5c07b">ReadyValidCancel&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/** Wraps some Data with a ReadyValidCancel interface. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">Data&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">ReadyValidCancel&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">ReadyValidCancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">gen&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/** Up-converts a ReadyValid to a ReadyValidCancel, assuming conservative timing. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">Data&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">ReadyValidIO&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">ReadyValidCancel&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">out&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">ReadyValidCancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">chiselTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">earlyValid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">lateCancel&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以TLBundle_ACancel如下所示&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">TLBundle_ACancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">Record&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">ReadyValidCancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Flipped&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleB&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleC&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Flipped&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleD&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">e&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleE&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">cloneType&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">this.&lt;/span>&lt;span style="color:#c678dd">type&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundle_ACancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">asInstanceOf&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">this.&lt;/span>&lt;span style="color:#c678dd">type&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">elements&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">ListMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;e&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;d&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;c&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;b&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;a&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/** Down-converts a TLBundle_ACancel to a plain TLBundle, dropping early/late timing split. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">asDecoupled&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLBundle&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">out&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundle&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">a.asDecoupled&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">b&lt;/span> &lt;span style="color:#e5c07b">:&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">out.b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">out.d&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">e&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">e&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/** Down-converts a TLBundle_ACancel to a plain TLBundle, dropping early/late timing split.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> * This differs from [[asDecoupled]]: this is uni-directional, suitable solely for monitoring. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">monitorAndNotCancel&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLBundle&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">out&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundle&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">validQual&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">d&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">e&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">object&lt;/span> &lt;span style="color:#e5c07b">TLXbar_ACancel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">circuit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLArbiter.Policy&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">seqIn&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[(&lt;/span>&lt;span style="color:#e5c07b">TLBundle_ACancel&lt;/span>, &lt;span style="color:#e5c07b">TLEdge&lt;/span>&lt;span style="color:#56b6c2">)],&lt;/span> &lt;span style="color:#e06c75">seqOut&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[(&lt;/span>&lt;span style="color:#e5c07b">TLBundle_ACancel&lt;/span>, &lt;span style="color:#e5c07b">TLEdge&lt;/span>&lt;span style="color:#56b6c2">)])&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Unit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">edgesIn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">seqIn&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">unzip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">edgesOut&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">seqOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">unzip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// edgesIn应该包含一些报文
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// Not every master need connect to every slave on every channel; determine which connections are necessary
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 可以看成两个for循环
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">reachableIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">edgesIn&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">cp&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">edgesOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">mp&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">client&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">clients&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">mp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">managers&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">m&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">visibility&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">ca&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">m&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">address&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">ma&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ca&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">overlaps&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ma&lt;/span>&lt;span style="color:#56b6c2">)}}}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}.&lt;/span>&lt;span style="color:#e06c75">toVector&lt;/span>&lt;span style="color:#56b6c2">}.&lt;/span>&lt;span style="color:#e06c75">toVector&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">probeIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">edgesIn&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">reachableIO&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cp&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">reachableO&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">edgesOut&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">reachableO&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mp&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">reachable&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">reachable&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">cp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">client&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">anySupportProbe&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">mp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">managers&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">regionType&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e5c07b">RegionType&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">TRACKED&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}.&lt;/span>&lt;span style="color:#e06c75">toVector&lt;/span>&lt;span style="color:#56b6c2">}.&lt;/span>&lt;span style="color:#e06c75">toVector&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">releaseIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">edgesIn&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">reachableIO&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cp&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">reachableO&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">edgesOut&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">reachableO&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mp&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">reachable&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">reachable&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">cp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">client&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">anySupportProbe&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">mp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">anySupportAcquireB&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}.&lt;/span>&lt;span style="color:#e06c75">toVector&lt;/span>&lt;span style="color:#56b6c2">}.&lt;/span>&lt;span style="color:#e06c75">toVector&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">connectAIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">reachableIO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">connectBIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">probeIO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">connectCIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">releaseIO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">connectDIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">reachableIO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">connectEIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">releaseIO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">transpose&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">]])&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isEmpty&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Nil&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">Vector&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tabulate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Vector&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tabulate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">connectAOI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">transpose&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectAIO&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">connectBOI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">transpose&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectBIO&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">connectCOI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">transpose&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectCIO&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">connectDOI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">transpose&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectDIO&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">connectEOI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">transpose&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectEIO&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Grab the port ID mapping
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">inputIdRanges&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">TLXbar&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mapInputIds&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">edgesIn&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">client&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">outputIdRanges&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">TLXbar&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mapOutputIds&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">edgesOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// We need an intermediate size of bundle with the widest possible identifiers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">wide_bundle&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">TLBundleParameters&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">union&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Handle size = 1 gracefully (Chisel3 empty range is broken)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">trim&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">id&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">id&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Ceil&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Transform input bundle sources (sinks use global namespace on both sides)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">TLBundle_ACancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">wide_bundle&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">inputIdRanges&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectAIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#e5c07b">.a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">start&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">earlyValid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">lateCancel&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">lateCancel&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectBIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#e5c07b">.b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">trim&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectCIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#e5c07b">.c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">start&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectDIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#e5c07b">.d&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">trim&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectEIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#e5c07b">.e&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Transform output bundle sinks (sources use global namespace on both sides)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">out&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">TLBundle_ACancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">wide_bundle&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">outputIdRanges&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectAOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">o&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#e5c07b">.a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">lateCancel&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">earlyValid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">lateCancel&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectBOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">o&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#e5c07b">.b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectCOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">o&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#e5c07b">.c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectDOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">o&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#e5c07b">.d&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sink&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sink&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">start&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectEOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">exists&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">o&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#e5c07b">.e&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sink&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">trim&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sink&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io_out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">DontCare&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Filter a list to only those elements selected
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">data&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">Boolean&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_2&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Based on input=&amp;gt;output connectivity, create per-input minimal address decode circuits
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">requiredAC&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectAIO&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#e06c75">connectCIO&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">distinct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">outputPortFns&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Map&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">Vector&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">Boolean&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span>, &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">]]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">requiredAC&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">connectO&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">port_addrs&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">edgesOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">managers&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">flatMap&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">address&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">routingMask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">AddressDecoder&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">port_addrs&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">connectO&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">route_addrs&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">port_addrs&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">seq&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">AddressSet&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">unify&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">widen&lt;/span>&lt;span style="color:#56b6c2">(~&lt;/span>&lt;span style="color:#e06c75">routingMask&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">distinct&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Print the address mapping
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">println&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Xbar mapping:&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">route_addrs&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">p&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">print&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">print&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">s&amp;#34; &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">println&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">println&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;--&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectO&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">route_addrs&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">seq&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">seq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">contains&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">reduce&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}.&lt;/span>&lt;span style="color:#e06c75">toMap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Print the ID mapping
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">println&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">s&amp;#34;XBar mapping:&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">edgesIn&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">inputIdRanges&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">zipWithIndex&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">edge&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">id&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">println&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">s&amp;#34;\t&lt;/span>&lt;span style="color:#98c379">$i&lt;/span>&lt;span style="color:#98c379"> assigned &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">id&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379"> for &lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">edge&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">client&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">clients&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">name&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">mkString&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;, &amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">println&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addressA&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">edgesIn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">address&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">addressC&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">edgesIn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">address&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">unique&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Vector&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">Boolean&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#c678dd">=&amp;gt;&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">requestAIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectAIO&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">addressA&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">outputPortFns&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">o&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">unique&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">requestCIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">connectCIO&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">addressC&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">outputPortFns&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">o&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">unique&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">requestBOI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">o&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">inputIdRanges&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">contains&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">requestDOI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">o&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">inputIdRanges&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">contains&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">requestEIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">outputIdRanges&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">o&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">contains&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sink&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">beatsAI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">edgesIn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">numBeats1&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">beatsBO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">out&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">edgesOut&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">numBeats1&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">beatsCI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">edgesIn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">numBeats1&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">beatsDO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">out&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">edgesOut&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">-,&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">numBeats1&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">beatsEI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">edgesIn&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">numBeats1&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Fanout the input sources to the output sinks
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">portsAOI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">transpose&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">requestAIO&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">TLXbar_ACancel&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fanout&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">edgesOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">ForceFanoutKey&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">portsBIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">transpose&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">out&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">requestBOI&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">TLXbar&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fanout&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">edgesIn&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">ForceFanoutKey&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">portsCOI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">transpose&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">requestCIO&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">TLXbar&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fanout&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">edgesOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">ForceFanoutKey&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">portsDIO&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">transpose&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">out&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">requestDOI&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">TLXbar&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fanout&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">edgesIn&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">ForceFanoutKey&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">portsEOI&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">transpose&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">requestEIO&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#c678dd">case&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">TLXbar&lt;/span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fanout&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">edgesOut&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">ForceFanoutKey&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Arbitrate amongst the sources
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">TLArbiter&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">applyCancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">a&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">beatsAI&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">portsAOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">connectAOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>&lt;span style="color:#c678dd">:_&lt;/span>&lt;span style="color:#e5c07b">*&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">TLArbiter&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">beatsCI&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">portsCOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">connectCOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>&lt;span style="color:#c678dd">:_&lt;/span>&lt;span style="color:#e5c07b">*&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">TLArbiter&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">e&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">beatsEI&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">portsEOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">connectEOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>&lt;span style="color:#c678dd">:_&lt;/span>&lt;span style="color:#e5c07b">*&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">portsAOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">connectAOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">portsCOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">connectCOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">portsEOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">connectEOI&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">o&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">TLArbiter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">beatsBO&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">portsBIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">connectBIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>&lt;span style="color:#c678dd">:_&lt;/span>&lt;span style="color:#e5c07b">*&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">TLArbiter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">d&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">beatsDO&lt;/span> &lt;span style="color:#e06c75">zip&lt;/span> &lt;span style="color:#e06c75">portsDIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">connectDIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>&lt;span style="color:#c678dd">:_&lt;/span>&lt;span style="color:#e5c07b">*&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">portsBIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">connectBIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">filter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">portsDIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">connectDIO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">apply&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLArbiter.Policy&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">TLArbiter&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">roundRobin&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">TLNode_ACancel&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">xbar&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLXbar_ACancel&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">policy&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">xbar&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Replicate an input port to each output port
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">fanout&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">TLChannel&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">ReadyValidCancel&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e06c75">select&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">],&lt;/span> &lt;span style="color:#e06c75">force&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">Boolean&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Nil&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">ReadyValidCancel&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span>&lt;span style="color:#56b6c2">]]&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">filtered&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">select&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">chiselTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">&amp;lt;-&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">select&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">filtered&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">force&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">lift&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">getOrElse&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#e5c07b">IdentityModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">filtered&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">lateCancel&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">lateCancel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">filtered&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">earlyValid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">earlyValid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">select&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">select&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">select&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">filtered&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">filtered&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>香山源代码剖析-参数协调与Diplomacy</title><link>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%B0%83%E4%B8%8Ediplomacy/</link><pubDate>Tue, 07 Jan 2025 20:20:37 +0800</pubDate><guid>https://VastCircle.github.io/2025/%E9%A6%99%E5%B1%B1%E6%BA%90%E4%BB%A3%E7%A0%81%E5%89%96%E6%9E%90-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%B0%83%E4%B8%8Ediplomacy/</guid><description>&lt;h2 id="简述">简述&lt;/h2>
&lt;p>在Diplomacy的术语中，模块称为“节点”。Diplomacy还把不同模块的按其输入输出抽象成不同类型的节点。 输入端和输出端数量相等的模块抽象成MixedAdapterNode或者AdapterNode,只有输入没有输出的节点抽象为SinkNode.只有输出没有输入的节点抽象为SouceNode&lt;/p>
&lt;p>参数协调与模块创建的拓扑有关系，与信号流通无关 。如果外部module接受参数设计，那与其对接的节点就是sink , 它在系统中是来接受参数的。反之，如果外部的module参数不容改变，那与其对接的module就作为source对内部提供参数。&lt;/p>
&lt;p>Diplomacy定义一种LazyModule,把有参数需要协调的Module包裹在里面，推出Module对象的创建，而先进行参数的协调，参数协调即Diplomacy部分， 1. 说明module有什么参数要协调，在参数协调中扮演主方或者从方，协调的规则是什么 2. 创建module内部的LazyModule子模块。LazyModule只应在另一个LazyModule中创建 3.说明子模块之间需要有参数协调的互相连接 ，即绑定&lt;/p>
&lt;p>Diplomacy框架中定义了一个抽象类BaseNode,然后派生出其他类&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Frontend&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">icacheParams&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">ICacheParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">staticIdForMetadataUseOnly&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">module&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">FrontendModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">icache&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">ICache&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">icacheParams&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">staticIdForMetadataUseOnly&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">masterNode&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">icache&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">masterNode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">slaveNode&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">icache&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">slaveNode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">resetVectorSinkNode&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">BundleBridgeSink&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e5c07b">Some&lt;/span>&lt;span style="color:#56b6c2">(()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">masterNode&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">edges&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">head&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bundle&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addressBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过Frontend可以得到，在一个LazyModule的定义中Diplomacy部分不一定非要放在lazy val module前面 2. 一个LazyModule中可以有多个参数协调模块，masterNode and slaveNode ,&lt;/p>
&lt;p>大多数的LazyModule中只有一个参数协调结点&lt;/p>
&lt;p>Diplomacy框架&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">一&lt;/span>、&lt;span style="color:#e06c75">在所创建的每个&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span> &lt;span style="color:#e06c75">模块中&lt;/span>｛
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">列举本模块在参数协调中扮演的功能&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#e06c75">角色节点&lt;/span>（&lt;span style="color:#e06c75">通常只有一个&lt;/span>）&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">包括每个节点的性质&lt;/span>、&lt;span style="color:#e06c75">所主张参数&lt;/span>、&lt;span style="color:#e06c75">和用于参数协调的规则&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#e06c75">算法&lt;/span>：
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">如有需要就创建有参数协调要求的子模块&lt;/span>（&lt;span style="color:#e06c75">也是&lt;/span> &lt;span style="color:#e5c07b">LazyModule&lt;/span> &lt;span style="color:#56b6c2">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">说明所创建子模块之间&lt;/span>，&lt;span style="color:#e06c75">或子模块与其它模块之间的绑定&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#e06c75">连接&lt;/span>（&lt;span style="color:#e06c75">建立&lt;/span>&lt;span style="color:#98c379">&amp;#34;外交关系&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>&lt;span style="color:#7f848e">//这是模块创建的 Diplomacy 阶段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">二&lt;/span>、&lt;span style="color:#e06c75">等所有模块都已创建&lt;/span>，&lt;span style="color:#e06c75">形成了整个系统的结构图以后&lt;/span>，&lt;span style="color:#e06c75">再遍历结构图进行全局的参数协调&lt;/span>。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">并建立模块间的物理连接&lt;/span>，&lt;span style="color:#e06c75">这是&lt;/span> &lt;span style="color:#e5c07b">Diplomacy&lt;/span> &lt;span style="color:#e06c75">的实施阶段&lt;/span>：
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">三&lt;/span>、&lt;span style="color:#e06c75">然后对本模块的硬件描述加以解析&lt;/span>，&lt;span style="color:#e06c75">这才是对本模块硬件描述进行解析的阶段&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参数的一致化">参数的一致化&lt;/h2>
&lt;p>BaseNode提供例如sinkCard,sourceCard(以本结点为source,sink绑定的结点数)，instantiate()遍历拓扑树进行参数协调&lt;/p>
&lt;p>通过BaseNode可以衍生出InwardNode和OutwardNode,MixwardNode&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>香山源代码剖析&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Neovim配置</title><link>https://VastCircle.github.io/2025/neovim%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 04 Jan 2025 14:11:15 +0800</pubDate><guid>https://VastCircle.github.io/2025/neovim%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="安装nvim">安装nvim&lt;/h2>
&lt;h2 id="安装kitty-终端">安装kitty 终端&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装wezterm-终端">安装wezterm 终端&lt;/h2>
&lt;p>&lt;a class="link" href="https://wezfurlong.org/wezterm/install/linux.html#pre-built-deb-packages" target="_blank" rel="noopener"
>https://wezfurlong.org/wezterm/install/linux.html#pre-built-deb-packages&lt;/a>&lt;/p>
&lt;p>下载安装包&lt;/p>
&lt;p>通过&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo apt install -y ./wezterm-20240203-110809-5046fc22.Ubuntu22.04.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是出现问题&lt;/p>
&lt;p>wezterm : Depends: libssl1.1 (&amp;gt;= 1.1.1) but it is not installable&lt;/p>
&lt;p>参考以下解决方式&lt;/p>
&lt;p>&lt;a class="link" href="https://askubuntu.com/questions/1403619/mongodb-install-fails-on-ubuntu-22-04-depends-on-libssl1-1-but-it-is-not-insta" target="_blank" rel="noopener"
>https://askubuntu.com/questions/1403619/mongodb-install-fails-on-ubuntu-22-04-depends-on-libssl1-1-but-it-is-not-insta&lt;/a>&lt;/p>
&lt;h2 id="nvim-学习">nvim 学习&lt;/h2>
&lt;h3 id="一些快捷键">一些快捷键&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>s &lt;span style="color:#7f848e"># 调用flash &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ctrl-d &lt;span style="color:#7f848e"># 向下 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ctrl-u &lt;span style="color:#7f848e"># 向上&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ctrl-f &lt;span style="color:#7f848e"># 向前&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ctrl-b &lt;span style="color:#7f848e"># 向后 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## z模式 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zc &lt;span style="color:#7f848e"># 折叠 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zo &lt;span style="color:#7f848e"># 展开 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zt &lt;span style="color:#7f848e"># z top &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zz &lt;span style="color:#7f848e"># z &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zb &lt;span style="color:#7f848e"># z behind &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>：e path/to/filename &lt;span style="color:#7f848e"># 打开文件 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>space + f + c &lt;span style="color:#7f848e"># 查找config文件 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>w &lt;span style="color:#7f848e"># 单词开头 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e &lt;span style="color:#7f848e"># 单词结尾 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#7f848e">## 前一个单词 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ge &lt;span style="color:#7f848e"># 上一个单词的末尾 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ctrl + o &lt;span style="color:#7f848e"># 回到跳出的地方&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ctrl + i &lt;span style="color:#7f848e"># 和 ctrl + o 相反 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## space space &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">## 大写字母不能匹配小写字母，但是小写字母可以匹配大写字母，大写字母的存在会使得整个匹配区分大小写 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ctrl + X &lt;span style="color:#7f848e"># 按照标签选择&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>space f f# 在root目录查找
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>space fF &lt;span style="color:#7f848e"># 在cmd（当前目录）查找&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:lcd &lt;span style="color:#7f848e"># 更改当前窗口的目录 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;count&amp;gt;&amp;lt;verb&amp;gt;&amp;lt;motion&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;verb&amp;gt;&amp;lt;count&amp;gt;&amp;lt;motion&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5i &lt;span style="color:#d19a66">123&lt;/span> esp &lt;span style="color:#7f848e"># 可以插入 5次123 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## verb &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dh &lt;span style="color:#7f848e"># 删除光标左边的字符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d3w 删除3个词
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3dw &lt;span style="color:#7f848e"># 删除一个单词3次&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d2Ta &lt;span style="color:#7f848e"># 删除光标与第2个a之前的文本 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dsfoos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> di &lt;span style="color:#7f848e"># &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>D &lt;span style="color:#7f848e"># 删除整行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>C &lt;span style="color:#7f848e"># 删除整行并进入编辑模式 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dl &lt;span style="color:#7f848e"># 删除单个字符 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r &lt;span style="color:#7f848e">#替换 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gU &lt;span style="color:#7f848e">#大写&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>～ &lt;span style="color:#7f848e">#反转大小写 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>. &lt;span style="color:#7f848e">#重复&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q &lt;span style="color:#7f848e">#recode &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>qQ &lt;span style="color:#7f848e">#附加 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Q &lt;span style="color:#7f848e">#播放最近的record &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>u &lt;span style="color:#7f848e"># 撤销&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ctrl + r 重做
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e"># 往前移动到一个句子 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span> &lt;span style="color:#7f848e"># 移动到句子的开头111111111111111111&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e"># 向前移动段落 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">[&lt;/span> &lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#7f848e"># 可以做括号的跳转 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">[&lt;/span> c &lt;span style="color:#56b6c2">]&lt;/span>c &lt;span style="color:#56b6c2">[&lt;/span>f &lt;span style="color:#56b6c2">]&lt;/span>f &lt;span style="color:#56b6c2">]&lt;/span>m &lt;span style="color:#56b6c2">[&lt;/span>m &lt;span style="color:#7f848e">#跳转到上一个类和下一个类，函数定义，方法定义&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">[&lt;/span>i &lt;span style="color:#56b6c2">]&lt;/span>i &lt;span style="color:#7f848e">#对python有用 ，转到&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ag &lt;span style="color:#7f848e"># 整个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cag &lt;span style="color:#7f848e">#删除整个文件 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yig &lt;span style="color:#7f848e">#复制全部 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>S &lt;span style="color:#7f848e">#flash.nvim 可以用来快速跳转&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cS &lt;span style="color:#7f848e">#确定更改的范围 &lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="lazyvim的插件">lazyvim的插件&lt;/h3>
&lt;p>通过 ：LazyExtras可以打开 lazy ectras ,&lt;/p>
&lt;p>通过在dashboard 点击x也可以&lt;/p>
&lt;h2 id="nvim-metal">nvim-metal&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/scalameta/nvim-metals/discussions/279#discussioncomment-1751981" target="_blank" rel="noopener"
>metal的function&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.scala-sbt.org/2.x/docs/en/recipes/use-neovim.html" target="_blank" rel="noopener"
>sbt work&lt;/a>&lt;/p>
&lt;h3 id="安装coursier">安装coursier&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>curl -fL &lt;span style="color:#98c379">&amp;#34;https://github.com/coursier/launchers/raw/master/cs-x86_64-pc-linux.gz&amp;#34;&lt;/span> | gzip -d &amp;gt; cs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod +x cs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./cs setup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://medium.com/@adaml.poniatowski/checking-out-the-coolest-neovim-distributions-lazyvim-lunarvim-astrovim-and-nvchad-whos-the-54ac6b926952" target="_blank" rel="noopener"
>neovim的一些发行版&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://lazyvim-ambitious-devs.phillips.codes/course/chapter-1/" target="_blank" rel="noopener"
>lazyvim&lt;/a>&lt;/p>
&lt;p>1000 0000 0000 0000 0010 0001 1100 0000&lt;/p>
&lt;p>1000 0000 0000 0000 0010 0001 1111 1000&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Rocketl1l2的交互</title><link>https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/</link><pubDate>Sat, 28 Dec 2024 00:38:28 +0800</pubDate><guid>https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/</guid><description>&lt;h2 id="测试程序">测试程序&lt;/h2>
&lt;p>以下程序基本能使得在后续的store中能够造成cache miss&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> ; &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">128&lt;/span> ; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#7f848e">// 填8个字节
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> ; &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">8&lt;/span> ; &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Table&lt;/span>[(&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#d19a66">11&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 再读一次,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> ; &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">128&lt;/span> ; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Table&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#d19a66">11&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="波形分析">波形分析&lt;/h2>
&lt;p>以地址0x80002140为例&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 532;
flex-basis: 1278px"
>
&lt;a href="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228114128488.png" data-size="1332x250">
&lt;img src="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228114128488.png"
width="1332"
height="250"
srcset="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228114128488_hu3601580593828471783.png 480w, https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228114128488_hu14037726226607520216.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>发送了 acquireblock请求 (opcode=6) ,source = 0,param = 1 ,NtoT,权限升了&lt;/p>
&lt;p>通过d通道来回应相应的block,64Byte opcode = 5 : GrantData param = 0 ,to T&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 630;
flex-basis: 1513px"
>
&lt;a href="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228114310563.png" data-size="1356x215">
&lt;img src="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228114310563.png"
width="1356"
height="215"
srcset="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228114310563_hu13997086999705267755.png 480w, https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228114310563_hu1567939558564258873.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>在访问0x80005140的时候,会把0x80002140踢出去,&lt;font color='red'>是cpu先发起请求，然后通过c通道写回，然后再通过a通道读取&lt;/font>&lt;/p>
&lt;p>1000 0000 0000 0000 0101 0001 0100 0000&lt;/p>
&lt;p>1000 0000 0000 0000 0010 0001 0100 0000&lt;/p>
&lt;p>通过c通道向l2发送相应的写请求 ,opcode 为7 releasedata&lt;/p>
&lt;p>param 1 TtoN ,权限降了,这样其它核可以有权限去访问这块内存了&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 685;
flex-basis: 1644px"
>
&lt;a href="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228121110120.png" data-size="1562x228">
&lt;img src="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228121110120.png"
width="1562"
height="228"
srcset="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228121110120_hu14812710916025197436.png 480w, https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228121110120_hu11769241239069806023.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>cpu重发消息了吗?? 会不会是第一次req是l1写入l2,第二次req是l1读取l2，应该不是&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 248;
flex-basis: 595px"
>
&lt;a href="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228130309875.png" data-size="1368x551">
&lt;img src="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228130309875.png"
width="1368"
height="551"
srcset="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228130309875_hu7833271048380387175.png 480w, https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228130309875_hu17212554382789313116.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>虽然说80005140发送了两次，但是从代码上来看a_bits_address依赖于s2_req_addr,这个 它在第一次store的时候就进行了赋值，所以按理来说即使第二次不发送，也是能够对l2发起read的 ，&lt;/p>
&lt;p>不过为什么会发送两次&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 408;
flex-basis: 979px"
>
&lt;a href="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228152113504.png" data-size="1820x446">
&lt;img src="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228152113504.png"
width="1820"
height="446"
srcset="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228152113504_hu13616351803496312912.png 480w, https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228152113504_hu12770799884593167265.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="代码">代码&lt;/h2>
&lt;p>rocket用的是普通的block-cache&lt;/p>
&lt;p>s_voluntary_writeback&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 1388;
flex-basis: 3331px"
>
&lt;a href="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228105139496.png" data-size="1277x92">
&lt;img src="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228105139496.png"
width="1277"
height="92"
srcset="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228105139496_hu12353709537225022990.png 480w, https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228105139496_hu13176132764453151868.png 1024w"
loading="lazy"
alt="image-20241228105139496">
&lt;/a>
&lt;figcaption>image-20241228105139496&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>到底什么时候会release ,就是被踢出去的时候&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 820;
flex-basis: 1969px"
>
&lt;a href="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228145401426.png" data-size="1707x208">
&lt;img src="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228145401426.png"
width="1707"
height="208"
srcset="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228145401426_hu18033976610059691788.png 480w, https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228145401426_hu10045938178266076414.png 1024w"
loading="lazy"
alt="image-20241228145401426">
&lt;/a>
&lt;figcaption>image-20241228145401426&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="tl_out_cvalid">tl_out_c.valid&lt;/h3>
&lt;p>看下来就是在cached_miss且dirty的时候c_valid会拉高&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// s2_victim_dirty 在出现没有命中的时候会拉高,在出现命中的时候会拉低
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">s2_victim_state&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_hit_valid&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s2_hit_state&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_victim_way&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s2_meta_corrected&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">coh&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_victim_dirty&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s2_shrink_param&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">voluntaryNewCoh&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">s2_victim_state&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">onCacheControl&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">M_FLUSH&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// cache_miss
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">s2_want_victimize&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">usingDataScratchpad&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_valid_cached_miss&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">s2_valid_flush_line&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">s2_valid_data_error&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">s2_flush_valid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">s2_victimize&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">s2_want_victimize&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">s2_cannot_victimize&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_victimize&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 状态变换
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">release_state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_victim_dirty&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">discard_line&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s_voluntary_writeback&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">cacheParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">silentDrop&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">release_ack_wait&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">release_queue_empty&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">s2_victim_state&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isValid&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_valid_flush_line&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">s2_flush_valid&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">s2_readwrite&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">s2_hit_valid&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">s_voluntary_release&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s_voluntary_write_meta&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">inWriteback&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">release_state&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isOneOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s_voluntary_writeback&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s_probe_rep_dirty&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">dataArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">inWriteback&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">releaseDataBeat&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">refillCycles&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dataArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">dataArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">s1_release_data_valid&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">dataArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">s2_release_data_valid&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s1_release_data_valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">releaseRejected&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tl_out_c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_release_data_valid&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">cacheParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">silentDrop&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">release_state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_voluntary_release&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!(&lt;/span>&lt;span style="color:#e06c75">c_first&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">release_ack_wait&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 665;
flex-basis: 1596px"
>
&lt;a href="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228121846180.png" data-size="1317x198">
&lt;img src="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228121846180.png"
width="1317"
height="198"
srcset="https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228121846180_hu15486588507613234770.png 480w, https://VastCircle.github.io/2024/rocketl1l2%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241228121846180_hu11283493783174921404.png 1024w"
loading="lazy"
alt="image-20241228121846180">
&lt;/a>
&lt;figcaption>image-20241228121846180&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="t1_out_caddr-and-t1_out_cdata">t1_out_c.addr and t1_out_c.data&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">//address
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_victimize&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">probe_bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">addressToProbe&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_vaddr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_victim_tag&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s2_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tagLSB&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">idxLSB&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">idxLSB&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">tl_out_c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">address&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">probe_bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">//data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">s2_data_decoded&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">decodeData&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_data&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">s2_data_corrected&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_data_decoded&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">corrected&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">]).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">tl_out_c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s2_data_corrected&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="t1_out_avalid">t1_out_a.valid&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// a.valid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">tl_out_a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">s2_kill&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_valid_uncached_pending&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_valid_cached_miss&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">!(&lt;/span>&lt;span style="color:#e06c75">release_ack_wait&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">^&lt;/span> &lt;span style="color:#e06c75">release_ack_addr&lt;/span>&lt;span style="color:#56b6c2">)(((&lt;/span>&lt;span style="color:#e06c75">pgIdxBits&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">pgLevelBits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">min&lt;/span> &lt;span style="color:#e06c75">paddrBits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">idxLSB&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cacheParams&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">acquireBeforeRelease&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">release_ack_wait&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">release_queue_empty&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">s2_victim_dirty&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tl_out_a&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">s2_uncached&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">acquire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_vaddr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s2_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s2_grow_param&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">s2_write&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">get&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">M_PWR&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">putpartial&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">s2_read&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">put&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">atomics&lt;/span>&lt;span style="color:#56b6c2">))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(s2_valid_cached_miss &amp;amp;&amp;amp;
! (release_ack_wait &amp;amp;&amp;amp; (s2_req.addr ^ release_ack_addr)(((pgIdxBits + pgLevelBits) min paddrBits) - 1, idxLSB) === 0.U) ## 应该是说不在release&lt;/p>
&lt;p>cacheParams.acquireBeforeRelease.B 一个配置,在release之前发起请求,看样子是false&lt;/p>
&lt;p>!release_ack_wait &amp;amp;&amp;amp; release_queue_empty || !s2_victim_dirty ,脏了是要写回的&lt;/p>
&lt;p>a 80033940 1000 0000 0000 0011 0011 1001 01 00 0000&lt;/p>
&lt;p>c 80036940 1000 0000 0000 0011 0110 1001 01 00 0000&lt;/p>
&lt;p>a 80037140 1000 0000 0000 0011 0111 0001 01 00 0000&lt;/p>
&lt;p>c 80037940 1000 0000 0000 0011 0111 1001 01 00 0000&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Spik_cache的交互</title><link>https://VastCircle.github.io/2024/spik_cache%E7%9A%84%E4%BA%A4%E4%BA%92/</link><pubDate>Fri, 27 Dec 2024 17:34:48 +0800</pubDate><guid>https://VastCircle.github.io/2024/spik_cache%E7%9A%84%E4%BA%A4%E4%BA%92/</guid><description>&lt;p>spike 的cache 为什么会出现 l2 miss的次数高于l1 ,按理来说只有l1 miss才有机会去读l2&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 376;
flex-basis: 904px"
>
&lt;a href="https://VastCircle.github.io/2024/spik_cache%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241227174225683.png" data-size="671x178">
&lt;img src="https://VastCircle.github.io/2024/spik_cache%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241227174225683.png"
width="671"
height="178"
srcset="https://VastCircle.github.io/2024/spik_cache%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241227174225683_hu6466349755934550054.png 480w, https://VastCircle.github.io/2024/spik_cache%E7%9A%84%E4%BA%A4%E4%BA%92/image-20241227174225683_hu14082263635862480712.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e5c07b">cache_sim_t&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#61afef;font-weight:bold">access&lt;/span>(&lt;span style="color:#e5c07b">uint64_t&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>, &lt;span style="color:#e5c07b">size_t&lt;/span> &lt;span style="color:#e06c75">bytes&lt;/span>, &lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">store&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// access次数的统计
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">store&lt;/span> &lt;span style="color:#56b6c2">?&lt;/span> &lt;span style="color:#e06c75">write_accesses&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#e06c75">read_accesses&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e06c75">store&lt;/span> &lt;span style="color:#56b6c2">?&lt;/span> &lt;span style="color:#e06c75">bytes_written&lt;/span> : &lt;span style="color:#e06c75">bytes_read&lt;/span>) &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">bytes&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 检查是否命中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">uint64_t&lt;/span>&lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">hit_way&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#61afef;font-weight:bold">check_tag&lt;/span>(&lt;span style="color:#e06c75">addr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#61afef;font-weight:bold">likely&lt;/span>(&lt;span style="color:#e06c75">hit_way&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e5c07b">NULL&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">store&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">hit_way&lt;/span> &lt;span style="color:#56b6c2">|=&lt;/span> &lt;span style="color:#e06c75">DIRTY&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 未命中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">store&lt;/span> &lt;span style="color:#56b6c2">?&lt;/span> &lt;span style="color:#e06c75">write_misses&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#e06c75">read_misses&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">log&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">cerr&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">name&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#98c379">&amp;#34; &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> (&lt;span style="color:#e06c75">store&lt;/span> &lt;span style="color:#56b6c2">?&lt;/span> &lt;span style="color:#98c379">&amp;#34;write&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#98c379">&amp;#34;read&amp;#34;&lt;/span>) &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#98c379">&amp;#34; miss 0x&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">hex&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">endl&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// victim 是需要进行替换的tag ,为0说明cache没有满
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">uint64_t&lt;/span> &lt;span style="color:#e06c75">victim&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#61afef;font-weight:bold">victimize&lt;/span>(&lt;span style="color:#e06c75">addr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// dirty &amp;amp;&amp;amp; valid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> ((&lt;span style="color:#e06c75">victim&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> (&lt;span style="color:#e06c75">VALID&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">DIRTY&lt;/span>)) &lt;span style="color:#56b6c2">==&lt;/span> (&lt;span style="color:#e06c75">VALID&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">DIRTY&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 把替换的block写入l2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">uint64_t&lt;/span> &lt;span style="color:#e06c75">dirty_addr&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> (&lt;span style="color:#e06c75">victim&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">~&lt;/span>(&lt;span style="color:#e06c75">VALID&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">DIRTY&lt;/span>)) &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">idx_shift&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 如果有l2的话
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">miss_handler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">miss_handler&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#61afef;font-weight:bold">access&lt;/span>(&lt;span style="color:#e06c75">dirty_addr&lt;/span>, &lt;span style="color:#e06c75">linesz&lt;/span>, &lt;span style="color:#e5c07b">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">writebacks&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// read
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">miss_handler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">miss_handler&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#61afef;font-weight:bold">access&lt;/span>(&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">~&lt;/span>(&lt;span style="color:#e06c75">linesz&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>), &lt;span style="color:#e06c75">linesz&lt;/span>, &lt;span style="color:#e5c07b">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">store&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#61afef;font-weight:bold">check_tag&lt;/span>(&lt;span style="color:#e06c75">addr&lt;/span>) &lt;span style="color:#56b6c2">|=&lt;/span> &lt;span style="color:#e06c75">DIRTY&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 这种存放的方式应该类似于哈希表,是有键值对的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// idx_shift应该和block的大小有关,即前面几位是一个block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">uint64_t&lt;/span> &lt;span style="color:#e5c07b">fa_cache_sim_t&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#61afef;font-weight:bold">victimize&lt;/span>(&lt;span style="color:#e5c07b">uint64_t&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">uint64_t&lt;/span> &lt;span style="color:#e06c75">old_tag&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">tags&lt;/span>.&lt;span style="color:#61afef;font-weight:bold">size&lt;/span>() &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">ways&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">auto&lt;/span> &lt;span style="color:#e06c75">it&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">tags&lt;/span>.&lt;span style="color:#61afef;font-weight:bold">begin&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#61afef;font-weight:bold">advance&lt;/span>(&lt;span style="color:#e06c75">it&lt;/span>, &lt;span style="color:#e06c75">lfsr&lt;/span>.&lt;span style="color:#61afef;font-weight:bold">next&lt;/span>() &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#e06c75">ways&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">old_tag&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">it&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">second&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tags&lt;/span>.&lt;span style="color:#61afef;font-weight:bold">erase&lt;/span>(&lt;span style="color:#e06c75">it&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tags&lt;/span>[&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">idx_shift&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> (&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">idx_shift&lt;/span>) &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e06c75">VALID&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">old_tag&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>D$ read miss + D$ write miss + I$ write miss = L2 $ read access&lt;/p>
&lt;p>L2 $write access = D$ write miss 中 dirty 的一部分&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/plctlab/PLCT-Open-Reports/blob/master/slides/20200617-Spike%20%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90-wangmeng.pdf" target="_blank" rel="noopener"
>TLCT-Open-Reports&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>服务器配置</title><link>https://VastCircle.github.io/2024/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 25 Dec 2024 01:25:07 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="vim">vim&lt;/h2>
&lt;p>安装插件 vim-plug&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener"
>https://github.com/junegunn/vim-plug&lt;/a>&lt;/p>
&lt;p>安装主题&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/kabbamine/yowish.vim?tab=readme-ov-file" target="_blank" rel="noopener"
>https://github.com/kabbamine/yowish.vim?tab=readme-ov-file&lt;/a>&lt;/p>
&lt;h2 id="zsh安装">zsh安装&lt;/h2>
&lt;p>&lt;a class="link" href="https://patzer0.com/archives/ubuntu-install-font-for-user-or-system" target="_blank" rel="noopener"
>安装字体&lt;/a>&lt;/p>
&lt;h2 id="chipyard-安装">chipyard 安装&lt;/h2>
&lt;h3 id="问题">问题&lt;/h3>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>wzy123wzy&lt;/p>
&lt;p>&lt;a class="link" href="https://www.kwchang0831.dev/dev-env/ubuntu/oh-my-zsh" target="_blank" rel="noopener"
>wzsh安装&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>chipyard and Firesim</title><link>https://VastCircle.github.io/2024/firesim/</link><pubDate>Tue, 24 Dec 2024 21:35:28 +0800</pubDate><guid>https://VastCircle.github.io/2024/firesim/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;h3 id="1运行firesim-runworkload-时报错">1.运行firesim runworkload 时报错&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 352;
flex-basis: 845px"
>
&lt;a href="https://VastCircle.github.io/2024/firesim/image-20241224213818951.png" data-size="1420x403">
&lt;img src="https://VastCircle.github.io/2024/firesim/image-20241224213818951.png"
width="1420"
height="403"
srcset="https://VastCircle.github.io/2024/firesim/image-20241224213818951_hu16838008880615851633.png 480w, https://VastCircle.github.io/2024/firesim/image-20241224213818951_hu15872417008841820697.png 1024w"
loading="lazy"
alt="image-20241224213818951">
&lt;/a>
&lt;figcaption>image-20241224213818951&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>该问题未解决&lt;/p>
&lt;h3 id="int-fpga_pci_check_file_idchar-uint-16_t-asserttemp_id--id-failed">int fpga_pci_check_file_id(char *,uint 16_t): Assert(temp_id == id) failed&lt;/h3>
&lt;p>这会导致仿真一开始就停止了&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 779;
flex-basis: 1870px"
>
&lt;a href="https://VastCircle.github.io/2024/firesim/image-20241226164901385.png" data-size="1465x188">
&lt;img src="https://VastCircle.github.io/2024/firesim/image-20241226164901385.png"
width="1465"
height="188"
srcset="https://VastCircle.github.io/2024/firesim/image-20241226164901385_hu6340866643082896206.png 480w, https://VastCircle.github.io/2024/firesim/image-20241226164901385_hu13690025600239813682.png 1024w"
loading="lazy"
alt="image-20241226164901385">
&lt;/a>
&lt;figcaption>image-20241226164901385&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>从仿真截图上大致能看出问题,因为我本身是使用了81端口,但是现在它在仿真时还是使用21端口,这必然会出错&lt;/p>
&lt;p>修改run_farm_deploy_managers.py可以强制将bus设置为81 ,这样能够解决问题&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 780;
flex-basis: 1874px"
>
&lt;a href="https://VastCircle.github.io/2024/firesim/image-20241226173219152.png" data-size="1312x168">
&lt;img src="https://VastCircle.github.io/2024/firesim/image-20241226173219152.png"
width="1312"
height="168"
srcset="https://VastCircle.github.io/2024/firesim/image-20241226173219152_hu8852092959460164909.png 480w, https://VastCircle.github.io/2024/firesim/image-20241226173219152_hu10936162801737639873.png 1024w"
loading="lazy"
alt="image-20241226173219152">
&lt;/a>
&lt;figcaption>image-20241226173219152&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="即使加入的withprintfsynthesis仍然无法打印log">即使加入的withPrintfSynthesis仍然无法打印log&lt;/h2>
&lt;p>仔细观察firesim infrasetup 发现它所构建的还是没有synthesis printf的软件设施&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 549;
flex-basis: 1318px"
>
&lt;a href="https://VastCircle.github.io/2024/firesim/image-20241226222829943.png" data-size="1088x198">
&lt;img src="https://VastCircle.github.io/2024/firesim/image-20241226222829943.png"
width="1088"
height="198"
srcset="https://VastCircle.github.io/2024/firesim/image-20241226222829943_hu5484888761284436681.png 480w, https://VastCircle.github.io/2024/firesim/image-20241226222829943_hu16998589749758927085.png 1024w"
loading="lazy"
alt="image-20241226222829943">
&lt;/a>
&lt;figcaption>image-20241226222829943&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>发现是没有设置指定的bitstream ,更改命令为&lt;/p>
&lt;p>firesim infrasetup &amp;ndash;hwdbconfigfile built-hwdb-entries/alveo_u280_firesim_rocket_singlecore_no_nic即可&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Rocket_chip_hardware_performance_monitor</title><link>https://VastCircle.github.io/2024/rocket_chip_hardware_performance_monitor/</link><pubDate>Sun, 22 Dec 2024 15:05:57 +0800</pubDate><guid>https://VastCircle.github.io/2024/rocket_chip_hardware_performance_monitor/</guid><description>&lt;h2 id="hardware-performance-monitor">Hardware Performance Monitor&lt;/h2>
&lt;p>the hardware performance monitor includes 29 additional 64-bit event counters,mhpmcounter3-mhpmcounter . The event selector CSRs , mhpmevent3-mhpmevent31, are MXLEN-bit WARL register tghat control which event causes the corresponding counter to increment&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 320;
flex-basis: 769px"
>
&lt;a href="https://VastCircle.github.io/2024/rocket_chip_hardware_performance_monitor/image-20241222151014944.png" data-size="798x249">
&lt;img src="https://VastCircle.github.io/2024/rocket_chip_hardware_performance_monitor/image-20241222151014944.png"
width="798"
height="249"
srcset="https://VastCircle.github.io/2024/rocket_chip_hardware_performance_monitor/image-20241222151014944_hu189879034609081359.png 480w, https://VastCircle.github.io/2024/rocket_chip_hardware_performance_monitor/image-20241222151014944_hu17809269090014267676.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>mcycle：保存自过去任意时间以来CPU执行的周期数，是一个64-bit的CSR寄存器，当使用的是32-bit系统时，可以通过mcycle &amp;amp; mcycleh读取完整的64-bit数据。
minstret：记录自过去任意时间以来CPU退出的指令数，是一个64-bit的CSR寄存器，当使用的是32-bit系统时，可以通过minstret &amp;amp; minstreth读取完整的64-bit数据。
mhpmevent3–mhpmevent31：硬件性能监控的事件选择CSR寄存器，是一个32-bit的CSR寄存器。
mhpmcounter3– mhpmcounter31：额外29个事件触发CSR计数器，当选择监控的事件发生时，此计数器会自动加一，指令集中规定是64-bit的CSR寄存器，当使用的是32-bit系统时，可以通过mhpmcounterX &amp;amp; mhpmcounterXh读取完整的64-bit数据。&lt;/p>
&lt;h2 id="rocket-chip-中-的event">rocket-chip 中 的event&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">csr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">counters&lt;/span> &lt;span style="color:#e06c75">foreach&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">inc&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">RegNext&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">perfEvents&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">evaluate&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">eventSel&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">perfEvents&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">EventSets&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">EventSet&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">hits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">wb_xcpt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">wb_valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">pipelineIDToWB&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">hits&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;exception&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;load&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_cmd&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">M_XRD&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;store&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_cmd&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e5c07b">M_XWR&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;amo&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">usingAtomics&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">isAMO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_cmd&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_cmd&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isOneOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">M_XLR&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">M_XSC&lt;/span>&lt;span style="color:#56b6c2">))),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;system&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">csr&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e5c07b">CSR&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;arith&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wxd&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!(&lt;/span>&lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">jal&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">jalr&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mul&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">div&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">csr&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e5c07b">CSR&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;branch&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">branch&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;jal&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">jal&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;jalr&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">jalr&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">usingMulDiv&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;mul&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pipelinedMul&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mul&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">div&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">alu_fn&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">aluFn&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">FN_DIV&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e06c75">aluFn&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">FN_DIV&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;div&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">pipelinedMul&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">div&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">div&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">alu_fn&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">aluFn&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">FN_DIV&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">aluFn&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">FN_DIV&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">usingFPU&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;fp load&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ldst&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;fp store&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ldst&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;fp add&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fma&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">swap23&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;fp mul&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fma&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">swap23&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ren3&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;fp mul-add&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fma&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ren3&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;fp div/sqrt&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">div&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sqrt&lt;/span>&lt;span style="color:#56b6c2">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;fp other&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ldst&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fma&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">div&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dec&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sqrt&lt;/span>&lt;span style="color:#56b6c2">))))),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">EventSet&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">hits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">hits&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;load-use interlock&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ex_hazard&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">ex_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_mem_hazard&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">mem_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_wb_hazard&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">wb_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;long-latency interlock&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_sboard_hazard&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;csr interlock&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ex_hazard&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">ex_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">csr&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e5c07b">CSR&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">N&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_mem_hazard&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">mem_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">csr&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e5c07b">CSR&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">N&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_wb_hazard&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">wb_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">csr&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e5c07b">CSR&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">N&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;I$ blocked&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">icache_blocked&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;D$ blocked&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">dcache_blocked&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;branch misprediction&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">take_pc_mem&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">mem_direction_misprediction&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;control-flow target misprediction&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">take_pc_mem&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">mem_misprediction&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">mem_cfi&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">mem_direction_misprediction&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">icache_blocked&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;flush&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">wb_reg_flush_pipe&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;replay&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">replay_wb&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">usingMulDiv&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;mul/div interlock&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ex_hazard&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">ex_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mul&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">ex_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">div&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_mem_hazard&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mem_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mul&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">mem_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">div&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_wb_hazard&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">wb_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">div&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">usingFPU&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;fp interlock&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">id_ex_hazard&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">ex_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_mem_hazard&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">mem_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_wb_hazard&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">wb_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">id_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fp&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">id_stall_fpu&lt;/span>&lt;span style="color:#56b6c2">)))),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">EventSet&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">hits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">hits&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">orR&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;I$ miss&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">imem&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">perf&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">acquire&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;D$ miss&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dmem&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">perf&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">acquire&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;D$ release&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dmem&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">perf&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">release&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;ITLB miss&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">imem&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">perf&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tlbMiss&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;DTLB miss&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dmem&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">perf&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tlbMiss&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;L2 TLB miss&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ptw&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">perf&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">l2miss&lt;/span>&lt;span style="color:#56b6c2">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/a_weiming/article/details/105547789" target="_blank" rel="noopener"
>Rocket-chip-Hardware-performance-monitor&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>工作负载分析</title><link>https://VastCircle.github.io/2024/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E5%88%86%E6%9E%90/</link><pubDate>Thu, 19 Dec 2024 16:52:19 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E5%88%86%E6%9E%90/</guid><description>&lt;h2 id="nas-sys">nas-sys&lt;/h2>
&lt;h2 id="randacc-no">randacc-no&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#e5c07b">void&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#61afef;font-weight:bold">RandomAccessUpdate&lt;/span>(&lt;span style="color:#e06c75">u64Int&lt;/span> &lt;span style="color:#e06c75">TableSize&lt;/span>, &lt;span style="color:#e06c75">u64Int&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">Table&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">u64Int&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">u64Int&lt;/span> &lt;span style="color:#e06c75">ran&lt;/span>[&lt;span style="color:#d19a66">128&lt;/span>]; &lt;span style="color:#7f848e">/* Current random numbers */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// ran[j]保存生成的一些伪随机数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#d19a66">128&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ran&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">HPCC_starts&lt;/span> ((&lt;span style="color:#e06c75">NUPDATE&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#d19a66">128&lt;/span>) &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#e06c75">NUPDATE&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#d19a66">128&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#d19a66">128&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ran&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> (&lt;span style="color:#e06c75">ran&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">^&lt;/span> ((&lt;span style="color:#e06c75">s64Int&lt;/span>) &lt;span style="color:#e06c75">ran&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">?&lt;/span> &lt;span style="color:#e06c75">POLY&lt;/span> : &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Table&lt;/span>[&lt;span style="color:#e06c75">ran&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> (&lt;span style="color:#e06c75">TableSize&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>)] &lt;span style="color:#56b6c2">^=&lt;/span> &lt;span style="color:#e06c75">ran&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 伪随机数生成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">u64Int&lt;/span> &lt;span style="color:#61afef;font-weight:bold">HPCC_starts&lt;/span>(&lt;span style="color:#e06c75">s64Int&lt;/span> &lt;span style="color:#e06c75">n&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">j&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">u64Int&lt;/span> &lt;span style="color:#e06c75">m2&lt;/span>[&lt;span style="color:#d19a66">64&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">u64Int&lt;/span> &lt;span style="color:#e06c75">temp&lt;/span>, &lt;span style="color:#e06c75">ran&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>) &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">PERIOD&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">PERIOD&lt;/span>) &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">-=&lt;/span> &lt;span style="color:#e06c75">PERIOD&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>) &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#d19a66">0x1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">temp&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0x1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#d19a66">64&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">m2&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">temp&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">temp&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> (&lt;span style="color:#e06c75">temp&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">^&lt;/span> ((&lt;span style="color:#e06c75">s64Int&lt;/span>) &lt;span style="color:#e06c75">temp&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">?&lt;/span> &lt;span style="color:#e06c75">POLY&lt;/span> : &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">temp&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> (&lt;span style="color:#e06c75">temp&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">^&lt;/span> ((&lt;span style="color:#e06c75">s64Int&lt;/span>) &lt;span style="color:#e06c75">temp&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">?&lt;/span> &lt;span style="color:#e06c75">POLY&lt;/span> : &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">62&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">--&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> ((&lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>) &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ran&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0x2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">temp&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#d19a66">64&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> ((&lt;span style="color:#e06c75">ran&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>) &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">temp&lt;/span> &lt;span style="color:#56b6c2">^=&lt;/span> &lt;span style="color:#e06c75">m2&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ran&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">temp&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">-=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> ((&lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>) &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ran&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> (&lt;span style="color:#e06c75">ran&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">^&lt;/span> ((&lt;span style="color:#e06c75">s64Int&lt;/span>) &lt;span style="color:#e06c75">ran&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">?&lt;/span> &lt;span style="color:#e06c75">POLY&lt;/span> : &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">ran&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="随机访存">随机访存&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#e06c75">NUPDATE&lt;/span>&lt;span style="color:#56b6c2">/&lt;/span>&lt;span style="color:#d19a66">128&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#d19a66">128&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ran&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> (&lt;span style="color:#e06c75">ran&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">^&lt;/span> ((&lt;span style="color:#e06c75">s64Int&lt;/span>) &lt;span style="color:#e06c75">ran&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">?&lt;/span> &lt;span style="color:#e06c75">POLY&lt;/span> : &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Table&lt;/span>[&lt;span style="color:#e06c75">ran&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> (&lt;span style="color:#e06c75">TableSize&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>)] &lt;span style="color:#56b6c2">^=&lt;/span> &lt;span style="color:#e06c75">ran&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>load ran[j] store ran[j] store Table&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly"> 103b6: a85d j 1046c &amp;lt;RandomAccessUpdate+0x11a&amp;gt;
103b8: fe042223 sw zero,-28(s0) ## 3ffffffad8
103bc: a859 j 10452 &amp;lt;RandomAccessUpdate+0x100&amp;gt;
103be: fe442783 lw a5,-28(s0) ## 3ffffffad4 127-0
103c2: 078e slli a5,a5,0x3
103c4: 17c1 addi a5,a5,-16
103c6: 97a2 add a5,a5,s0
##### 103c8: bf07b783 ld a5,-1040(a5) 步进 3ffffff6d0 -&amp;gt; 3ffffffac8 step = 8 ran[j]
103cc: 00179713 slli a4,a5,0x1
103d0: fe442783 lw a5,-28(s0) ## 3ffffffad4 0:7f
103d4: 078e slli a5,a5,0x3
103d6: 17c1 addi a5,a5,-16
103d8: 97a2 add a5,a5,s0
##### 103da: bf07b783 ld a5,-1040(a5) 步进 3ffffff6d0 -&amp;gt; 3ffffffac8 step = 8 ran[j]
103de: 0007d463 bgez a5,103e6 &amp;lt;RandomAccessUpdate+0x94&amp;gt;
103e2: 479d li a5,7
103e4: a011 j 103e8 &amp;lt;RandomAccessUpdate+0x96&amp;gt;
103e6: 4781 li a5,0
103e8: 8f3d xor a4,a4,a5 ## (ran[j] &amp;lt;&amp;lt; 1) ^ ((s64Int) ran[j] &amp;lt; 0 ? POLY : 0)
103ea: fe442783 lw a5,-28(s0) ## 3ffffffad4 0:7f
103ee: 078e slli a5,a5,0x3
103f0: 17c1 addi a5,a5,-16
103f2: 97a2 add a5,a5,s0
## 103f4: bee7b823 sd a4,-1040(a5) 步进 3ffffff6d0 -&amp;gt; 3ffffffac8 step = 8 ran[j] =
103f8: fe442783 lw a5,-28(s0) ## 3ffffffad4 0:7f
103fc: 078e slli a5,a5,0x3
103fe: 17c1 addi a5,a5,-16
10400: 97a2 add a5,a5,s0
## 10402: bf07b703 ld a4,-1040(a5) 步进 3ffffff6d0 -&amp;gt; 3ffffffac8 step = 8 ran[j]
10406: bd843783 ld a5,-1064(s0) ## 3fffff6c8
1040a: 17fd addi a5,a5,-1
1040c: 8ff9 and a5,a5,a4
1040e: 078e slli a5,a5,0x3
10410: bd043703 ld a4,-1072(s0) ## 3ffffff6c0
10414: 97ba add a5,a5,a4
10416: 6394 ld a3,0(a5) ## random Table[?]
10418: fe442783 lw a5,-28(s0) ## 3fffffad4 0:7f
1041c: 078e slli a5,a5,0x3
1041e: 17c1 addi a5,a5,-16
10420: 97a2 add a5,a5,s0
## 10422: bf07b703 ld a4,-1040(a5) 步进 3ffffff6d0 -&amp;gt; 3ffffffac8 step = 8 ran[j]
10426: fe442783 lw a5,-28(s0) ## 3ffffffad4 0:7f
1042a: 078e slli a5,a5,0x3
1042c: 17c1 addi a5,a5,-16
1042e: 97a2 add a5,a5,s0
## 10430: bf07b603 ld a2,-1040(a5) ## 步进 3ffffff6d0 -&amp;gt; 3ffffffac8 step = 8 ran[j]
10434: bd843783 ld a5,-1064(s0) ## 3ffffff6c8 不变
10438: 17fd addi a5,a5,-1
1043a: 8ff1 and a5,a5,a2
1043c: 078e slli a5,a5,0x3
1043e: bd043603 ld a2,-1072(s0) ## 3ffffff6c0 不变
10442: 97b2 add a5,a5,a2
10444: 8f35 xor a4,a4,a3 ## Table[?] ^ ran[j]
10446: e398 sd a4,0(a5) ## Table[?] =
10448: fe442783 lw a5,-28(s0) ## ## 3fffffad4 0:7f
1044c: 2785 addiw a5,a5,1
1044e: fef42223 sw a5,-28(s0) ## 3ffffffad4 j : 0-127
10452: fe442783 lw a5,-28(s0) ## 3ffffffad4 , j : 0:7f
10456: 0007871b sext.w a4,a5
1045a: 07f00793 li a5,127
## cmp 1045e: f6e7d0e3 bge a5,a4,103be &amp;lt;RandomAccessUpdate+0x6c&amp;gt;
10462: fe843783 ld a5,-24(s0)
10466: 0785 addi a5,a5,1
10468: fef43423 sd a5,-24(s0)
1046c: bd843783 ld a5,-1064(s0) ## 不变的 , 3ffffff6c8
10470: 078a slli a5,a5,0x2
10472: 839d srli a5,a5,0x7
10474: fe843703 ld a4,-24(s0) ## 不变的 ,3ffffffad8
## cmp 10478: f4f760e3 bltu a4,a5,103b8 &amp;lt;RandomAccessUpdate+0x66&amp;gt; i 0:NUODATE/128
&lt;/code>&lt;/pre>&lt;p>103b6 跳转 -&amp;gt; 1046c 顺序-&amp;gt; 10478 跳转-&amp;gt; 103b8 顺序-&amp;gt; 103bc 跳转-&amp;gt; 10452 顺序-&amp;gt; (&lt;font color='red'>1045e 跳转-&amp;gt; 103be 顺序-&amp;gt; 1045e 跳转-&amp;gt;103be&lt;/font>) 顺序-&amp;gt;10478 跳转-&amp;gt;103b8&lt;/p>
&lt;h3 id="o2优化">O2优化&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly"> 10330: fff48593 addi a1,s1,-1
10334: 4501 li a0,0
10336: 870a mv a4,sp
10338: 631c ld a5,0(a4) ## stride load 0x3ffffff6e0 : 0x3ffffffad8 step = 8
1033a: 00179693 slli a3,a5,0x1 ## dependent
1033e: 0007d463 bgez a5,10346 &amp;lt;RandomAccessUpdate+0x60&amp;gt; ## dependent
10342: 0076c693 xori a3,a3,7 ## dependent
10346: 00d5f7b3 and a5,a1,a3 ## dependent
1034a: 078e slli a5,a5,0x3 ## dependent
1034c: 97ce add a5,a5,s3 ## dependent
1034e: 6390 ld a2,0(a5) ## dependent load
10350: e314 sd a3,0(a4)
10352: 0721 addi a4,a4,8
10354: 8eb1 xor a3,a3,a2
10356: e394 sd a3,0(a5)
10358: fee410e3 bne s0,a4,10338 &amp;lt;RandomAccessUpdate+0x52&amp;gt;
1035c: 0505 addi a0,a0,1
1035e: fca91ce3 bne s2,a0,10336 &amp;lt;RandomAccessUpdate+0x50&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>SIMD和Vector</title><link>https://VastCircle.github.io/2024/simd/</link><pubDate>Wed, 18 Dec 2024 17:03:41 +0800</pubDate><guid>https://VastCircle.github.io/2024/simd/</guid><description>&lt;h2 id="simd技术简介">SIMD技术简介&lt;/h2>
&lt;p>&lt;strong>传统的通用处理器都是标量处理器，一条指令执行只得到一个数据结果&lt;/strong>。但对于图像、信号处理等应用，存在大量的数据并行性计算操作，这个时候，提高数据的并行性从而提高运算的性能就显得尤为重要。因此，SIMD技术应运而生。&lt;/p>
&lt;p>&lt;strong>SIMD的英文全称是Single Instruction Multiple Data，即单指令流多数据技术&lt;/strong>，SIMD的概念是相对于SISD（Single Instruction Single Data，单指令流单数据）提出的。&lt;/p>
&lt;h2 id="向量计算技术简介">&lt;strong>向量计算技术简介&lt;/strong>&lt;/h2>
&lt;p>提高数据并行性的另一种方式就是&lt;strong>向量计算技术&lt;/strong>。与传统的SIMD技术一样，其也是通过扩展寄存器位宽，来增加计算的并行度；但不同的是，向量寄存器是可变长度的寄存器，而不像SIMD那样嵌入在操作码中。矢量技术的代表就是RISC-VV扩展指令集和ARM的SVE架构。&lt;/p>
&lt;h2 id="从mmx到sse--再到avx">从MMX到SSE , 再到AVX&lt;/h2>
&lt;p>Pentium MMX系列处理器上新引入的MMX指令集开创了x86处理器支持SIMD操作的先河，该指令集定义了8个64-bit宽度的寄存器，每个寄存器的64-bit容量中可以放入八个8-bit长度的整数或四个16-bit长度整数或两个32-bit整数，CPU在识别到MMX指令集的新指令时会自动将寄存器中的数据进行分割计算，这样一来，单个指令就成功操作了多个数据，实现了SIMD&lt;/p>
&lt;p>但MMX毕竟太嫩，它实际上是通过复用CPU内部x87浮点单元的寄存器来实现SIMD的，所以与运行浮点运算的x87指令集有冲突，两者不能交叉使用，必须先进行切换。另外，由于上述的冲突，它只支持整数操作，在即将要到来的3D时代中显得有些不够用。&lt;/p>
&lt;p>SSE指令集解决了MMX指令集身上存在的两大问题，通过引入新的独立寄存器解决了与浮点运算间的冲突问题，同时也就支持了浮点SIMD运算.它的寄存器宽度随着处理器架构的进步而达到了128-bit.&lt;/p>
&lt;p>但Intel准备在未来的Sandy Bridge架构中引入一套新的SIMD指令集，这套新指令集在2008年公布，被命名为高级向量扩展（&lt;strong>A&lt;/strong>dvanced &lt;strong>V&lt;/strong>ector E&lt;strong>x&lt;/strong>tensions）&lt;/p>
&lt;h2 id="革新的avx越来越宽的寄存器">革新的AVX,越来越宽的寄存器&lt;/h2>
&lt;p>相比起迭代了多年的SSE系列指令集，AVX指令集带来了巨大的革新，其中最为主要的是，它在兼容SSE指令集性的同时，将SSE时代最大宽度为128-bit的寄存器拓宽到了256-bit&lt;/p>
&lt;p>但如果以为Intel会就此停下脚步的话，那就大错特错了，他们很快捣鼓出了更宽的AVX-512指令集，顾名思义，其寄存器宽度再次加倍，来到512-bit。&lt;/p>
&lt;p>宽度越大，处理器的计算能力也就越强，尤其是在浮点运算方面，理论上提升有一倍之多，而实际应用中，如果优化得当，其提升幅度还要大一些。但是，新指令集在带来性能增长的同时也带来了另一个让人感到头痛的问题——功耗。&lt;/p>
&lt;h2 id="举例">举例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// main.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;lt;immintrin.h&amp;gt; // 包含 AVX 指令集头文件&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#61afef;font-weight:bold">matrix_addition_avx&lt;/span>(&lt;span style="color:#e5c07b">float&lt;/span>&lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">A&lt;/span>, &lt;span style="color:#e5c07b">float&lt;/span>&lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">B&lt;/span>, &lt;span style="color:#e5c07b">float&lt;/span>&lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">C&lt;/span>, &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">8&lt;/span>) { &lt;span style="color:#7f848e">// 每次处理 8 个元素（AVX 可以处理 256 位，即 8 个单精度浮点数）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">__m256&lt;/span> &lt;span style="color:#e06c75">vecA&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#61afef;font-weight:bold">_mm256_loadu_ps&lt;/span>(&lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">A&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">__m256&lt;/span> &lt;span style="color:#e06c75">vecB&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#61afef;font-weight:bold">_mm256_loadu_ps&lt;/span>(&lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">__m256&lt;/span> &lt;span style="color:#e06c75">vecC&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#61afef;font-weight:bold">_mm256_add_ps&lt;/span>(&lt;span style="color:#e06c75">vecA&lt;/span>, &lt;span style="color:#e06c75">vecB&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">_mm256_storeu_ps&lt;/span>(&lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">C&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>], &lt;span style="color:#e06c75">vecC&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">8&lt;/span>; &lt;span style="color:#7f848e">// 假设矩阵大小为 8x8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#e06c75">A&lt;/span>[&lt;span style="color:#d19a66">64&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> { &lt;span style="color:#7f848e">/* ... */&lt;/span> }; &lt;span style="color:#7f848e">// 初始化矩阵 A
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#e06c75">B&lt;/span>[&lt;span style="color:#d19a66">64&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> { &lt;span style="color:#7f848e">/* ... */&lt;/span> }; &lt;span style="color:#7f848e">// 初始化矩阵 B
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#e06c75">C&lt;/span>[&lt;span style="color:#d19a66">64&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> { &lt;span style="color:#d19a66">0&lt;/span> }; &lt;span style="color:#7f848e">// 结果矩阵 C
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">matrix_addition_avx&lt;/span>(&lt;span style="color:#e06c75">A&lt;/span>, &lt;span style="color:#e06c75">B&lt;/span>, &lt;span style="color:#e06c75">C&lt;/span>, &lt;span style="color:#e06c75">size&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 输出结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">cout&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">C&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#98c379">&amp;#34; &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">cout&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">endl&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>_m256 vecA = _mm256_loadu_ps(&amp;amp;A[i * size + j])&lt;/code>：从矩阵 A 中加载 8 个浮点数（一次性处理 256 位数据），存储在一个名为 vecA 的 __m256 类型变量中。&lt;/p>
&lt;p>&lt;code>__m256 vecB = _mm256_loadu_ps(&amp;amp;B[i * size + j])&lt;/code>：同样地，从矩阵 B 中加载 8 个浮点数，存储在一个名为 vecB 的 __m256 类型变量中。&lt;/p>
&lt;p>&lt;code>__m256 vecC = _mm256_add_ps(vecA, vecB)&lt;/code>：使用 AVX 指令 _mm256_add_ps 对 vecA 和 vecB 中的浮点数分别进行逐元素加法，并将结果存储在名为 vecC 的 __m256 类型变量中。&lt;/p>
&lt;p>&lt;code>_mm256_storeu_ps(&amp;amp;C[i * size + j], vecC)&lt;/code>：将 vecC 中的 8 个加法结果存储回矩阵 C 的相应位置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;lt;immintrin.h&amp;gt; // 包含 AVX-512 指令集头文件&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#61afef;font-weight:bold">matrix_addition_avx512&lt;/span>(&lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">A&lt;/span>, &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>, &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">C&lt;/span>, &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">16&lt;/span>) { &lt;span style="color:#7f848e">// 每次处理 16 个元素（AVX-512 可以处理 512 位，即 16 个单精度浮点数）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">__m512&lt;/span> &lt;span style="color:#e06c75">vecA&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#61afef;font-weight:bold">_mm512_loadu_ps&lt;/span>(&lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">A&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">__m512&lt;/span> &lt;span style="color:#e06c75">vecB&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#61afef;font-weight:bold">_mm512_loadu_ps&lt;/span>(&lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">__m512&lt;/span> &lt;span style="color:#e06c75">vecC&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#61afef;font-weight:bold">_mm512_add_ps&lt;/span>(&lt;span style="color:#e06c75">vecA&lt;/span>, &lt;span style="color:#e06c75">vecB&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">_mm512_storeu_ps&lt;/span>(&lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">C&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>], &lt;span style="color:#e06c75">vecC&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">16&lt;/span>; &lt;span style="color:#7f848e">// 假设矩阵大小为 16x16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#e06c75">A&lt;/span>[&lt;span style="color:#d19a66">256&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> { &lt;span style="color:#7f848e">/* ... */&lt;/span> }; &lt;span style="color:#7f848e">// 初始化矩阵 A
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#e06c75">B&lt;/span>[&lt;span style="color:#d19a66">256&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> { &lt;span style="color:#7f848e">/* ... */&lt;/span> }; &lt;span style="color:#7f848e">// 初始化矩阵 B
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#e06c75">C&lt;/span>[&lt;span style="color:#d19a66">256&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> {&lt;span style="color:#d19a66">0&lt;/span>}; &lt;span style="color:#7f848e">// 结果矩阵 C
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">matrix_addition_avx512&lt;/span>(&lt;span style="color:#e06c75">A&lt;/span>, &lt;span style="color:#e06c75">B&lt;/span>, &lt;span style="color:#e06c75">C&lt;/span>, &lt;span style="color:#e06c75">size&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 输出结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">size&lt;/span>; &lt;span style="color:#e06c75">j&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">cout&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">C&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#98c379">&amp;#34; &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">cout&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">endl&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://developer.aliyun.com/article/808364" target="_blank" rel="noopener"
>RISC-V生态全景解析(五):Vector向量计算技术与SIMD技术的对比&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://baijiahao.baidu.com/s?id=1670915069941232375&amp;amp;wfr=spider&amp;amp;for=pc" target="_blank" rel="noopener"
>AVX-512&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Vector_runahead</title><link>https://VastCircle.github.io/2024/vector_runahead/</link><pubDate>Tue, 17 Dec 2024 14:50:55 +0800</pubDate><guid>https://VastCircle.github.io/2024/vector_runahead/</guid><description>&lt;h2 id="摘要">摘要&lt;/h2>
&lt;p>内存墙对许多现代工作负载的性能造成了重大限制。这些应用程序具有复杂的依赖间接内存访问链，即使是最先进的微架构预取器也无法获取。结果是，当前无序超标量处理器的大部分时间都处于停滞状态。但是，为了实现高内存级别的并行性，标准的提前执行会在缓存未命中之前跳过。在现代工作负载中，这意味着它只预取每个依赖链中的第一个缺少缓存的load 。我们认为，这不是一个根本的限制。如果 runahead 是在 cache 未命中时停止以生成依赖链load ，那么如果它可以同时在多个 cache 上停止，则可以重新获得性能。&lt;/p>
&lt;h2 id="introduction">introduction&lt;/h2>
&lt;p>1.Runahead执行可以预取独立的Load Miss,但无法处理由相关load 未命中链构成的复杂间接访问模式 (间接加载链:一个加载指令的地址依赖于另一个加载指令的结果),Runahead 执行无法解决数据之间的&lt;strong>依赖关系&lt;/strong>，它仅能处理&lt;strong>无依赖的独立加载&lt;/strong>。&lt;/p>
&lt;p>2.Runahead执行仍然要经过正常的流水线前端,受限于处理器前端的Fetch/Decode/Rename宽度,如果未来指令流中存在大量 &lt;strong>非 Load 指令&lt;/strong>（如算术运算、分支指令等），它们会占据前端处理带宽，导致处理器在进入 Runahead 模式后生成新的 &lt;strong>Load Miss&lt;/strong> 的速率非常低。&lt;/p>
&lt;p>3.Runahead执行的推测深度受限于处理器后端的资源 .包括物理寄存器数量,指令队列插槽 .虽然指令的执行结果不会被提交，但它们仍然占用后端资源（如物理寄存器和调度队列）。一旦这些资源耗尽，Runahead 执行就会停止，无法继续生成新的内存请求。&lt;/p>
&lt;p>Vector Runahead &lt;strong>延长 Runahead 执行的时间&lt;/strong>，直到依赖链中的&lt;strong>所有加载指令都被发出&lt;/strong>，而不仅仅停在第一个阻塞的 Load Miss,这使得 Vector Runahead 能够预取整个load 链。&lt;/p>
&lt;p>Vector Runahead 通过将标量指令重新解释为矢量运算来矢量化 runahead 指令流，以便在不同的偏移量处生成许多不同的缓存未命中。等效增加了取指/解码带宽,同时需要非常少的后端资源，&lt;/p>
&lt;p>Vector Runahead 通过向量展开和流水线发出多轮这些矢量化指令，以更深入地推测并进一步增加有效的提前获取/解码带宽，&lt;/p>
&lt;h2 id="background-and-motivation">background and Motivation&lt;/h2>
&lt;h3 id="blimitations-of-runahead-techniques">B.Limitations of Runahead Techniques&lt;/h3>
&lt;p>标准的 runahead 执行 [25,32,34,57,58] 检查点，并在 fullwindow stall 后释放应用程序的架构状态，并进入 runahead 模式。然后，处理器继续推测性地生成内存访问。当阻塞内存访问返回时，runahead 间隔终止，此时管道被刷新，架构状态将恢复到 runahead 的入口点，并恢复正常执行。runahead 模式期间生成的 prefetches 将未来数据带入处理器高速缓存，从而减少 normal 模式下即将到来的 stall 数量，从而提高性能。&lt;/p>
&lt;p>（1） PRE 利用可用的后端 （issue queue 和物理 register file） 资源在 runahead 模式下推测性地执行指令，因此在进入和退出 runahead 模式时无需释放和刷新处理器状态。（2） PRE 仅推测性地预执行在全窗口停顿后生成内存访问所需的指令。（3） PRE 包括一种在预试模式下快速回收后端资源的机制。PRE 的性能优势来自于在预跑模式和正常模式之间转换时减少了开销，这使得即使在较短的超速间隔内也能超速运行，并且在超速模式下仅调度load 及其地址生成指令，而不是内存访问的依赖项（只要它们不会导致从属load ），从而减少超速模式期间所需的后端资源量。&lt;/p>
&lt;p>PRE无法预取大部分简介访问.超出超前运行间隔范围的访问很快就会使得核心停止运行&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 505;
flex-basis: 1213px"
>
&lt;a href="https://VastCircle.github.io/2024/vector_runahead/image-20241223140211426.png" data-size="273x54">
&lt;img src="https://VastCircle.github.io/2024/vector_runahead/image-20241223140211426.png"
width="273"
height="54"
srcset="https://VastCircle.github.io/2024/vector_runahead/image-20241223140211426_hu12103333356195733819.png 480w, https://VastCircle.github.io/2024/vector_runahead/image-20241223140211426_hu1261487102928176054.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>PRE可以预取A,但是无法预取B,因为B依赖于A,&lt;/p>
&lt;p>硬件跨步预取可以从 A 预取数组元素，从而使 PRE 在超前运行模式下能够从 B 预取数组元素。不幸的是，数据值在超前运行模式下无法预取，因为它们依赖于 B。&lt;/p>
&lt;p>Vector Runahead 在超前运行模式期间沿着内存依赖链对内存访问进行矢量化。对 A 的多个访问并行发生，然后是对 B 的并行访问，然后是并行数据值读取。&lt;/p>
&lt;h3 id="c-vector-runahead-execution-for-dependent-loads">C. Vector Runahead Execution for Dependent Loads&lt;/h3>
&lt;p>如果检测到后续指令依赖于预取指令的话,就无法去执行依赖预取指令的指令,所以PRE无法去执行第一级间接寻址,硬件步幅预取器能够预取对于数组A的跨步访问,所以在后续执行到A指令的时候是缓存命中的,所有可以去预取数组B&lt;/p>
&lt;p>首先，PRE 无法预取依赖load 链上的所有load ，因为链中下一次访问所需的数据不可用&lt;/p>
&lt;p>Vector Runahead 更改了 runahead 模式的终止条件，即，一旦阻塞load 未命中从主内存返回，Vector Runahead 就不会返回正常模式，而是继续 runahead 模式**，直到相关load 链上的所有load 都已发出。**&lt;/p>
&lt;p>Vector Runahead 在 runahead 模式下对动态指令流进行矢量化，这实际上相当于以更快的速率向前运行。当 vector-runahead 模式启动时，对数组 A 的多次访问被矢量化，即，相同的内存操作被推测性地在多个 induction-variable offset 并行发出。&lt;/p>
&lt;p>我们矢量化与可用矢量宽度一样多的副本，在本例中为 8。依赖于数组 A 中的值的指令也被矢量化，包括对数组 B 和依赖数据值的访问.在 runahead 模式下对 dependent instruction stream 进行矢量化，同时保持 runahead 模式直到发出最后一个 dependent load，从而可以推测性地预取整个 dependent loads 链。&lt;/p>
&lt;p>矢量化 runahead 指令流的效果是，在发出下一批依赖内存访问之前，同时从循环的多个迭代中发出相同的内存操作，依此类推。与原始指令流相比，这种对内存访问的有效重新排序使 Vector Runahead 能够首先对 A 发出一批访问，然后对 B 发出一批访问，最后对依赖数据值发出一批访问。（1） 它大大增加了 runahead 模式下的有效获取/解码带宽，即我们一次获取/解码多个循环迭代，以及 （2） 它需要非常少的后端硬件资源，即 vector-runahead 模式下的向量指令对应于原始代码中来自多个循环迭代的多个标量指令， 同时仅占用一个issue queue槽。&lt;/p>
&lt;p>请注意，Vector Runahead 不要求原始代码是可矢量化的，也不需要验证矢量化指令是否保留了原始序列的确切行为——它只在 runahead 模式下对指令流进行矢量化，通过允许许多缓存未命中一次符合预取条件来提高受 memorylatency 限制的代码的性能。&lt;/p>
&lt;h2 id="vector-runahead">Vector Runahead&lt;/h2>
&lt;p>stride Detector 用于查找代码中的常规访问模式，这些模式可用作“归纳变量”，以生成代码的推测矢量化副本。. Once we enter vector-runahead mode (Section III-C), instructions dependent on this vectorized stride pattern are tracked by a &lt;strong>taint vector&lt;/strong> (Section III-D), and vectorized themselves (Section III-E): address-calculating arithmetic operations are converted into vector-unit operations, and the dependent loads themselves into vector gathers.假定分支在每个矢量化副本中匹配，掩码用于处理其他情况（第 III-F 节）。为了进一步将内存级并行性提高到比单个向量负载支持的更高水平，我们设计了向量展开和流水线技术（第 III-G 节）来同时发出许多未来的负载。由于这导致旧标量指令和新矢量指令之间存在一对多的关系，因此在前端引入了矢量寄存器分配表 （VRAT） 用于寄存器分配（第 III-H 节），在后端引入了寄存器释放队列 （RDQ）（第 III-I 节）。一旦我们完成了每次展开的迭代，Vector-runahead 模式就终止了（第 III-J 节），其中每次迭代都会执行所有依赖于矢量化步幅负载的载荷。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 447;
flex-basis: 1074px"
>
&lt;a href="https://VastCircle.github.io/2024/vector_runahead/image-20241223143442077.png" data-size="1321x295">
&lt;img src="https://VastCircle.github.io/2024/vector_runahead/image-20241223143442077.png"
width="1321"
height="295"
srcset="https://VastCircle.github.io/2024/vector_runahead/image-20241223143442077_hu9890093979236076169.png 480w, https://VastCircle.github.io/2024/vector_runahead/image-20241223143442077_hu12246041980701418868.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="detecting-striding-loads">Detecting Striding Loads&lt;/h3>
&lt;p>为了检测代码中的序列，我们可以从中生成归纳变量以矢量化未来的内存访问，我们使用一个简单的参考预测表 [19,62]，该表在每个加载指令执行后更新。它由加载 PC 编制索引，每个条目维护四个字段：（1） 最后访问的内存地址;（2） 最后一次观察到的负载步幅;（3） 一个 2 位饱和计数器，用于指示置信度;（4） 指令链中来自跨步负载的最终从属负载的终止符或v PC。&lt;/p>
&lt;p>由此，一旦我们进入 vector-runahead 模式，我们就可以生成新指令流，以根据跨步加载、计算和其他中间内存访问生成未来的间接内存访问。前 3 个字段 （1） 到 （3） 是参考预测表 [19] 的标准字段。最后一个字段 （ 4） 是新的，在一轮 vector runahead 期间填充，它允许我们在 vector-runahead 模式下完成所有有用的工作后提前终止（第 III-J 节）。&lt;/p>
&lt;h3 id="entering-vector-runahead">Entering Vector Runahead&lt;/h3>
&lt;p>当加载指令阻塞 ROB 头部后，满足以下两个条件之一时，内核进入超前运行模式： **(1) ROB 已充满指令；或 (2) 问题队列已满至其满容量的 80%。**除了为从分支错误预测中恢复而存储的检查点之外，Vector Runahead 通过为前端 RAT 的每个条目存储一个检查点来对 PC 和前端寄存器分配表 (RAT) 设置检查点。这标志着进入超前运行模式。当我们返回正常模式时，处理器状态将恢复到该检查点。&lt;/p>
&lt;p>进入超前运行模式后，处理器继续获取、解码并执行未来的指令。我们访问每个加载指令的步幅检测器。在我们达到跨步负载之前，或者如果不存在这样的跨步负载，Vector Runahead 的执行与 PRE [64] 类似，但不使用其完全关联的停顿切片表，Vector Runahead 消除了这种需要，以避免损害没有此类模式的工作负载，并捕获 Vector Runahead 稍后使用的任何标量依赖关系。同样，这种模式的行为类似于传统的超前执行[57]，只是具有主动寄存器回收和高效的检查点[64]。当我们解码跨步负载（置信度 = 3）时，开始进入向量运行模式。我们对跨步负载进行矢量化，然后是依赖于它的指令序列。当检测到相同跨步负载的另一个动态实例或依赖链完成时，该过程终止（第 III-J 节）。我们将两个动态跨步加载实例之间的依赖指令称为间接链&lt;/p>
&lt;h3 id="taint-vector">Taint Vector&lt;/h3>
&lt;p>为了跟踪哪些操作（传递地）依赖于指令流中新矢量化的跨步加载，我们使用污点向量（TV）。&lt;strong>它为每个架构整数寄存器提供一个条目，并存储两个标志：(1) 写入该寄存器的前一条指令是否是向量化操作（向量化位）； (2) 之前写入该寄存器的指令是否无效（无效位）&lt;/strong>。 TV 在超前运行开始时是空的，因为每当超前运行终止时它都会被清除。向量化位最初是为发现的跨步负载的目标架构寄存器设置的。无效位最初是根据不支持的操作的目标设置的，例如，那些将浮点操作作为输入的操作（它们总是无效的，因此不需要 TV 条目）。这两个位都是使用矢量污点跟踪来传播的，这是一种在需要时传播矢量化的机制。如果指令的任何输入寄存器被标记，则目标寄存器也会被标记。如果没有标记输入寄存器，则目标寄存器的标志未设置。没有位集的指令作为传统标量先行操作发出，并被视为相对于当前向量先行模式迭代中指令序列的向量化副本的循环不变。具有无效位集的指令将被丢弃，而仅具有向量化位集的指令将被向量化。&lt;/p>
&lt;h3 id="vectorizing-instructions">Vectorizing Instructions&lt;/h3>
&lt;p>矢量化是通过微编程例程执行的，该例程生成输入标量指令的矢量化版本。对于跨步加载，矢量化器通过将跨步加载访问的当前内存地址及其步幅作为输入来生成其矢量化版本。矢量化器生成一个 512 位矢量加载指令，并将矢量指令注入到管道中（参见第 III-G 节，了解如何生成多个 512 位矢量指令）。无论输入位宽如何，这个 512 位向量中都适合 8 个标量操作数，因此我们可以对最高 64 位的任何大小进行操作。我们假设每个矢量指令都使用 512 位矢量寄存器（类似于 Intel AVX-512）作为其源和目标，并且&lt;strong>我们重用微架构的物理矢量寄存器，以及由微架构的矢量单元实现的微操作&lt;/strong>。&lt;/p>
&lt;p>同样，我们根据跨步负载（直接或间接）对所有算术和加载指令进行矢量化，并生成相应的 512 位矢量版本。&lt;strong>所有矢量化指令都使用矢量寄存器分配表 （VRAT） 重命名&lt;/strong>（第 III-H 节）。重命名的指令被调度到处理器后端，在那里它们被推测地执行。可能存在依赖于跨步负载的加载指令链，例如，在多级间接依赖负载的情况下（如在指针跟踪代码中）。&lt;strong>在这种情况下，形成依赖关系链的所有加载指令都被矢量化为 gather 操作，并且在 runahead 开始时为空，则使用最新依赖 gather 负载的 PC 更新步幅表的终止符（第 III-B 节）&lt;/strong>。因此，Vector Runahead 可以为多级间接内存访问生成内存级并行性。如果 vector 中的单个通道生成无效的内存访问，则单个通道被标记为无效，这会导致后续矢量化指令中的通道被屏蔽，并忽略其执行。&lt;/p>
&lt;p>在 runahead 模式下执行的指令仅在生成内存访问时有用，并且它们的状态不在 ROB 中维护。因此，在 runahead 模式下不会分配任何 ROB 条目。相反，我们使用更简单的 register deallocation queue [64] （RDQ， Section III-I） 来处理 register 可用性。由于浮点指令很少用于计算地址本身，因此我们忽略了此类指令（将它们标记为无效和任何使用它们的指令 [57]），以及 stores 以及原始代码中已经矢量化的任何指令。&lt;/p>
&lt;h3 id="control-flow">Control Flow&lt;/h3>
&lt;p>&lt;strong>在矢量化时，我们隐含假设所有矢量通道将遵循彼此相同的控制流模式&lt;/strong>。然而，当以向量运行模式执行时，当通道遇到分支指令时，通道之间可能会出现分歧。我们使用微操作将标量分支转换为八个向量通道的谓词掩码。由于 Vector Runahead 不需要覆盖所有代码，因此我们仅使用第一个通道的结果来确定分支的方向，并屏蔽掉可能采用不同控制路径的任何通道。这种屏蔽一直持续到我们终止向量运行的单次迭代为止。相比之下，单个向量超前运行间隔内的不同展开迭代（第 III-G 节）可能遵循独立的控制流。&lt;/p>
&lt;h3 id="vector-unrolling-and-pipelining">Vector Unrolling and Pipelining&lt;/h3>
&lt;p>这种基本的 Vector Runahead 存在以下主要缺点，如图 4(a) 所示，假设处理器向量宽度为 four1： (1) 它在执行流中没有向前移动足够远 — 限制了及时性； (2) 没有在超前运行模式上花费足够的时间——限制覆盖范围； (3) 它没有发出足够的同时加载来使未命中状态保持寄存器 (MSHR) 饱和——限制了 MLP。&lt;/p>
&lt;p>为了解决前两个问题，我们在返回正常模式之前发出&lt;strong>多轮向量超前运行&lt;/strong>，这个过程称为向量展开（图 4(b)）。第一轮完成后，我们为跨步序列中识别的下一个 N 个值发出向量负载，其中 N 是向量中的单词数（本例中为 4，对于 AVX-512 为 8）。然后我们重复此操作，递增跨步加载的地址，直到我们发出 U （展开长度）、向量运行序列的副本。如果 N = 8 且 U = 8，我们在离开向量运行模式之前对原始标量循环进行 64 次迭代。&lt;/p>
&lt;p>&lt;font color='red'> 为什么要访问完value之后再发起新一轮vector runahead &lt;/font>&lt;/p>
&lt;p>后面的向量流水线就是解决这个问题的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 267;
flex-basis: 641px"
>
&lt;a href="https://VastCircle.github.io/2024/vector_runahead/image-20250102141939627.png" data-size="735x275">
&lt;img src="https://VastCircle.github.io/2024/vector_runahead/image-20250102141939627.png"
width="735"
height="275"
srcset="https://VastCircle.github.io/2024/vector_runahead/image-20250102141939627_hu5968978563125950778.png 480w, https://VastCircle.github.io/2024/vector_runahead/image-20250102141939627_hu11158094528699958395.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 334;
flex-basis: 802px"
>
&lt;a href="https://VastCircle.github.io/2024/vector_runahead/image-20250102142145025.png" data-size="859x257">
&lt;img src="https://VastCircle.github.io/2024/vector_runahead/image-20250102142145025.png"
width="859"
height="257"
srcset="https://VastCircle.github.io/2024/vector_runahead/image-20250102142145025_hu2914281280485461149.png 480w, https://VastCircle.github.io/2024/vector_runahead/image-20250102142145025_hu8318292191717022212.png 1024w"
loading="lazy"
alt="image-20250102142145025">
&lt;/a>
&lt;figcaption>image-20250102142145025&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>我们不是等待上一轮 Vector Runahead 完成后再开始下一轮，而是同时发出每个向量化指令的多个副本，所有副本都具有不同前瞻距离的跨步加载输入，从而在标量和向量之间创建一对多映射指示。&lt;/p>
&lt;p>这使我们能够并行向 A 发出两个向量负载（1 和 2），然后再继续并行发出它们的依赖项（3 和 4），最后是 5 和 6。虽然流水线更好地允许我们提取内存级并行性，但这样做是有限制的，因为我们永远无法为比 MSHR 还要多的同时缓存未命中提供服务。**不同管道组中展开的向量可以重用相同的物理寄存器，因为它们不是同时存在的。**相比之下，矢量流水线故意重叠不同展开迭代的物理寄存器的生命范围，并且还增加了 VRAT 大小（第 III-H 节）。默认情况下，我们假设展开长度 U 和管道深度 P 均为 8，这允许我们同时发出 64 个标量负载的矢量集合。虽然我们在实现中对这些进行了硬编码，但它们可以根据观察进行动态调整&lt;/p>
&lt;h3 id="vector-rat">Vector RAT&lt;/h3>
&lt;p>对于每个标量架构寄存器输入，当设置向量化位时，我们必须重定向新的向量指令到适当的源向量物理寄存器。通常，寄存器分配表（RAT）将架构标量寄存器重命名为物理标量寄存器。然而，我们必须重命名为物理向量寄存器，并且通过添加向量流水线（第 III-G 节），我们在架构标量寄存器和重命名的物理向量寄存器之间具有一对多关系。对于 4 的流水线深度，我们需要将架构标量寄存器重命名为 4 个独立的向量物理寄存器（每个寄存器覆盖 8 个数据元素）。这意味着我们添加一个新的向量寄存器分配表 (VRAT)，每个架构整数寄存器具有 P 个条目，记录分配给指令的 P 个流水线副本的 P 个目标物理向量寄存器。当我们在 VRAT 中查找这些 P 寄存器时，新向量化指令的每个 P 副本都使用 P 条目之一作为其自己的输入。这使我们能够区分向量流水线布置中单独流水线迭代的输入和输出，从指令获取的角度来看，这些迭代都是同一指令的别名。 16 个整数寄存器中的每一个都需要 P 个条目，这些寄存器的大小通常很小。&lt;/p>
&lt;h3 id="managing-pipeline-resources-during-runahead">Managing Pipeline Resources During Runahead&lt;/h3>
&lt;p>必须有足够数量的未使用的发出队列和物理（标量和向量）寄存器文件条目，用于推测执行导致间接加载的间接链。在Vector Runahead中，一条向量指令从调度到执行占据一个发出队列条目。执行后，问题队列条目被释放并可以分配给较新的指令，类似于标准的 OoO 内核。与issue queue不同，物理寄存器文件条目不能乱序释放。**在 OoO 内核中，仅当提交新指令写入物理寄存器映射到的同一架构寄存器时，才会释放物理寄存器 [78]。**由于我们不在先行模式下提交指令，因此内核可能会因物理寄存器不可用而停止运行，&lt;strong>因此当地址生成不再需要寄存器时，Vector Runahead 会释放该物理寄存器。&lt;strong>这是&lt;/strong>通过一个简单的有序寄存器释放队列（RDQ）来完成的&lt;/strong>，PRE [64]也使用了这个队列。&lt;strong>在 VRAT 中查找每条指令，以查看 P（矢量流水线下）物理矢量寄存器，该寄存器保存最后写入同一架构寄存器的指令的目的地，一旦新指令到达流水线末端，该寄存器就会失效&lt;/strong>。 P 个向量流水线指令副本，从单个标量指令生成并作为独立向量操作发布，每个副本都有自己的 RDQ 条目，覆盖 P 个即将失效的物理向量寄存器之一。&lt;/p>
&lt;p>图 5 显示了在 RandAcc 基准测试的热循环上运行的 RDQ，假设 P = 2。指令 #1 及其流水线副本 #2 是跨步加载，它们根据跨步检测器加载地址。在进入向量运行模式之前，我们假设S1..3是标量物理寄存器，当前分别存储rdx、rdi和rbp； S4是一个免费的物理标量寄存器； P 1..15 是自由物理向量寄存器。除了 #3 和无效存储之外的所有指令形成两个间接链，导致间接加载 #16 和 #17，因此除了指令 #3 和 store 之外的所有内容都被矢量化。在每条指令旁边，我们显示源和目标物理寄存器 ID 以及 RDQ 的内容，**其中包括要释放的物理寄存器 ID（在安全的情况下）和一个指示指令是否已执行的位。**为每个矢量化指令分配一个 RDQ 条目;没有为无效指令分配 RDQ 条目，例如以深灰色存储 -mark。RDQ 维护一个指向第一个未执行的指令的头指针;在我们的示例中，头指针指向已执行较新指令 #7all 并标记为浅灰色的指令。当指令到达 RDQ 的头部并已执行时，RDQ 会释放指示的物理寄存器并移动头部指针。到目前为止唯一被释放的向量寄存器是 P 1，它被重新用于指令 #17.一旦 #7 执行，寄存器 P 2 和 P 5 将被释放（因为指令 #8 也被执行），头指针将移动到指令 #9。&lt;/p>
&lt;p>&lt;font color='red'>它不记录目的寄存器吗&lt;/font>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Decoupled_Vector_Runahead</title><link>https://VastCircle.github.io/2024/decoupled_vector_runahead/</link><pubDate>Tue, 17 Dec 2024 12:28:27 +0800</pubDate><guid>https://VastCircle.github.io/2024/decoupled_vector_runahead/</guid><description>&lt;h2 id="摘要">摘要&lt;/h2>
&lt;p>我们提出了解耦矢量预取 （DVR），这是一种内核内预取技术，与主应用程序线程分开执行，它利用大量内存级并行性来提高具有间接内存访问功能的应用程序的性能。DVR 在运行时动态推断循环边界，识别跨步负载，并矢量化作为间接链一部分的后续指令。它会主动为将来的负载发出内存访问，即使无序内核尚未停止，也会将其数据带入 L1 缓存，从而为主线程提供及时的预取。DVR 可以在运行时调整矢量化程度，在内部循环的多次调用中对同一间接内存访问链进行矢量化，并有效地处理沿矢量化链的分支发散。DVR 作为按需、推测性、按顺序、轻量级硬件子线程与内核内的主线程一起运行，并且产生的最小硬件开销仅为 1139 字节。相对于大型超标量 5 宽无序基线和 Vector Runahead（一种用于加速乱序处理器上的间接内存访问的最新微架构技术），DVR 为一组图形分析、数据库和 HPC 工作负载提供了 2.4× 和 2× 的性能。&lt;/p>
&lt;h2 id="introduction">introduction&lt;/h2>
&lt;p>Vector Runahead 不像早期的 runahead 提案那样跳过工作 [29,40,62,66] 来不断发现内存级并行性，而是将在 runahead 模式下执行的瞬态执行重新格式化为主要基于循环级并行性，遵循程序中未来循环迭代中许多不同依赖内存访问链的独立组，并以矢量化方式运行它们以减少前端和后端管道资源需求。&lt;/p>
&lt;p>传统 Runahead 依赖于主线程的停滞条件，当处理器在 &lt;strong>ROB（Reorder Buffer）&lt;/strong> 上停滞时才启动 Runahead 模式。DVR在一个轻量级,有序的子线程上下文中运行runahead进程 ,即使内核没有在完整的ROB上停滞,也允许启动,并允许主线程继续在其预期的计算上取得进展.&lt;/p>
&lt;p>其次，它基于 VR 构建，在推测性提前上下文中的许多未来循环迭代产生的许多动态生成的 “通道” 上实现了 GPU 风格的发散和再收敛。&lt;strong>发散&lt;/strong>：动态生成的通道可以独立执行，允许预取大量潜在的内存请求。&lt;strong>再收敛&lt;/strong>：将这些发散的执行路径重新合并，从而有效组织内存请求，避免资源浪费。&lt;/p>
&lt;p>第三，它在主计算的线程中执行发现模式，以精确预测将访问多少个未来的循环，以限制不准确的预取。当 DVR 发现 &lt;strong>单个发现模式&lt;/strong>（仅外部循环）不足以覆盖足够的未来循环时，它进一步&lt;strong>深入内部循环&lt;/strong>,然后可以有效地将所有这些输入矢量化在一起，以实现极端的内存级并行性.&lt;/p>
&lt;p>DVR 技术可以&lt;strong>大幅提前&lt;/strong>预取那些会导致缓存未命中的 load 指令,避免它们在 ROB 中长时间占据资源&lt;/p>
&lt;p>DVR 意味着 runahead 不再是乱序处理器的超大指令窗口的替代品&lt;/p>
&lt;h2 id="background">background&lt;/h2>
&lt;h3 id="间接内存访问-indirect-memory-accesses">间接内存访问 (Indirect Memory Accesses)&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 341;
flex-basis: 819px"
>
&lt;a href="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241217200930813.png" data-size="645x189">
&lt;img src="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241217200930813.png"
width="645"
height="189"
srcset="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241217200930813_hu18053708814167547954.png 480w, https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241217200930813_hu15723172993509979074.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>数组A[i]是顺序访问的.但是,访问数组 B 的索引是通过对 A 的特定索引处的值进行哈希处理来计算的，而数组 C 的索引是通过对 B 的访问进行哈希处理来计算的。也就是说，对 C 的访问依赖于对 B 的访问，而对 B 的访问又依赖于对 A 的访问。对 B 和 C 的访问分别称为间接内存访问的第一级和第二级，数组 A 的访问和对数组 C 的访问之间的指令链称为间接链.&lt;/p>
&lt;p>当访问需要多级间接寻址时，Runahead 的执行将因为前一级 Load 未完成而停滞，无法预取后续地址。对于图 1 中的示例，根据工作跳过技术，数组 C 的输入将无效，或者无法在提前终止之前返回.&lt;/p>
&lt;p>受到处理器前端宽度和runahead 间隔的限制。&lt;/p>
&lt;h3 id="vector-runahead">Vector runahead&lt;/h3>
&lt;p>&lt;strong>自动生成不同索引&lt;/strong>,在遇到间接链开始的跨步 &lt;code>load&lt;/code> 时，VR 会自动推测出多个不同偏移量的索引地址。这些地址会被解析并产生多个新的指令，模拟未来循环迭代中的不同访问位置。&lt;/p>
&lt;p>将不同索引处的指令进行&lt;strong>重排序&lt;/strong>，并同时发送多个 &lt;code>load&lt;/code> 指令到内存系统。当处理器遇到 &lt;code>load&lt;/code> 指令链时，不是按顺序执行一个接一个的加载，而是&lt;strong>并行等待多个加载&lt;/strong>返回。&lt;/p>
&lt;p>向量化标量指令以节约后端资源,将多个重排序的标量指令&lt;strong>分组为向量&lt;/strong>指令。&lt;strong>向量化&lt;/strong>使得多个 &lt;code>load&lt;/code> 或计算操作可以同时发出，并通过一个向量操作完成。&lt;/p>
&lt;p>延迟终止,生成完整的内存访问链.继续运行 Runahead 模式，直到生成完整的间接内存访问链。通过这种&lt;strong>延迟终止&lt;/strong>，VR 能够覆盖更多的内存加载并提高预取的覆盖范围。&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;h3 id="vector-runahead-的劣势">Vector Runahead 的劣势&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>ROB增大时性能提升减少 ,ROB的大小一直在增加,需要跟多周期才能填充,进入runahead模式的机会随着ROB大小的增大而减少 .因此为了能够最大限度的利用预取机会,&lt;/p>
&lt;p>&lt;strong>VR不能等待full-ROB stall .&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在**矢量超前执行（Vector Runahead, VR）**中，超前执行模式的终止是基于将整个间接内存访问链中的所有加载指令进行矢量化并生成预取。这意味着，尽管原本导致重排序缓冲区（ROB）填满的加载指令可能已经从内存中返回，但 VR 依然保持超前执行状态，直到处理完所有相关的加载指令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无法适应运行时特征。Vector Runahead 尝试为每个标量负载生成尽可能多的收集。**目标是通过保持所有未命中状态保持寄存器 （MSHR） 被未完成的内存访问占用来实现高内存级并行性。**对于类似于广度优先搜索,循环长度与图的大小和结构相关,这意味着Vector Runahead 会预取大量数据，而这些数据在真实执行中永远不会被访问.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ &lt;strong>VR 需要 （i） 了解它运行的每个循环的数据依赖性的动态迭代次数，以避免获取无用的数据，以及 （ii） 每次运行时更新它以响应最新的运行时值&lt;/strong>&lt;/p>
&lt;ol start="4">
&lt;li>无法矢量化同个循环的多个调用.希望不仅从循环内部运行许多加载，而且同时从不同的外部循环运行许多不同版本的内循环。&lt;/li>
&lt;/ol>
&lt;p>如果动态确定单个循环太小而无法使内存系统饱和，VR 需要提前查看同一循环的许多未来迭代，方法是向前跳以发现来自将在不久的将来执行的不同外部循环迭代的相同代码的输入。&lt;/p>
&lt;ol start="5">
&lt;li>在 &lt;strong>Vector Runahead (VR)&lt;/strong> 执行中，控制流分歧（Control-Flow Divergence）是一个挑战. 一旦在矢量化指令集中发生控制流分歧，VR 将失去对所有分支路径的跟踪，无法继续执行预取操作. 就是if 的存在会使得直接跳出循环,使得后续的预取全部失效.&lt;/li>
&lt;/ol>
&lt;p>GPU的单指令多线程(SIMT)模型,支持分支重合和分支分歧&lt;/p>
&lt;p>&lt;strong>分支分歧&lt;/strong>：当某个矢量化通道在执行过程中遇到控制流分歧时，VR 可以允许每个通道独立地执行不同的路径，就像在 GPU 中，线程可以在遇到分支时分别执行不同的路径。&lt;/p>
&lt;p>&lt;strong>分支重合&lt;/strong>：在分支结束后，VR 可以重新将所有矢量化通道合并到一个统一的控制流中，避免各个通道分支的不同执行路径对整体性能的影响。&lt;/p>
&lt;h2 id="dvr微架构">DVR微架构&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 271;
flex-basis: 652px"
>
&lt;a href="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241217210543320.png" data-size="1348x496">
&lt;img src="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241217210543320.png"
width="1348"
height="496"
srcset="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241217210543320_hu9939517555593631683.png 480w, https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241217210543320_hu10285306206105120918.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>跨步检测器(stride detector)从管道的调度和执行(dispatch and execute)阶段获取有关负载的信息。一旦检测到跨步，DVR 就会进入发现模式(Discovery Mode)，该模式使用污点跟踪器和循环绑定检测器(Taint Tracker and Loop-Bound Detector)来发现后续运行的信息。如果发现模式发现循环中需要向量化的元素太少，则将使用嵌套发现模式(Nested Discovery Mode)逻辑。一旦发现模式完成，向量程序计数器 vector program counter (PCv) 将填充跨步加载的 PC，VRAT 将填充跨步加载地址和主线程标量寄存器的副本，以及解耦的向量运行子线程将启动。再收敛堆栈(Reconvergence Stack)将在矢量通道之间的控制流出现分歧时进行处理。&lt;/p>
&lt;p>DVR 通过引入一个与主线程并行执行的&lt;strong>专用子线程&lt;/strong>，来预取未来的内存访问，从而在不干扰主线程执行的情况下提高性能。&lt;/p>
&lt;p>核发现它正在执行具有相关负载的循环时，基于可用于预测未来循环迭代的跨步负载，将在与当前正在执行的主线程相同的内核上激活专用的 vector-runahead 子线程。此子线程是动态生成的，用于将许多内存访问预取到将来，但不会影响主线程的语义。vector-runahead 子线程在同一内核上与主线程一起运行，很像线程在同步多线程 （SMT） [91] 中协同执行的方式，不同之处在于子线程是微架构生成的、瞬态的（预取到缓存中而不是实现实际计算）、推测性的、重新排序以实现极高的内存级并行性，并且明显更简单，即子线程按顺序执行。&lt;/p>
&lt;p>为了从这个按顺序向量运行子线程实现高内存级并行性，即使遵循使子线程停顿的依赖负载链，我们使用单指令多线程 （SIMT） 数据级并行性 [54]，从前端执行大量每条指令，每条指令同时代表不同的循环迭代，从而预取到很远的未来。由于这种情况是连续发生的，并且与主线程的执行重叠，因此大多数主乱序线程的内存访问在到达 L1 时都会命中 - 因此，即使对于具有巨大窗口的超大型处理器，也可以实现显著的加速。&lt;/p>
&lt;h3 id="41-discovery-mode">4.1 Discovery Mode&lt;/h3>
&lt;p>系统需要识别一个合适的诱导变量加载（induction-variable load），以便从中派生出多个未来循环的副本.这个过程首先通过检测一个&lt;strong>步幅加载&lt;/strong>来开始，步幅加载是指访问内存时采用规律的地址序列（即具有可预测步幅的加载）。Discovery Mode的目的（i） 检查跨步负载是否是最适合 DVR 的候选者，通过成为最内层的跨步负载，（ii） 派生循环边界，以确定要生成多少个推测性向量预取，以及 （iii） 发现是否有任何基于跨步负载的依赖负载可以由 vector-runahead 子线程适当地预取。Discovery Mode 通过循环的一次迭代跟踪主线程的执行，直到它再次达到跨步加载，此时它退出 Discovery Mode。&lt;/p>
&lt;h4 id="411-最内层步幅加载检测">4.1.1 最内层步幅加载检测&lt;/h4>
&lt;p>一旦检测到初始的步幅加载并进入&lt;strong>发现模式（Discovery Mode）&lt;/strong>，系统会继续跟踪主线程的执行，检测其他可能更适合启动向量超前执行的步幅加载。特别是，系统可能会发现某个步幅加载属于一个更内层的循环，且如果在向量超前执行模式下预取它们的未来迭代，这些加载将更加及时。因此，&lt;strong>步幅加载检测&lt;/strong>的目标是识别最合适的内层循环加载。(对于内层循环,确实会更快的进入steady状态)&lt;/p>
&lt;h5 id="步幅加载检测流程">步幅加载检测流程：&lt;/h5>
&lt;ol>
&lt;li>&lt;strong>使用参考预测表（RPT）&lt;/strong>： 步幅加载检测是通过使用**参考预测表（RPT）**来完成的。RPT跟踪所有步幅加载及其对应的步幅。RPT中保存了每个步幅加载的位图（bit-map），每个条目对应一个加载，且每个条目中有一位用于表示该步幅加载的状态。&lt;/li>
&lt;li>&lt;strong>检测新步幅加载&lt;/strong>： 系统会保持一个寄存器，初始值为零，并且每个RPT条目都有一个对应的位。当一个步幅加载被检测到时，它会将对应的位设置为1。如果在&lt;strong>发现模式&lt;/strong>中，在当前目标步幅加载之前，已经见过相同的步幅加载地址（程序计数器PC），并且对应位已经被设置为1，则表示这个新步幅加载属于一个更内层的循环。&lt;/li>
&lt;li>&lt;strong>切换到更内层步幅加载&lt;/strong>： 当检测到新的步幅加载属于更内层循环时，系统会切换到该步幅加载上继续执行&lt;strong>发现模式&lt;/strong>。这时需要重置之前的寄存器和其他相关的状态信息，如&lt;strong>VTT&lt;/strong>（向量目标表）和&lt;strong>FLR&lt;/strong>（加载结果队列），以确保新的步幅加载被正确处理。&lt;/li>
&lt;li>&lt;strong>选择触发步幅&lt;/strong>： 系统可以在同一个循环中向量化多个步幅加载（例如，因循环展开导致的多个步幅加载）。在这种情况下，系统会选择一个步幅加载作为向量化的触发器，通常优先选择最内层的步幅加载，因为它会更频繁且更及时地被执行。&lt;/li>
&lt;/ol>
&lt;h5 id="补充rpt">补充(RPT)&lt;/h5>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 148;
flex-basis: 355px"
>
&lt;a href="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218114917559.png" data-size="680x459">
&lt;img src="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218114917559.png"
width="680"
height="459"
srcset="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218114917559_hu1241057847065859796.png 480w, https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218114917559_hu6107072329876365025.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 130;
flex-basis: 314px"
>
&lt;a href="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218115252006.png" data-size="588x449">
&lt;img src="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218115252006.png"
width="588"
height="449"
srcset="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218115252006_hu9025556592825104260.png 480w, https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218115252006_hu13549264763494486546.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>correct : addr = prev_addr + stride , incorrect : addr != prev_addr + stride&lt;/p>
&lt;p>A.1.没有对应的条目。指令输入到RPT中，prev addr字段设置为addr，stride设置为0，state设置为initial&lt;/p>
&lt;p>A.2.有相应的条目。然后：&lt;/p>
&lt;p>When incorrect and state = initial , Set prev_addr to addr , stride to (addr - prev_addr) ,and state to transient&lt;/p>
&lt;p>when correct and (state = initial ,transient , or steady), set prev_addr to addr , leave stride unchanged ,and set state to steady&lt;/p>
&lt;p>when incorrect and state = steady: set prev_addr to addr , leave stride unchanged , and set state to initial&lt;/p>
&lt;p>when incorrect and state = transient , set prev_addr to addr , stride to addr - prev_addr and state = no prediction&lt;/p>
&lt;p>when correct and state = no prediction , set prev_addr to addr , leave stride unchange , and set state to transient&lt;/p>
&lt;p>when incorrect and state = no prediction : set prev_addr to addr , stride to addr - prv_addr , and leave state unchanged&lt;/p>
&lt;p>和分支预测类似, 在 steady 状态时,两次连续的错误才会修改 stride&lt;/p>
&lt;p>在initial , transient , 和 steady状态如果miss会去启动预取&lt;/p>
&lt;h4 id="412-依赖加载检查dependent-load-checking">4.1.2 依赖加载检查（Dependent-Load Checking）&lt;/h4>
&lt;p>为了使向量超前执行（DVR）触发有意义，它必须带来比简单的步幅预取器更有用的数据到缓存中。我们假设系统中总会有一个步幅预取器，并且始终保持启用（即使向量超前执行并未触发）。这意味着，必须有更多依赖于通过步幅检测器识别出的值的加载操作，才有必要启动向量超前执行。&lt;/p>
&lt;p>为此，我们使用一个小型的&lt;strong>向量污染跟踪器&lt;/strong>（Vector Taint Tracker，VTT），它为每个架构整数寄存器分配一个比特位，以标识将来会被向量化的指令。&lt;/p>
&lt;p>&lt;strong>初始化VTT&lt;/strong>： 在进入发现模式（Discovery Mode）时，VTT被初始化为全零，除了触发步幅加载的目标架构寄存器，该寄存器的位被设置为1。也就是说，我们将初始步幅加载指令的目标寄存器的污染位设置为1，表示该寄存器将在未来的指令中被使用并可能被向量化。&lt;/p>
&lt;p>&lt;strong>污染传播&lt;/strong>： 在发现模式中，污染通过指令进行传播。具体来说，如果某条指令的源寄存器已经被污染（VTT中的比特位为1），那么该指令的目标寄存器的污染位会被设置为1。这样，后续的指令就知道它们依赖于先前的污染寄存器。&lt;/p>
&lt;p>&lt;strong>重置污染位&lt;/strong>： 如果某条指令写入的寄存器的污染位已经设置为1，但它的源寄存器并未被污染，那么该目标寄存器的污染位会被重置为0。这是因为该指令并没有依赖于污染寄存器的内容，所以它不需要向量化。&lt;/p>
&lt;p>&lt;strong>最终加载寄存器（FLR）&lt;/strong>： 每当某个加载指令的输入被污染时，最终加载寄存器（Final-Load Register，FLR）会更新为该加载指令的程序计数器（PC）。FLR用于跟踪&lt;strong>从触发步幅加载&lt;/strong>开始的依赖链中最后一个加载指令的PC。&lt;/p>
&lt;h4 id="413-循环边界推断loop-bound-inference">4.1.3 循环边界推断(Loop-Bound Inference)&lt;/h4>
&lt;p>它决定了在 &lt;strong>Discovery Mode&lt;/strong> 阶段，应该为当前内循环执行多少次预测性的向量预取（speculative vector prefetches）。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>检测循环开始&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在 &lt;strong>Discovery Mode&lt;/strong> 中，首先会检测到一个向后跳转的分支（backward branch），这个分支指示一个循环的开始。&lt;/li>
&lt;li>通过该分支的比较指令（compare instruction）来确定循环的边界（loop bound）。具体而言，这个比较指令提供了控制流是否应继续执行的依据，并且它的操作数会帮助推断循环的边界。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>重要数据结构&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>LCR (Last-Compare Register)&lt;/strong>：用于保存上一个比较指令的源和目标寄存器的 ID。&lt;/li>
&lt;li>&lt;strong>SBB (Seen-Branch Bit)&lt;/strong>：这个标志位用于记录是否已经处理过这个分支。每次更新 &lt;strong>Final-Load Register (FLR)&lt;/strong> 时，&lt;strong>LCR&lt;/strong> 和 &lt;strong>SBB&lt;/strong> 都会被清零。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>检查比较指令与分支&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当发现一个比较指令并且 &lt;strong>SBB&lt;/strong> 为零时，会将比较指令的源和目标寄存器的 ID 存入 &lt;strong>LCR&lt;/strong>。&lt;/li>
&lt;li>如果后续遇到一个分支，且该分支的源寄存器与 &lt;strong>LCR&lt;/strong> 中保存的目标寄存器相匹配，并且该分支跳转的目标地址小于或等于 &lt;strong>striding load&lt;/strong> 的程序计数器（PC），则表示当前分支属于该循环，更新 &lt;strong>SBB&lt;/strong>，以指示不再修改 &lt;strong>LCR&lt;/strong>，直到发现新的最终加载指令。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>循环边界推断&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过进入 &lt;strong>Discovery Mode&lt;/strong> 和离开 &lt;strong>Discovery Mode&lt;/strong> 时的两个检查点，我们可以查看寄存器文件的状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>比较指令的输入寄存器的映射关系：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果其中一个寄存器在 Discovery Mode期间保持不变，而另一个发生了变化，我们就可以推断出：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>常量值&lt;/strong>（不变寄存器的值）作为循环的边界（loop bound）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>变化值的差异&lt;/strong>（变化寄存器的值）作为循环的增量（loop increment）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>通过这些信息，我们可以准确推测出循环的剩余迭代次数。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>失败的情况&lt;/strong>：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>如果在 &lt;strong>Discovery Mode&lt;/strong> 中无法找到合适的匹配（即没有找到合适的比较指令或者无法推断出循环的边界），则默认为执行 &lt;strong>128 次迭代&lt;/strong>，这是 DVR 的最大迭代次数。&lt;/li>
&lt;/ul>
&lt;h3 id="42-vector-runahead-subthread-operation">4.2 Vector-Runahead Subthread Operation&lt;/h3>
&lt;p>一旦发现模式识别出跨步负载、其跨步、其依赖链以及内部循环的剩余迭代，一旦主线程再次达到候选跨步负载，就会生成向量运行超前子线程。子线程从&lt;strong>跨步加载开始，到存储在 FLR 中的 PC 结束&lt;/strong>，其目标是推测性地预取大量（在我们的设置中最多 128 个）矢量化副本。特别是，矢量化器通过使用其步幅生成的矢量化副本来替换步幅负载。未来指令流中依赖于跨步负载的任何指令也会被矢量化。&lt;/p>
&lt;p>对于下面这一段程序,Vector Runahead thread 应该是从lw r4,0(r2)到 lw r7,0(r1)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 146;
flex-basis: 351px"
>
&lt;a href="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218161358613.png" data-size="530x362">
&lt;img src="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218161358613.png"
width="530"
height="362"
srcset="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218161358613_hu10767954509094571583.png 480w, https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218161358613_hu8519797815985386616.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>子线程使用与主线程相同的获取、解码和执行单元。子线程指令是从前端缓冲区生成的，前端缓冲区通过保存解码的微操作（在我们的设置中为八个）将提取阶段与管道的其余部分解耦。虽然子线程指令使用相同的执行单元，但它们使用不同的向量发出寄存器（VIR）——而不是乱序指令队列，因为它是有序的——来处理向量指令副本的执行。每当主线程没有为同一执行端口准备好指令时，就会发出向量运行子线程的发出寄存器中的指令。&lt;/p>
&lt;h4 id="421-vector-register-allocation-table">4.2.1 Vector Register Allocation Table&lt;/h4>
&lt;p>VRAT（向量寄存器分配表）用于管理子线程（Vector Runahead Subthread）的&lt;strong>标量架构寄存器到物理寄存器&lt;/strong>的映射关系。即使子线程是有序的，我们仍然需要重命名它的架构寄存器，因为它与&lt;strong>主线程共享物理标量和向量寄存器文件&lt;/strong>.标量架构寄存器可以重命名为 （i） 所有矢量通道中的相同标量物理寄存器，如果架构寄存器未矢量化且通道之间没有控制流发散，或 （ii） 多个矢量物理寄存器，其中架构寄存器已矢量化或存在控制流发散。&lt;/p>
&lt;p>为了初始化 VRAT，主线程中的所有架构寄存器都分配了一个新的物理标量寄存器，以将子线程与其主线程解耦,当跨步负载被发送到 VIR 时，我们分配 16 个向量（例如 AVX-512）物理寄存器来映射负载的目标架构寄存器。与乱序处理器不同，物理寄存器不会随每条新指令重新映射，因为重命名不会试图删除 WAW 或 WAR 依赖项，即子线程按程序顺序执行。&lt;/p>
&lt;p>物理寄存器被覆盖后(指的是它的值被后续的指令取代了)，将返回到空闲列表。被覆盖的寄存器会立即释放，前提是它们不用作发射指令的源寄存器,and tracked in the Vector Issue Register via the ‘dead-source’ bits&lt;/p>
&lt;p>&lt;strong>VRAT 的寄存器分配规则&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>子线程中寄存器的分配触发条件&lt;/strong> 子线程的物理寄存器分配只发生在以下两种情况：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>源寄存器被向量化，但目标寄存器尚未向量化&lt;/strong>：
在这种情况下，目标寄存器需要分配 &lt;strong>16 个空闲的向量物理寄存器&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>目标寄存器已被向量化，但即将被标量指令覆盖&lt;/strong>：
这种情况可能是由于原始代码中的写后写（WAW）依赖导致，目标寄存器会被分配到&lt;strong>空闲标量物理寄存器&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>处理控制流分歧&lt;/strong> 当由于&lt;strong>分支跳转（Branch Divergence）&lt;/strong>，部分向量 lanes 被禁用时：&lt;/p>
&lt;ul>
&lt;li>只有相关的 lanes 的寄存器会被重命名，而非所有 lanes。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>寄存器释放策略&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>当寄存器被覆盖时，立即将其归还到空闲列表，前提是它不再被用作源寄存器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="422-vector-issue-register">4.2.2 Vector Issue Register&lt;/h4>
&lt;p>为了实现比单个向量寄存器（8 个 64 位加载，如 AVX-512）显着更高程度的内存级并行性，我们重叠执行同一指令的多个向量副本，目标是实现 16 个 AVX -512 个向量（或 16 × 8 = 128 个标量等效循环）同时进行。我们不使用标量发布队列，而是使用单个向量发布寄存器 (VIR)，负责发布标量指令的每个向量副本（图 5）。&lt;/p>
&lt;p>如果指令的所有 inputs 都是标量，则只发出一条标量指令。如果指令被标记为步幅加载，我们使用步幅检测器填充所有 128 个值，并将这些值作为 16 个矢量化 AVX-512 加载发出。如果指令依赖于至少一个矢量化输入，我们同样会按顺序向执行单元发出指令的 16 个矢量化副本。每当有合适的单元空闲时（主线程未使用），就会向执行单元发出矢量化指令副本。在一个 AVX-512 指令中，我们有 8 个掩码位，用于指示其中一个源被标记为无效的通道，无论是由于故障、使用浮点寄存器还是通过控制流发散。如果 Discovery Mode 的 loop-bound inference 预测它可以获取的标量等效循环将少于 128 个，则某些通道可能会以掩码 out 开始。一旦所有指令副本都发出并执行，如果在任何源上设置了 &amp;lsquo;dead-source&amp;rsquo; 位，则释放物理寄存器。然后，我们获取下一条指令，并重复。&lt;/p>
&lt;p>矢量化加载指令被视为矢量收集操作[87]：它们在 LSQ 中被拆分为标量加载并发送到单独缓存层次结构。内存系统与其他常规标量加载同时处理它们，分配不同的 MSHR。&lt;/p>
&lt;h4 id="423-branch-reconvergence">4.2.3 Branch Reconvergence.&lt;/h4>
&lt;p>相关负载可能是有条件的，即它们出现在某些控制流路径上，而不是内循环内的其他路径上。我们允许每个标量等效车道与其他车道分开。因此，我们使用类似 **GPU 的再收敛堆栈。**所有活动通道中的分支结果都会相互比较。如果任何通道的下一个 PC 与其他通道不同，我们会根据新的目的地分割通道，根据公共组生成掩码，并将掩码和目标 PC 放置到重新收敛堆栈上。我们沿着第一条路径一直到达重新收敛点(是不是相同的指令地址?)，我们将其设置为矢量超前运行终止点（第 4.2.4 节），以避免特殊跟踪。一旦我们到达一组匹配通道的终止点，我们就会将头从再收敛堆栈中弹出，重置掩码，然后从堆栈中的下一个 PC 继续。&lt;/p>
&lt;p>每个车道同时映射到 VRAT 中。如果我们在标量重命名中存在分歧（因为我们使用不同的标量），并且这种分歧整齐地发生在 AVX-512 指令边界上，那么我们会根据 16 个 AVX-512 指令中的哪一个使用它来覆盖每个标量。如果 AVX-512 指令中的标量重命名存在分歧，我们会将目标转换为 AVX-512 物理寄存器，并复制要替换的标量值。&lt;/p>
&lt;h4 id="424-termination">4.2.4 Termination.&lt;/h4>
&lt;p>当(1)通道到达序列中的最终间接负载（由 FLR 识别）时，或者(2)在发散的情况下达到步幅 PC 的下一次迭代时，向量运行子线程终止，并(3)具有 200 条指令超时（如果我们离开以循环绑定检测器未拾取的方式完全循环，例如，通过中断）。主线程与向量运行子线程同时执行。一旦子线程终止，主线程下次执行跨步加载时将再次有资格进入发现模式，从而重新启动 DVR。此时主线程将取得重大进展，并且如果 DVR 子线程准确且及时，其大部分缓存访问将成为 L1 命中。&lt;/p>
&lt;h3 id="43-嵌套向量运行nested-vector-runahead">4.3 嵌套向量运行(Nested Vector Runahead)&lt;/h3>
&lt;p>&lt;strong>Nested Vector Runahead&lt;/strong> 通过分析嵌套循环结构，对外层和内层循环&lt;strong>联合向量化&lt;/strong>,来解决内层循环次数不够的问题&lt;/p>
&lt;p>Nested Vector Runahead 分两步工作。首先，它执行嵌套发现模式 （NDM） 以将指令链从外部跨步负载矢量化到内部跨步负载，并发现循环边界和数据输入到内部循环的多个调用。其次，在到达 inner striding loop 时，它会进一步扩展矢量化以覆盖 inner loop。&lt;/p>
&lt;h4 id="431-nested-discovery-mode">4.3.1 Nested Discovery Mode&lt;/h4>
&lt;p>NDM 的目标是同时找到内部循环的许多不同调用的起始跨步地址和循环边界。discovery 模式（第 4.1 节）期间，loop-bound detector 可能会发现 loop 的 Approximate 迭代少于 64 次。在这种情况下，一旦生成了 vector-runahead 子线程，我们不是立即执行 vector runahead，而是用backward edge 改变分支的方向(把跳转转为不跳转,那就直接跑到外部去了)，并通过将PCv设置为分支后面的指令（未采用路径指令）来在in-order subthread上开始 NDM。子线程与主线程同时运行。仍然将两个 source registers 保存在 LCR 中。跨步负载的常数循环增量和地址分别保存在两个新寄存器中，分别称为增量寄存器 （IR） 和内部负载寄存器 （ILR）。&lt;/p>
&lt;p>NDM 子线程开始执行标量操作，但由于分支方向更改而跳过内部循环的所有即将进行的迭代，并执行内部循环外部的指令。&lt;strong>当它发现一个外跨步负载的地址小于 ILR 中的地址时（例如，算法 1 中的第 4 行与第 8 行），它执行第一个向量化步骤：它对跨步负载进行向量化（乘以 16，以尝试找到至少 128 个可行的内循环迭代）并在污点向量中标记负载的目的地。&lt;/strong>&lt;/p>
&lt;p>对于每个外部跨步负载的依赖项，矢量化过程继续进行，直到到达每个内部跨步负载的第一次迭代。在算法 1 中，第 4 行的外部跨步负载在第 5 行和第 6 行都有相关性。&lt;/p>
&lt;p>当它达到 inner striding load （第 8 行） 时，它会读取 LCR 中源寄存器的矢量化副本的值，并使用这些值和 IR 中的值来计算每个矢量化 outer loops 的 inner loops 调用次数。如果在进入 NDM 后的 200 条指令内没有出现地址低于内跨步负载的外部跨步负载，则子线程将根据 LCR 和 IR 中的值重新计算循环边界，并通过循环边界对内部跨步负载进行矢量化。也就是说，子线程会回到 loop bound detector 在初始发现模式期间计算的迭代次数。 (LCR中保存cmp的源寄存器,在外部矢量化的时候,这个源寄存器也会被矢量化,通过这个值和)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 129;
flex-basis: 310px"
>
&lt;a href="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218205326943.png" data-size="715x553">
&lt;img src="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218205326943.png"
width="715"
height="553"
srcset="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218205326943_hu13753689612781104591.png 480w, https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20241218205326943_hu446235333281578278.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="432-further-vectorization">4.3.2 Further Vectorization&lt;/h4>
&lt;p>根据检测到的循环边界，NDM 子线程收集尽可能多的跨步内存地址，最多限于128个地址。超过前128个的地址将被丢弃。然后，NDM 子线程从内跨步加载开始执行向量化，通过将这些128个目标地址填充到其向量寄存器中，其他寄存器根据它是从哪个外循环的 16 个 lane 中生成的来设置（对于当前未污点的寄存器使用标量，对于在 NDM 中被污点的寄存器使用向量）。它将内跨步加载的目标标记为污点，并按照第 4.2 节所述，进入 DVR 模式，每个 lane 都会启动和终止。&lt;/p>
&lt;h2 id="hardware-overhead">Hardware Overhead&lt;/h2>
&lt;p>支持 DVR 的硬件结构仅产生 1139 字节的开销。 32 条目步幅检测器需要 460 字节：每个条目需要 48 位用于加载 PC，48 位用于前一个内存地址，16 位用于步距，2 位用于饱和计数器，1 位用于最内层检测。 VRAT 是一个 16 条目表（288 字节）：每个条目具有 16 个寄存器标识符，每个寄存器标识符需要 9 位（以选择 128 个向量物理寄存器和 256 个整数物理寄存器之一）。 VIR 占用 86 个字节：128 位用于掩码，16 位已发出，16 位已执行，64 位 uop 和 imm，9×16 位用于目标，10×16 位用于 src1，10×16 位用于 src2。前端缓冲区为 8 个微操作占用 64 个字节。 8 项再收敛堆栈需要 176 个字节：6 个字节用于 PC，128 位掩码用于每个 PC。 FLR和LCR分别只需要6字节和2字节； SBB 仅需要 1 位。循环绑定检测器保存两个检查点（2×16×8 位用于寄存器 ID 映射）和两个用于比较和分支指令的寄存器，总共 48 个字节。污点跟踪器需要 16 位。对于 NDM，IR 和 ILR 需要 7 位和 6 个字节来跟踪循环增量（最大 128）和内部跨越负载的地址 ID。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 109;
flex-basis: 262px"
>
&lt;a href="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20250123154046526.png" data-size="652x595">
&lt;img src="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20250123154046526.png"
width="652"
height="595"
srcset="https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20250123154046526_hu15882080586372168480.png 480w, https://VastCircle.github.io/2024/decoupled_vector_runahead/image-20250123154046526_hu15406860258749922989.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.xinhecuican.tech/post/8be42a2d.html" target="_blank" rel="noopener"
>向量寄存器和gpu&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Secure_prefetching_for_secure_cache_systems</title><link>https://VastCircle.github.io/2024/secure_prefetching_for_secure_cache_systems/</link><pubDate>Sat, 14 Dec 2024 13:17:45 +0800</pubDate><guid>https://VastCircle.github.io/2024/secure_prefetching_for_secure_cache_systems/</guid><description>&lt;h2 id="摘要">摘要&lt;/h2>
&lt;p>像Spectre及其变种这样的瞬态执行攻击可能通过缓存层次结构导致信息泄漏。缓解推测执行攻击的技术分为两类：基于延迟的技术和不可见推测技术。像GhostMinion这样的基于不可见推测的技术是高性能且安全的技术，可以缓解所有类型的推测执行攻击。与缓存系统类似，硬件预取器也可能导致推测性信息泄漏。为了解决这个问题，GhostMinion提倡在缓存系统中基于严格排序的提交时预取。我们的实验表明，GhostMinion缓存系统与硬件预取器之间的互动产生了负面影响，导致不同缓存层次之间的冗余流量。这些流量会引起争用，并增加丢失延迟，从而导致性能下降。接下来，我们观察到，由GhostMinion强制执行的提交时预取导致性能损失，因为它影响了预取器的及时性。我们首次对先进的预取技术和安全缓存系统之间的互动进行了彻底分析。在此基础上，我们提出了两种微架构解决方案，确保在设计安全预取器时能够提供高性能，同时保证安全的缓存系统。第一种解决方案通过非推测性更新缓存层次结构时检测和过滤冗余流量。第二种解决方案确保预取器的及时性，以弥补在提交时触发预取请求的延迟，从而实现既安全又高效的预取器。总体而言，我们的改进是安全的，并且在硬件预取器和安全缓存系统之间提供了协同作用。我们的实验表明，在使用先进的预取器的情况下，我们的过滤器始终能提高像GhostMinion这样的安全缓存系统的性能（对于单核系统提高1.9%，对于多核系统提高19.0%，使用的是性能最好的预取器）。我们还观察到过滤器与我们提出的安全预取器之间的协同效应，进一步提高了性能，单核和多核系统分别提高了6.3%和23.0%（相比于最好的预取器）。我们的改进极为轻量，每个核心的存储开销为0.59 KB。&lt;/p>
&lt;h2 id="introduction">introduction&lt;/h2>
&lt;p>瞬态执行攻击以Spectre [28]为代表，很快又出现了其他攻击 [9], [15], [17], [18], [33]，它们利用瞬态指令对缓存状态的影响。瞬态指令是不会提交的推测性指令。推测执行是一种高性能处理器的基本技术，因此为了安全起见，它不能被禁用。为了缓解利用缓存的推测执行攻击，各种提案 [10], [11], [27], [36]–[38], [45], [46], [48] 致力于在性能损失最小的情况下提供安全保障。文献中一般提出了两种缓解技术：基于延迟的技术和不可见推测技术。&lt;/p>
&lt;p>在基于延迟的方法中，依赖秘密的值的传递会被暂停，直到被认为可以安全地继续为止。判断安全性可能很复杂，需要复杂的机制来准确确定何时可以认为指令是安全的。而在不可见推测中，允许依赖秘密的加载执行，但这些执行的效果被隐藏在缓存层次结构和其他微架构结构之外。在所有的提案中，GhostMinion [11]、推测污染追踪 (STT) [48] 和非推测数据访问 (NDA) [45] 是最严格的，因为它们能够缓解回溯时间攻击，例如推测干扰攻击 [15]。在STT、NDA和GhostMinion之间，GhostMinion 是一种轻量级且高性能的缓解技术。GhostMinion是一种不可见推测技术，通过严格的排序保证通过缓存系统缓解各种推测执行攻击，包括缓存层次、未命中状态保持寄存器（MSHRs）以及硬件预取器 [10]。&lt;/p>
&lt;p>GhostMinion使用一个小型推测缓存（GM）来存储与推测加载相关的数据，当加载指令提交时，数据会传递到L1D。当相同数据从L1D驱逐时，数据会传递到L2，而从L2驱逐时，数据会传递到LLC。平均而言，与非安全缓存系统相比，GhostMinion会导致大约5%的性能损失。数据预取器通过将缓存未命中转换为命中，在提高缓存性能方面发挥了重要作用。最近的数据预取器进展推动了单线程性能的提升，平均性能提高了3%到5% [13], [16], [31], [32]。过去十年里，两次数据预取冠军赛 [1], [5] 也促进了这一趋势。&lt;/p>
&lt;p>不幸的是，硬件预取器会在推测加载时训练和触发，即使在安全缓存系统中也可能成为信息泄漏的来源 [10], [11]。利用预取器的推测攻击的工作原理如下：(i) 攻击者预热缓存；对应的缓存有一个预取器；(ii) 受害者加载类似于Spectre攻击的秘密数据；(iii) 受害者生成的推测加载训练并触发硬件预取器；(iv) 预取器根据其地址预测请求数据到缓存；(v) 最后，攻击者探测缓存。GhostMinion通过提交时预取为安全硬件预取器提供了案例：安全预取器应在提交时训练，并且预取只能在提交时发生。这样，预取器将不会推测性地影响缓存和MSHR状态，瞬态指令也无法利用预取器进行信息泄漏。&lt;/p>
&lt;p>我们表明，数据预取的确可以缓解安全缓存系统的性能损失。尽管数据预取很重要，但尚未对安全预取技术的影响进行详细研究。本文首次分析了广泛的先进硬件预取器与高性能安全缓存系统之间的交互。我们在类似GhostMinion的安全缓存系统上评估了IP-stride [12]（工业界常用的知名预取器）、Bingo [13]、SPP+PPF [16]、IPCP [32]（第3届数据预取冠军赛的冠军 [5]）以及Berti [31]。Berti是先进的L1D预取器（准确率接近90%），能够协调其在缓存层次中的请求。&lt;/p>
&lt;p>我们发现，预取器与像GhostMinion这样的安全缓存系统之间存在负面交互。研究表明，这些预取器无法实现最佳性能的主要原因有两个，并提出了微架构解决方案以克服这些问题。&lt;/p>
&lt;p>**我们的观察。**首先，我们分析了所评估的预取器在非安全缓存系统和类似GhostMinion的安全缓存系统上的性能改进，分别针对SPEC CPU 2017和GAP工作负载（详见第VI节的模拟细节）。我们观察到预取技术在安全和非安全缓存系统上都能改善性能，但两者之间的差距较大。性能差距是由于不可见加载引入的额外内存流量导致的内存访问延迟增加。平均而言，与使用硬件预取器的非安全缓存系统相比，GhostMinion会为L1D引入超过1.5倍的额外流量（详见第III节）。&lt;/p>
&lt;p>接下来，我们分析了在安全缓存系统上实现安全预取器的影响，即在提交时而不是访问时进行训练和预取的影响。图1显示了在安全缓存系统中训练并触发时（第二栏）和提交时（第三栏）的预取器性能改进。我们观察到，与访问时预取相比，在提交时训练/预取会导致所有预取器的一致性能损失（3%-4%）。关键因素是及时性，而不是无法捕获应用程序的访问模式（详见第III节）。&lt;/p>
&lt;p>对于提交时预取，性能损失的一个主要部分是由于我们称之为“提交延迟”的新类预取请求：在处理器请求数据时尚未启动预取，但如果预取请求在访问时触发，则会启动的未命中。在非安全缓存系统上与访问时预取相比，平均而言，在安全缓存系统上采用提交时预取会导致约10%的性能损失。&lt;/p>
&lt;p>**我们的贡献。**在本文中，我们分析了导致安全预取器性能低下的原因，并提出了一种低成本但有效的解决方案，以弥补性能损失并充分发挥安全预取的潜力，缩小与非安全缓存系统的性能差距。本文的主要贡献包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>我们表明&lt;/strong>，预取器在安全缓存系统上的相对性能下降主要是由于：(i) 安全缓存系统引入的额外内存流量，以及 (ii) 预取的及时性问题（详见第III节）。&lt;/li>
&lt;li>&lt;strong>我们提出了一种机制&lt;/strong>，用于过滤掉安全缓存系统中执行的多余非推测性更新。我们的过滤器轻量化，存储开销仅为0.12KB（详见第IV节）。&lt;/li>
&lt;li>&lt;strong>我们提出了一种机制&lt;/strong>，以确保在提交时训练和发出预取请求的预取器的及时性，从而实现一个既安全又及时且高性能的预取器。最终结果是第一个高性能安全预取器，存储开销为0.47KB（详见第V节）。&lt;/li>
&lt;li>&lt;strong>我们表明&lt;/strong>，在当前最先进的预取器基础上进行的增强，有助于缩小非安全缓存系统与安全缓存系统之间的性能差距。对于SPEC CPU2017和GAP基准测试，我们的增强措施将性能提升了6.3%（其中约30%的改进来自我们的过滤器，其余来自更优的提交时预取器训练）。对于一个4核系统，我们的机制在安全缓存系统中相比当前最先进的提交时预取器，将性能提升了23.0%（详见第VII节）。&lt;/li>
&lt;/ul>
&lt;h2 id="background-and-related-work">background and related work&lt;/h2>
&lt;p>&lt;strong>A. 威胁模型&lt;/strong>
我们假设瞬态执行攻击者具有以下能力：
(i) 攻击者能够通过缓存系统发起类似Spectre和推测性干扰[15]的攻击。
(ii) 攻击者可以通过预测训练和预取利用硬件预取器，从而改变缓存状态，如Muontrap中所述[10]。
(iii) 攻击者和受害者可以属于同一进程或不同进程。攻击者可以运行任意代码，但无法直接访问机密数据，即攻击者在用户级或内核级的沙箱中运行。
(iv) 存在基于时序的旁道和隐蔽通道，这些通道涉及硬件数据预取器和缓存[19], [20], [41]，可以通过现有的空间隔离技术进行缓解[22], [35]。&lt;/p>
&lt;p>&lt;strong>B. 最近的缓解技术&lt;/strong>
一个独立的表格（表I）总结了近期的缓解技术，并结合了安全性、性能和存储需求的考量。如第I节所述，缓解技术分为两大类：基于延迟的技术[38], [45], [48]和不可见预测技术[10], [11], [37], [46]。
为了性能评估，我们采用了SPEC CPU2017[43]和GAP[8]基准测试。
在所有基于延迟的技术中，STT在提供安全保证的同时，性能开销最小。STT的操作前提是：除非指令构成隐蔽通道，否则可以安全地将机密数据转发给依赖的预测加载指令。对于显式隐蔽通道，它会阻止来源寄存器包含预测派生值的LOAD指令。
一种名为Doppelganger[29]的最新性能增强技术改进了包括STT在内的基于延迟的技术的性能。与存储开销较高的基于延迟的技术相比，不可见预测技术（如GhostMinion）以较低的性能损失和最低的存储开销著称。因此，在本文中，我们选择GhostMinion作为我们的安全缓存系统。&lt;/p>
&lt;p>&lt;strong>C. GhostMinion安全缓存系统&lt;/strong>
GhostMinion使用一个小型2KB缓存（称为GM），该缓存与L1D并行访问，存储推测性指令的数据，直到它们提交（或退休）。当推测性指令在GM中产生需求未命中时，它会像传统的缓存层级一样在L1D、L2和LLC中搜索数据。然而，当在L1D、L2或LLC命中时，缓存状态（替换策略优先级位）不会更新。如果在L1D、L2和LLC中都未命中，则响应直接填充到GM中，而绕过L1D、L2和LLC（图2，1）。&lt;/p>
&lt;p>当提交时，提交指令的数据如果在GM命中，会通过提交时写入被转移到L1D缓存中。如果数据随后从L1D被驱逐，则会被转移到L2缓存中，进一步从L2驱逐会导致其传输到LLC（图2，2a）。在GM未命中的情况下，数据会被重新提取到非推测性缓存层级中（L1至LLC）（图2，2b）。&lt;/p>
&lt;p>GM既不包含也不排斥其余的缓存层级。在GM中，根据时间顺序，指令被限制查看其他指令的插入或驱逐。时间顺序基于时间戳维护。GhostMinion使用的TimeGuarding确保在多次推测下插入和驱逐是不可见的。为了隐藏在MSHRs中的争用，时间戳元数据在每个缓存级别的MSHRs中传播，允许较年轻的加载被取消并由较老的加载取代（跃迁）。此外，在GhostMinion中，一个块只能处于共享或无效状态，且GM和非推测性缓存的协同状态不会在指令提交之前被更改。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 151;
flex-basis: 364px"
>
&lt;a href="https://VastCircle.github.io/2024/secure_prefetching_for_secure_cache_systems/image-20241214160358857.png" data-size="688x453">
&lt;img src="https://VastCircle.github.io/2024/secure_prefetching_for_secure_cache_systems/image-20241214160358857.png"
width="688"
height="453"
srcset="https://VastCircle.github.io/2024/secure_prefetching_for_secure_cache_systems/image-20241214160358857_hu7736817408688982627.png 480w, https://VastCircle.github.io/2024/secure_prefetching_for_secure_cache_systems/image-20241214160358857_hu7327066464886296600.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="动机">&lt;strong>动机&lt;/strong>&lt;/h2>
&lt;h3 id="a-安全缓存系统对硬件预取的影响">&lt;strong>A. 安全缓存系统对硬件预取的影响&lt;/strong>&lt;/h3>
&lt;p>本节分析了为何预取器在像GhostMinion这样的安全缓存系统中表现不佳。
图3展示了本文评估的预取器在GhostMinion安全缓存系统中和基于访问的预取下L1D访问量的增长。在非安全系统且无预取的情况下，每千指令的平均L1D访问量（APKI）为199，而在GhostMinion中，由于提交请求更新了缓存状态（参见第II-C节），APKI上升到375。使用GhostMinion的Berti预取器时，APKI进一步上升到570。类似的趋势出现在所有预取器中。对于像Bingo和SPP+PPF这样的L2预取器，由于预取请求由L2发出，它们不会访问L1D。APKI的增加导致了额外的流量，从而增加了L1D未命中延迟（见图4）。&lt;/p>
&lt;p>一个关键的因素是硬件预取器存在的以下趋势，这种趋势使延迟变得更严重：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>L1D的MSHR占用率增加&lt;/strong>：在安全缓存系统中，Berti预取器的平均MSHR占用率增加了10.4%，MSHR满的时间额外增加了8.7%。&lt;/li>
&lt;li>&lt;strong>无预取时的对比&lt;/strong>：从非安全系统转移到安全系统时，L1D MSHR占用率降低了15.9%，因为需求未命中优先由GM服务。&lt;/li>
&lt;/ul>
&lt;p>通过对605.mcf_s-1554B进行详细分析，图5(a)显示，相较于无预取的非安全基线，性能显著下降（如Berti预取器的性能下降超过300%）。图5(b)显示了GhostMinion提交请求、加载请求和预取请求对L1D流量的贡献，图5(c)则显示了L1D未命中延迟的显著增加。&lt;/p>
&lt;p>进一步分析显示：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>无预取的L1D MSHR状态&lt;/strong>：无预取时，从非安全系统转到安全系统，L1D MSHR占用率下降了16.2%，因为需求请求优先由GM服务。&lt;/li>
&lt;li>&lt;strong>有预取的L1D MSHR状态&lt;/strong>：有预取时，从非安全系统转到安全系统，L1D MSHR占用率增加了10.1%。原因是非安全系统中L1D MSHR仅处理需求和预取请求，而安全系统中还需处理GhostMinion的提交请求，增加了MSHR压力。&lt;/li>
&lt;/ul>
&lt;p>此外，无预取时，L1D MSHR几乎从未满，而有预取时，L1D MSHR满的时间从6.3%增加到20%。
第IV节将提出一种机制以解决硬件预取启用时因额外流量导致的性能损失。&lt;/p>
&lt;h3 id="b-安全硬件预取的影响">&lt;strong>B. 安全硬件预取的影响&lt;/strong>&lt;/h3>
&lt;p>正如GhostMinion[11]所描述，基于提交的预取能够防止因预测执行导致的信息泄露。然而，图1表明，将先进预取器移到提交阶段会导致3%-4%的性能损失，相较于基于访问的预取。&lt;/p>
&lt;p>图6展示了本文工作负载的每千指令需求未命中（MPKI）的平均值。MPKI按预取器工作的缓存级别（L1D或L2C）分类，并对基于访问和基于提交的预取分别进行评估。&lt;/p>
&lt;p>MPKI被划分为以下四类：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>提交延迟预取&lt;/strong>：这是一种新定义的延迟预取请求，仅出现在提交阶段预取器中。当发生缓存需求未命中时，提交阶段预取器尚未触发目标缓存行的预取请求，而访问阶段预取器已触发。&lt;/li>
&lt;li>&lt;strong>传统延迟预取&lt;/strong>：需求未命中时，MSHR中已有对目标缓存行的预取请求，二者合并。&lt;/li>
&lt;li>&lt;strong>错失机会&lt;/strong>：需求未命中目标缓存行，该行本可以由访问阶段预取器正确预测，但因提交阶段训练顺序不同而被漏掉。&lt;/li>
&lt;li>&lt;strong>未覆盖&lt;/strong>：未命中需求未归入前述类别。&lt;/li>
&lt;/ol>
&lt;p>观察到一个普遍趋势：将预取器移至提交阶段时，未覆盖的需求未命中数量减少。即使将“错失机会”加入“未覆盖”中，提交阶段预取器的总MPKI通常仍低于访问阶段预取器。&lt;/p>
&lt;p>然而，与基于访问的预取相比，基于提交的预取性能更差。原因在于预取及时性问题。虽然传统延迟预取请求几乎未增加，但新增的提交延迟类导致了MPKI的总体上升。为弥补基于提交预取的延迟，第V节提出了一种机制以缓解其及时性不足问题。&lt;/p>
&lt;h2 id="iv-适合预取的安全缓存系统">&lt;strong>IV. 适合预取的安全缓存系统&lt;/strong>&lt;/h2>
&lt;p>基于不可见预测的安全缓存系统在内存指令不是预测性时（例如在提交时）更新缓存层次结构。对于GhostMinion而言，这意味着在GM中未命中时重新获取缓存行，或者在GM命中时向缓存层次结构的其余部分发送基于提交的写请求（针对已清除的缓存行），如第II-C节所述。这些额外的数据传输的目标是填充缓存层次结构，特别是当数据是由核心预测性请求时未更新的部分，以减少随后的访问中的缓存未命中。无论是重新获取还是写传播都会对内存层次结构的流量产生重要影响。然而，这些额外的流量在内存系统未严重争用时不会显著降低性能，例如在具有预取机制的系统中。然而，预取机制会加剧缓存层次队列和MSHR的压力，从而阻止预取器提升性能（如第III-A节所示）。我们观察到，许多旨在恢复缓存层次结构的请求实际上并不必要，并且会引发严重的争用。例如，触发数据重新获取，即使数据已经由L1D提供，也会占用L1D端口，仅仅是为了更新LRU替换策略。在同一上下文中，基于提交的写请求会在内存层次结构中传播，直到数据已经出现在某个缓存级别。因此，可以避免访问已经包含该缓存行的缓存级别。&lt;/p>
&lt;p>受到这一观察的启发，我们提出了&lt;strong>安全更新过滤器（SUF）&lt;/strong>。SUF记录当请求数据时，提供该数据的缓存级别。然后，在提交时，SUF会根据提供数据的缓存级别来过滤重新获取操作，或者停止在提交时的写传播，直到提供缓存行的级别之前。如果SUF预测错误，因为在此期间缓存行可能已被驱逐，则随后的获取请求会增加额外的延迟，因为它将从更高的级别提供。得益于SUF的高准确性，缓存访问的次数减少，从而减少了生成的流量。SUF与底层的预取技术无关，以透明的方式工作。&lt;/p>
&lt;h3 id="识别持有缓存行的缓存级别">&lt;strong>识别持有缓存行的缓存级别&lt;/strong>&lt;/h3>
&lt;p>SUF使用持有缓存行的较低级别（L1D是最低级别，LLC是缓存的最高级别）来决定是否应使用过滤。通过在处理器请求数据时，将提供缓存行的缓存级别沿缓存层次结构向下传播，可以确定缓存级别。这些信息使用2位来编码，表示数据来自于L1D（或并行访问的GM）、L2C、LLC或DRAM。该2位的命中级别信息与请求数据一起存储在加载队列（LQ）中的内存操作条目中（见图7，第1步）。&lt;/p>
&lt;h3 id="过滤更新">&lt;strong>过滤更新&lt;/strong>&lt;/h3>
&lt;p>一旦预测性加载被提交，它会检查GM，以决定是否需要沿着层次结构重新获取缓存行（GM未命中）或在层次结构中向上传播缓存行（GM命中）。SUF检查命中级别字段，并按如下方式操作：&lt;/p>
&lt;ul>
&lt;li>如果数据来自L1D（值为00），SUF会丢弃更新（无论是重新获取还是提交时的传播）。&lt;/li>
&lt;li>否则，重新获取或传播按常规方式进行，使缓存行从GM移动到L1D（见第2步）。&lt;/li>
&lt;/ul>
&lt;p>当L1D或L2中的缓存行被驱逐时，决定是否传播写回块是由GhostMinion写回位确定的。在提交时，L1D和L2的GhostMinion写回位会使用命中级别进行评估，并与写回块一起传播。每个L1D中的缓存行也存储了L2写回位，因此它会在写回时传播到L2（见第3步）。最后，在从L2驱逐时，GhostMinion写回位再次用于确定是否传播（见第4步）。&lt;/p>
&lt;h3 id="适用性">&lt;strong>适用性&lt;/strong>&lt;/h3>
&lt;p>SUF适用于任何基于不可见预测的安全缓存系统，该系统在提交时更新缓存层次结构。&lt;/p>
&lt;h3 id="存储开销">&lt;strong>存储开销&lt;/strong>&lt;/h3>
&lt;p>SUF仅需要额外的0.12 KB存储空间：LQ上占用0.03 KB，L1D上占用0.09 KB。LQ中的128个条目每个都扩展了一个2位的命中级别字段，L1D中的768个条目每个都扩展了一个L2写回位。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/Shepherdzhao/p/8253421.html" target="_blank" rel="noopener"
>CPU Meltdown 和 Spectre漏洞分析&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.freebuf.com/articles/network/161135.html" target="_blank" rel="noopener"
>理解CPU Spectre漏洞&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Failed_to_connetct_socket</title><link>https://VastCircle.github.io/2024/failed_to_connetct_socket/</link><pubDate>Wed, 11 Dec 2024 21:00:41 +0800</pubDate><guid>https://VastCircle.github.io/2024/failed_to_connetct_socket/</guid><description>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Ssh版本不匹配</title><link>https://VastCircle.github.io/2024/ssh%E7%89%88%E6%9C%AC%E4%B8%8D%E5%8C%B9%E9%85%8D/</link><pubDate>Wed, 11 Dec 2024 20:58:55 +0800</pubDate><guid>https://VastCircle.github.io/2024/ssh%E7%89%88%E6%9C%AC%E4%B8%8D%E5%8C%B9%E9%85%8D/</guid><description>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Gem5_修改扩展</title><link>https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/</link><pubDate>Wed, 11 Dec 2024 20:52:34 +0800</pubDate><guid>https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/</guid><description>&lt;h2 id="create-a-simple-simobject">create a simple simobject&lt;/h2>
&lt;h3 id="create-a-python-class">create a python class&lt;/h3>
&lt;p>每个 SimObject 都有一个与之关联的 Python 类。此 Python 类描述了 SimObject 的参数，这些参数可以通过 Python 配置文件进行控制.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">m5.params&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">m5.SimObject&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">SimObject&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">HelloObject&lt;/span>(&lt;span style="color:#e06c75">SimObject&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">type&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;HelloObject&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cxx_header&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;learning_gem5/part2/hello_object.hh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cxx_class&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;gem5::HelloObject&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="implement-your-simobject-in-c">implement your simobject in c++&lt;/h3>
&lt;p>创建hello_object.cc 和 hello_object.hh&lt;/p>
&lt;p>代码略&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: If the constructor of your SimObject follows the following signature,&lt;/p>
&lt;pre tabindex="0">&lt;code>Foo(const FooParams &amp;amp;)
&lt;/code>&lt;/pre>&lt;p>then a &lt;code>FooParams::create()&lt;/code> method will be automatically defined. The purpose of the &lt;code>create()&lt;/code> method is to call the SimObject constructor and return an instance of the SimObject.&lt;/p>
&lt;h3 id="注册simobject和c文件">注册SimObject和C++文件&lt;/h3>
&lt;p>创建SConscript文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Import&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;*&amp;#39;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SimObject&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;HelloObject.py&amp;#39;&lt;/span>, &lt;span style="color:#e06c75">sim_objects&lt;/span>&lt;span style="color:#56b6c2">=[&lt;/span>&lt;span style="color:#98c379">&amp;#39;HelloObject&amp;#39;&lt;/span>&lt;span style="color:#56b6c2">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Source&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;hello_object.cc&amp;#39;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="重新构建gem5">重新构建gem5&lt;/h3>
&lt;pre tabindex="0">&lt;code>scons build/X86/gem5.opt
&lt;/code>&lt;/pre>&lt;h3 id="创建配置脚本使用新的simobject">创建配置脚本使用新的SimObject&lt;/h3>
&lt;h2 id="调试gem5">调试gem5&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## DRAM &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>build/X86/gem5.opt --debug-flags&lt;span style="color:#56b6c2">=&lt;/span>DRAM configs/learning_gem5/part1/simple.py | head -n &lt;span style="color:#d19a66">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## EXEC &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>build/X86/gem5.opt --debug-flags&lt;span style="color:#56b6c2">=&lt;/span>Exec configs/learning_gem5/part1/simple.py | head -n &lt;span style="color:#d19a66">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 通过 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>build/X86/gem5.opt --debug-help 可以看出相应的debug指令
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加新的调试标志">添加新的调试标志&lt;/h3>
&lt;p>在SConscript 添加&lt;/p>
&lt;pre tabindex="0">&lt;code>DebugFlag(&amp;#39;HelloExample&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>就可以创造新的调试标志 ,就可以在SimObject中使用&lt;/p>
&lt;p>在cc文件中添加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;#34;base/trace.hh&amp;#34;&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;#34;debug/HelloExample.hh&amp;#34;&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以使用&lt;/p>
&lt;pre tabindex="0">&lt;code>DPRINTF(HelloExample, &amp;#34;Created the hello object\n&amp;#34;);
&lt;/code>&lt;/pre>&lt;p>去打印调试信息&lt;/p>
&lt;p>DPRINTF会打印 (1) the current tick . (2)the name of the SimObject that called DPRINFT . (3)whatever format string you passed to the DPRINTF function&lt;/p>
&lt;h2 id="event-driven-programming">Event-driven programming&lt;/h2>
&lt;h3 id="creating-a-simple-event-callback">creating a simple event callback&lt;/h3>
&lt;p>在gem5的事件驱动模型中,每个事件都有一个回调函数,在函数中处理该事件.该函数继承自cppEvent&lt;/p>
&lt;p>在helloObject中声明一个新函数,函数每次触发的时候会执行processEvent ,.该函数不采用任何参数,也不返回任何内容&lt;/p>
&lt;p>接下来,添加Event实例. helloObject中使用EventFunctionWrapper允许执行任何函数的实例&lt;/p>
&lt;p>event的第一个参数是一个std : : function &amp;lt; void (void)&amp;gt;类型的,表示无参数也无返回值&lt;/p>
&lt;p>[this]{processEvent();}是一个lambda函数,使用[this]捕获当前对象的指针.通过this,lambda函数可以调用类的成员函数或者访问类的成员变量,这里访问了函数processEvent&lt;/p>
&lt;p>lambda函数可以直接隐式转换为 std::function&amp;lt;void(void)&amp;gt;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">HelloObject&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">HelloObject&lt;/span>(&lt;span style="color:#c678dd">const&lt;/span> &lt;span style="color:#e06c75">HelloObjectParams&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>) &lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">SimObject&lt;/span>(&lt;span style="color:#e06c75">params&lt;/span>), &lt;span style="color:#e06c75">event&lt;/span>([&lt;span style="color:#c678dd">this&lt;/span>]{&lt;span style="color:#e06c75">processEvent&lt;/span>();}, &lt;span style="color:#e06c75">name&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">HelloExample&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Created the hello object&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="补充lambda函数">补充(lambda函数)&lt;/h4>
&lt;p>一种匿名函数&lt;/p>
&lt;p>[捕获列表](参数列表) -&amp;gt; 返回类型{函数体}&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">add&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [](&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>, &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>{ &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">auto&lt;/span> &lt;span style="color:#e06c75">sum1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e06c75">x&lt;/span>,&lt;span style="color:#e06c75">y&lt;/span>](){&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">y&lt;/span>;}; &lt;span style="color:#7f848e">// 捕获 x,y
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">auto&lt;/span> &lt;span style="color:#e06c75">sum2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">x&lt;/span>,&lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">y&lt;/span>](){&lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">y&lt;/span>;}; &lt;span style="color:#7f848e">//按引用捕获
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="scheduling-events">scheduling events&lt;/h3>
&lt;p>for the event to be processed , we first have to schedule(调度) the event . for this we use the : cppschedule function. this function schedules some instance of an Event for some time in the future&lt;/p>
&lt;p>我们会在添加到 &lt;code>HelloObject&lt;/code> 类中的 &lt;code>startup()&lt;/code> 函数里初始调度事件。&lt;code>startup()&lt;/code> 函数是允许 SimObjects 调度内部事件的地方。它在tick = 0时会执行（即从 Python 配置文件中调用 &lt;code>simulate()&lt;/code> 函数时才会执行）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 在tick = 100 时schedule一次事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">HelloObject&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">startup&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">schedule&lt;/span>(&lt;span style="color:#e06c75">event&lt;/span>,&lt;span style="color:#d19a66">100&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="结果">结果&lt;/h3>
&lt;p>此时的hello_object.cc&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;#34;learning_gem5/part2/hello_object.hh&amp;#34;&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#7f848e">// debug
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;#34;base/trace.hh&amp;#34;&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;#34;debug/HelloExample.hh&amp;#34;&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">namespace&lt;/span> &lt;span style="color:#e06c75">gem5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">HelloObject&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">HelloObject&lt;/span>(&lt;span style="color:#c678dd">const&lt;/span> &lt;span style="color:#e06c75">HelloObjectParams&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>) &lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#e06c75">SimObject&lt;/span>(&lt;span style="color:#e06c75">params&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">event&lt;/span>([&lt;span style="color:#c678dd">this&lt;/span>]{&lt;span style="color:#e06c75">processEvent&lt;/span>();}, &lt;span style="color:#e06c75">name&lt;/span>()),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">latency&lt;/span>(&lt;span style="color:#d19a66">100&lt;/span>),&lt;span style="color:#e06c75">timesLeft&lt;/span>(&lt;span style="color:#d19a66">10&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">HelloExample&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Created the hello object&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">HelloObject&lt;/span> &lt;span style="color:#56b6c2">::&lt;/span> &lt;span style="color:#e06c75">processEvent&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">timesLeft&lt;/span>&lt;span style="color:#56b6c2">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">HelloExample&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Processing the event&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">timesLeft&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">HelloExample&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Done firing!&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">schedule&lt;/span>(&lt;span style="color:#e06c75">event&lt;/span>, &lt;span style="color:#e06c75">curTick&lt;/span>() &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">latency&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">HelloObject&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">startup&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">schedule&lt;/span>(&lt;span style="color:#e06c75">event&lt;/span>,&lt;span style="color:#e06c75">latency&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>hello_object.hh&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#ifndef __LEARNING_GEM5_HELLO_OBJECT_HH__
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#define __LEARNING_GEM5_HELLO_OBJECT_HH__
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;#34;params/HelloObject.hh&amp;#34;&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;#34;sim/sim_object.hh&amp;#34;&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">namespace&lt;/span> &lt;span style="color:#e06c75">gem5&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">HelloObject&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#e06c75">SimObject&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">processEvent&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">EventFunctionWrapper&lt;/span> &lt;span style="color:#e06c75">event&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">const&lt;/span> &lt;span style="color:#e06c75">Tick&lt;/span> &lt;span style="color:#e06c75">latency&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">timesLeft&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">HelloObject&lt;/span>(&lt;span style="color:#c678dd">const&lt;/span> &lt;span style="color:#e06c75">HelloObjectParams&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">p&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#61afef;font-weight:bold">startup&lt;/span>() &lt;span style="color:#c678dd">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#endif &lt;/span>&lt;span style="color:#7f848e">// __LEARNING_GEM5_HELLO_OBJECT_HH__
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="向simobjects添加参数">向SimObjects添加参数&lt;/h2>
&lt;p>gem5 python 能够将参数从Python传递到gem5中的C++对象&lt;/p>
&lt;h3 id="简单参数">简单参数&lt;/h3>
&lt;p>可以在HelloObject.py class HelloObject中加入&lt;/p>
&lt;p>Param.&amp;lt;TypeName&amp;gt;&lt;/p>
&lt;p>第一个parameter为default value . 第二个为discreption&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## time_to_wait is a Latency.Latency takes a value as a time value as a string and converts it into simulator ticks . 默认刻度为1ps. 1ns会自动转化为1000 , Latency parameter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">time_to_wait&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">Param&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">Latency&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Time before firing the event&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## int parameter &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">number_of_fires&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">Param&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">Int&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Number of times to fire the event before &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;goodbye&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改hello_object.cc为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">HelloObject&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">HelloObject&lt;/span>(&lt;span style="color:#c678dd">const&lt;/span> &lt;span style="color:#e06c75">HelloObjectParams&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>) &lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">SimObject&lt;/span>(&lt;span style="color:#e06c75">params&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">event&lt;/span>([&lt;span style="color:#c678dd">this&lt;/span>]{ &lt;span style="color:#e06c75">processEvent&lt;/span>(); }, &lt;span style="color:#e06c75">name&lt;/span>() &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#98c379">&amp;#34;.event&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">myName&lt;/span>(&lt;span style="color:#e06c75">params&lt;/span>.&lt;span style="color:#e06c75">name&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">latency&lt;/span>(&lt;span style="color:#e06c75">params&lt;/span>.&lt;span style="color:#e06c75">time_to_wait&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">timesLeft&lt;/span>(&lt;span style="color:#e06c75">params&lt;/span>.&lt;span style="color:#e06c75">number_of_fires&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">HelloExample&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Created the hello object&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>hello.hh的private加入 const std::string myName;&lt;/p>
&lt;p>run_hello.py 指定time_to_wait&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">root&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">hello&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">HelloObject&lt;/span>(&lt;span style="color:#e06c75">time_to_wait&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;2us&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其他simobject作为参数">其他SimObject作为参数&lt;/h3>
&lt;p>直接将goodbyeobject作为HelloObject的参数 ,能直接写 Param.GoodbyeObject的原因应该是GoodByeObject继承的SimObject吧&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">goodbye_object&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">Param&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">GoodbyeObject&lt;/span>(&lt;span style="color:#98c379">&amp;#34;A goodbye object&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要去构造goodbyeobject然后再将goodbyeobject作为HelloObject的参数&lt;/p>
&lt;p>在hello_object.hh中需要包含头文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;#34;learning_gem5/part2/goodbye_object.hh&amp;#34;&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在HelloObject.py中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">HelloObject&lt;/span>(&lt;span style="color:#e06c75">SimObject&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">goodbye_object&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">Param&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">GoodbyeObject&lt;/span>(&lt;span style="color:#98c379">&amp;#34;A goodbye object&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在配置文件hello_goodbye.py中必须是goodbye_object,相当于hello的一个配置选项,但是root.hello这个hello是可以任意取的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">root&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">hello&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">HelloObject&lt;/span>(&lt;span style="color:#e06c75">time_to_wait&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;2us&amp;#39;&lt;/span>,&lt;span style="color:#e06c75">number_of_fires&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">root&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">hello&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">goodbye_object&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">GoodbyeObject&lt;/span>(&lt;span style="color:#e06c75">buffer_size&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;100B&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>bandwidth * bytes_copied
&lt;/code>&lt;/pre>&lt;p>bandwidth 是带宽,代表每s传输多少个Bit(这里实际是每s传输多少Byte) , bytes_copied代表总共传输的Bytes数,两者相乘代表消耗的时间&lt;/p>
&lt;p>配置的 bandwidth = 100MB/s bandwidth=9537,所以这个bandwidth = 1/(100MB/s) = 1/1024/1024 = 9.537*10^(-9)s =9537ps&lt;/p>
&lt;p>配置的bandwidth = 50MB/s , bandwidth = 19073&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 401;
flex-basis: 964px"
>
&lt;a href="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213182604593.png" data-size="233x58">
&lt;img src="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213182604593.png"
width="233"
height="58"
srcset="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213182604593_hu2015761740272110441.png 480w, https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213182604593_hu12518504977208311537.png 1024w"
loading="lazy"
alt="image-20241213182604593">
&lt;/a>
&lt;figcaption>image-20241213182604593&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>总共100B , saygoodbye一次 13&lt;/p>
&lt;p>processEvent 7次, 13 *8 = 104 ,够了&lt;/p>
&lt;h2 id="creating-simobjects-in-the-memory-system">Creating SimObjects in the memory system&lt;/h2>
&lt;p>创建位于CPU和内存总线之间的简单内存对象&lt;/p>
&lt;h3 id="gem5请求和响应端口">gem5请求和响应端口&lt;/h3>
&lt;p>three different memory system modes : timing,atomic and functional .&lt;/p>
&lt;p>timing mode is theomly mode that produces correct simulation .&lt;/p>
&lt;p>&lt;em>Atomic mode&lt;/em> is useful for fastforwarding simulation to a region of interest and warming up the simulator. this mode assumes that no events will be generated in the memory system.&lt;/p>
&lt;p>Function mode is better described as debugging mode . Functional mode is used for things like reading data from the host into the simulator memory. or instance, functional mode is used to load the binary in the &lt;code>process.cmd&lt;/code> from the host into the simulated system’s memory so the simulated system can access it.功能访问应该在读取时返回最新的数据，无论数据在哪里，并且应该在写入时更新所有可能的有效数据（例如，在具有缓存的系统中，可能有多个具有相同地址的有效缓存块）。&lt;/p>
&lt;h3 id="packets">Packets&lt;/h3>
&lt;p>Packets are sent across ports . A packet is made up of a &lt;strong>memreq&lt;/strong> which is the memory request object.The MemReq holds information about the original request that initiated the packet such as t&lt;strong>he requestor , the address and the typed of request&lt;/strong> .&lt;/p>
&lt;p>Packets also have a MemCmd , which is the current command of the packet .此命令可以在数据包的整个生命周期内发生变化.The most common &lt;code>MemCmd&lt;/code> are &lt;code>ReadReq&lt;/code> (read request), &lt;code>ReadResp&lt;/code> (read response), &lt;code>WriteReq&lt;/code> (write request), &lt;code>WriteResp&lt;/code> (write response). There are also writeback requests (&lt;code>WritebackDirty&lt;/code>, &lt;code>WritebackClean&lt;/code>) for caches and many other command types.&lt;/p>
&lt;p>Packets also either keep the data for the request, or a pointer to the data. There are options when creating the packet whether the data is dynamic (explicitly allocated and deallocated), or static (allocated and deallocated by the packet object)(由数据包对象分配和释放).&lt;/p>
&lt;p>Finally, packets are used in the classic caches as the unit to track coherency.因此，大部分数据包代码特定于经典缓存一致性协议。但是，数据包用于 gem5 中内存对象之间的所有通信，即使它们不直接涉及一致性（例如，DRAM 控制器和 CPU 模型）。&lt;/p>
&lt;p>gem5 includes a typedef for it : PacketPtr&lt;/p>
&lt;h3 id="port-interface">Port interface&lt;/h3>
&lt;p>request ports and response ports&lt;/p>
&lt;p>To do this, you create a new class that inherits from either &lt;code>RequestPort&lt;/code> or &lt;code>ResponsePort&lt;/code> for request and response ports,&lt;/p>
&lt;p>all of the port interfaces require a &lt;code>PacketPtr&lt;/code> as a parameter. Each of these functions (&lt;code>sendTimingReq&lt;/code>, &lt;code>recvTimingReq&lt;/code>, etc.), accepts a single parameter, a &lt;code>PacketPtr&lt;/code>.&lt;/p>
&lt;p>To send a request packet, the requestor calls &lt;code>sendTimingReq&lt;/code>. In turn, (and in the same callchain), the function &lt;code>recvTimingReq&lt;/code> is called on the responder with the same &lt;code>PacketPtr&lt;/code> as its sole parameter.&lt;/p>
&lt;p>where the responder is busy when the original request was sent.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 430px"
>
&lt;a href="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213201946502.png" data-size="589x328">
&lt;img src="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213201946502.png"
width="589"
height="328"
srcset="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213201946502_hu7895636963218854921.png 480w, https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213201946502_hu2675049832876778857.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>when the requestor is busy at the time the responder tries to send a response.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 162;
flex-basis: 389px"
>
&lt;a href="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213202456920.png" data-size="616x380">
&lt;img src="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213202456920.png"
width="616"
height="380"
srcset="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213202456920_hu4317689210990905296.png 480w, https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213202456920_hu12672958142998574135.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="simple-memory-object">simple memory object&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 99;
flex-basis: 237px"
>
&lt;a href="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213203001091.png" data-size="592x597">
&lt;img src="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213203001091.png"
width="592"
height="597"
srcset="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213203001091_hu13583053307651841828.png 480w, https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241213203001091_hu3189944316771512279.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="补充-c的private-protect-和-public">补充 (c++的prIvate protect 和 public)&lt;/h4>
&lt;p>private: 只能由该类中的函数、其友元函数访问，不能被其他任何访问，该类的对象也不能访问；&lt;/p>
&lt;p>protected: 可以被该类中的函数，子类的函数，以及其友元函数访问，不能被该类的对象访问；&lt;/p>
&lt;p>public: 可以被该类中的函数，子类中的函数，其友元函数访问，也可以由该类的对象访问。&lt;/p>
&lt;h3 id="声明simobject">声明simobject&lt;/h3>
&lt;p>SimpleMemobj.py&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">SimpleMemobj&lt;/span>(&lt;span style="color:#e06c75">SimObject&lt;/span>) :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>getPort是一个纯虚函数,必须要在C++中实现来定义&lt;/p>
&lt;h3 id="定义simplememobj类">定义SimpleMemobj类&lt;/h3>
&lt;p>simple_memobj.hh&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">SimpleMemobj&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#e06c75">SimObject&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/** constructor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>(&lt;span style="color:#e06c75">SimpleMemobjParams&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="定义响应端口类型">定义响应端口类型&lt;/h3>
&lt;p>simple_memobj.hh&lt;/p>
&lt;p>CPUSidePort ,从ResponsePort来继承&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">CPUSidePort&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#e06c75">ResponsePort&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">owner&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">CPUSidePort&lt;/span>(&lt;span style="color:#c678dd">const&lt;/span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">string&lt;/span>&lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">name&lt;/span>, &lt;span style="color:#e06c75">SimpleMemobj&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">owner&lt;/span>) &lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ResponsePort&lt;/span>(&lt;span style="color:#e06c75">name&lt;/span>, &lt;span style="color:#e06c75">owner&lt;/span>), &lt;span style="color:#e06c75">owner&lt;/span>(&lt;span style="color:#e06c75">owner&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">AddrRangeList&lt;/span> &lt;span style="color:#61afef;font-weight:bold">getAddrRanges&lt;/span>() &lt;span style="color:#c678dd">const&lt;/span> &lt;span style="color:#c678dd">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">protected&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Tick&lt;/span> &lt;span style="color:#e06c75">recvAtomic&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) &lt;span style="color:#c678dd">override&lt;/span> { &lt;span style="color:#e06c75">panic&lt;/span>(&lt;span style="color:#98c379">&amp;#34;recvAtomic unimpl.&amp;#34;&lt;/span>); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#61afef;font-weight:bold">recvFunctional&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) &lt;span style="color:#c678dd">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#61afef;font-weight:bold">recvTimingReq&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) &lt;span style="color:#c678dd">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#61afef;font-weight:bold">recvRespRetry&lt;/span>() &lt;span style="color:#c678dd">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="定义请求端口类型">定义请求端口类型&lt;/h3>
&lt;p>simple_memobj.hh&lt;/p>
&lt;p>MemSidePort 从RequestPort来继承 ,将来自CPU端口的请求转发到内存系统的其余部分&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">MemSidePort&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#e06c75">RequestPort&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">owner&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">MemSidePort&lt;/span>(&lt;span style="color:#c678dd">const&lt;/span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">string&lt;/span>&lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">name&lt;/span>, &lt;span style="color:#e06c75">SimpleMemobj&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">owner&lt;/span>) &lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">RequestPort&lt;/span>(&lt;span style="color:#e06c75">name&lt;/span>, &lt;span style="color:#e06c75">owner&lt;/span>), &lt;span style="color:#e06c75">owner&lt;/span>(&lt;span style="color:#e06c75">owner&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">protected&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">recvTimingResp&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) &lt;span style="color:#c678dd">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#61afef;font-weight:bold">recvReqRetry&lt;/span>() &lt;span style="color:#c678dd">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#61afef;font-weight:bold">recvRangeChange&lt;/span>() &lt;span style="color:#c678dd">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="定义simobject接口">定义SimObject接口&lt;/h3>
&lt;p>simple_memobj.hh&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">SimpleMemobj&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#e06c75">SimObject&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#e06c75">CPUSidePort&lt;/span> &lt;span style="color:#e06c75">declaration&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#e06c75">MemSidePort&lt;/span> &lt;span style="color:#e06c75">declaration&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">CPUSidePort&lt;/span> &lt;span style="color:#e06c75">instPort&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">CPUSidePort&lt;/span> &lt;span style="color:#e06c75">dataPort&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">MemSidePort&lt;/span> &lt;span style="color:#e06c75">memPort&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>(&lt;span style="color:#e06c75">SimpleMemobjParams&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Port&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">getPort&lt;/span>(&lt;span style="color:#c678dd">const&lt;/span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">string&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">if_name&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">PortID&lt;/span> &lt;span style="color:#e06c75">idx&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e06c75">InvalidPortID&lt;/span>) &lt;span style="color:#c678dd">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实现基本的simobject函数">实现基本的SimObject函数&lt;/h3>
&lt;p>即实现SimpleMemobj,getPort函数 Simple_memobj.cc&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>(&lt;span style="color:#e06c75">SimpleMemobjParams&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">params&lt;/span>) &lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">SimObject&lt;/span>(&lt;span style="color:#e06c75">params&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">instPort&lt;/span>(&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">name&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#98c379">&amp;#34;.inst_port&amp;#34;&lt;/span>, &lt;span style="color:#c678dd">this&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dataPort&lt;/span>(&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">name&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#98c379">&amp;#34;.data_port&amp;#34;&lt;/span>, &lt;span style="color:#c678dd">this&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">memPort&lt;/span>(&lt;span style="color:#e06c75">params&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">name&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#98c379">&amp;#34;.mem_side&amp;#34;&lt;/span>, &lt;span style="color:#c678dd">this&lt;/span>), &lt;span style="color:#e06c75">blocked&lt;/span>(&lt;span style="color:#e5c07b">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实现请求和响应端口函数">实现请求和响应端口函数&lt;/h3>
&lt;p>大多数情况下,每个端口函数只是将信息转发到主内存对象 (SimpleMemobj *owner)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">AddrRangeList&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">CPUSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">getAddrRanges&lt;/span>() &lt;span style="color:#c678dd">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">owner&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">getAddrRanges&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">CPUSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">recvFunctional&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">owner&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">handleFunctional&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">handleFunctional&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">memPort&lt;/span>.&lt;span style="color:#e06c75">sendFunctional&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">AddrRangeList&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">getAddrRanges&lt;/span>() &lt;span style="color:#c678dd">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Sending new ranges&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">memPort&lt;/span>.&lt;span style="color:#e06c75">getAddrRanges&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">MemSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">recvRangeChange&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">owner&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">sendRangeChange&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">sendRangeChange&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">instPort&lt;/span>.&lt;span style="color:#e06c75">sendRangeChange&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dataPort&lt;/span>.&lt;span style="color:#e06c75">sendRangeChange&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实现接收请求">实现接收请求&lt;/h3>
&lt;p>recvTimingReq , 需要检查是否SimpleMemobj可以接受请求 . &lt;code>SimpleMemobj&lt;/code>是一个非常简单的阻塞结构；我们一次只允许一个未完成的请求。因此，如果我们在另一个请求未完成的情况下收到一个请求，&lt;code>SimpleMemobj&lt;/code>将会阻塞第二个请求。&lt;/p>
&lt;p>CPUSidePort存储端口接口所有的流量控制信息. 需要添加needRetry . a boolean that stores whether we need to send a retry whenever the simplememobj becomes free .&lt;/p>
&lt;p>to handle the request for the simplememobj ,we first check if the simplememobj is already blocked waiting for a response to another request . if it is blocked ,then we return false to signal the calling request port that we cannot accept the request right now .&lt;strong>Otherwise, we mark the port as blocked and send the packet out of the memory port.&lt;/strong> For this, we can define a &lt;strong>helper function&lt;/strong> in the &lt;code>MemSidePort&lt;/code> object to hide the flow control from the &lt;code>SimpleMemobj&lt;/code> implementation.We will assume the &lt;code>memPort&lt;/code> handles all of the flow control and always return &lt;code>true&lt;/code> from &lt;code>handleRequest&lt;/code> since we were successful in consuming the request.&lt;/p>
&lt;p>Next, we need to implement the &lt;code>sendPacket&lt;/code> function in the &lt;code>MemSidePort&lt;/code>This function will handle the flow control in case its peer response port cannot accept the request. For this, we need to add a member to the &lt;code>MemSidePort&lt;/code> to store the packet in case it is blocked. It is the responsibility of the sender to store the packet if the receiver cannot receive the request (or response).&lt;/p>
&lt;p>此函数只是通过&lt;code>sendTimingReq&lt;/code>调用函数来发送数据包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">MemSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">sendPacket&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">panic_if&lt;/span>(&lt;span style="color:#e06c75">blockedPacket&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#c678dd">nullptr&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Should never try to send if blocked!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">sendTimingReq&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">blockedPacket&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实现接收响应">实现接收响应&lt;/h3>
&lt;p>当 &lt;code>MemSidePort&lt;/code>收到响应时，我们将响应通过 &lt;code>SimpleMemobj&lt;/code>到相应的&lt;code>CPUSidePort&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">MemSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">recvTimingResp&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">owner&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">handleResponse&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>未完&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;h4 id="getaddrranges">getAddrRanges()&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// cpuSidePort 调用 SimpleMemobj的方法获取地址范围
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">AddrRangeList&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">CPUSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">getAddrRanges&lt;/span>() &lt;span style="color:#c678dd">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">owner&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">getAddrRanges&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// SimpleMemobj调用memPort的方法获取地址范围
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">AddrRangeList&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">getAddrRanges&lt;/span>() &lt;span style="color:#c678dd">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DRPINTF&lt;/span>(&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Sending new ranges&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">memPort&lt;/span>.&lt;span style="color:#e06c75">getAddrRanges&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 内存模块的地址范围由其下游端口（memPort）决定，因此需要通过下游端口获取。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="sendrangechange">sendRangeChange()&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// MemSIdePort在获取地址变化的时候调用SimpleMemobj的方法将地址变化转发出去了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">MemSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">recvRangeChange&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">owner&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">sendRangeChange&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// SimpleMemobj在接受到地址变化是调用instPort和dataPort(cpuPort)的方法转发地址变化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">sendRangeChange&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">instPort&lt;/span>.&lt;span style="color:#e06c75">sendRangeChange&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dataPort&lt;/span>.&lt;span style="color:#e06c75">sendRangeChange&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="recvfunctionalpkt">recvFunctional(pkt)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 功能性请求
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">CPUSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">recvFunctional&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">owner&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">handleFunctional&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">handleFunctional&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">memPort&lt;/span>.&lt;span style="color:#e06c75">sendFunctional&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="recvtimingreqpkt">recvTimingReq(pkt)&lt;/h4>
&lt;p>cpu向mem发送请求的整个流程&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 接收时序请求
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 通过owner-&amp;gt;handleRequest(pkt)发送,如果block了,那就发送失败,需要通过上游needretry ,否则就将pkt发送到SimpleMemobj module了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">CPUSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">recvTimingReq&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">owner&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">handleRequest&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">needRetry&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 如果blocked 就返回false ,否则调用memPort去发送Packet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">handleRequeset&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">blocked&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Got request for addr %#x&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>, &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">getAddr&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">blocked&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">memPort&lt;/span>.&lt;span style="color:#e06c75">sendPacket&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// memSidePort 最终会调用sendTimingReq去发送给下游packet ,如果下游阻塞的话将packet保存到bloacketPacket去
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">MemSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">sendPacket&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">panic_if&lt;/span>(&lt;span style="color:#e06c75">blockedPacket&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#c678dd">nullptr&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Should never try to send if blocked!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">sendTimingReq&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">blockedPacket&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// retry是memside内部的活动,将保存的blocketPacket重新发送
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">MemSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">recvReqRetry&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">assert&lt;/span>(&lt;span style="color:#e06c75">blockedPacket&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#c678dd">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">blockedPacket&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">blockedPacket&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sendPacket&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="sendtimingresppkt">sendTimingResp(pkt)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 在 memSidePort端口调用SimpleMemobj的方法去转发packet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">MemSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">recvTimingResp&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">owner&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">handleResponse&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 有packet了就没有必要继续阻塞了,那就解除阻塞 ,然后转发到cpuPort去
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">handleResponse&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">assert&lt;/span>(&lt;span style="color:#e06c75">blocked&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Got response for addr %#x&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>, &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">getAddr&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">blocked&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">isInstFetch&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">instPort&lt;/span>.&lt;span style="color:#e06c75">sendPacket&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dataPort&lt;/span>.&lt;span style="color:#e06c75">sendPacket&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 由于已经解除了block,所以可以通知cpu侧端口去retry失败的请求了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">instPort&lt;/span>.&lt;span style="color:#e06c75">trySendRetry&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dataPort&lt;/span>.&lt;span style="color:#e06c75">trySendRetry&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// trySendRetry
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">CPUSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">trySendRetry&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 要判断blocketPacket是因为如果blocketPacket不为空代表mem那边还是blocked的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">needRetry&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">blockedPacket&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#c678dd">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">needRetry&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">SimpleMemobj&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Sending retry req.&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// sendRetryReq竟然不需要重写
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">sendRetryReq&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 在CPUSidePort端去发送数据给CPU,如果CPU那边block的话,就在后续retry
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">CPUSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">sendPacket&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">panic_if&lt;/span>(&lt;span style="color:#e06c75">blockedPacket&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#c678dd">nullptr&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Should never try to send if blocked!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">sendTimingResp&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">blockedPacket&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">SimpleMemobj&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">CPUSidePort&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">recvRespRetry&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">assert&lt;/span>(&lt;span style="color:#e06c75">blockedPacket&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#c678dd">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">blockedPacket&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">blockedPacket&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sendPacket&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 232;
flex-basis: 558px"
>
&lt;a href="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241214212734143-1734277025888-1.png" data-size="1089x468">
&lt;img src="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241214212734143-1734277025888-1.png"
width="1089"
height="468"
srcset="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241214212734143-1734277025888-1_hu13758661100891426716.png 480w, https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241214212734143-1734277025888-1_hu10750278072586324411.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="创造简单缓存">创造简单缓存&lt;/h2>
&lt;h3 id="vectorresponseport-和-responseport">VectorResponsePort 和 ResponsePort&lt;/h3>
&lt;p>&lt;code>ResponsePort&lt;/code> 是一个基本的端口，用于处理响应（通常是从内存或其他外设返回的响应）。这个端口通常用于单一的响应通道，表示一个特定的响应类型。&lt;/p>
&lt;p>&lt;code>VectorResponsePort&lt;/code> 是 &lt;code>ResponsePort&lt;/code> 的扩展，它允许处理多个响应通道。这意味着它可以同时处理多个请求或多个响应，这在一些复杂的系统设计中非常有用。&lt;/p>
&lt;h3 id="simple-cache-object">simple cache object&lt;/h3>
&lt;p>&lt;code>System&lt;/code> parameter, which is a pointer to the main system this cache is connected to. we can get the cache block size from the system object when we are initializing the cache.&lt;/p>
&lt;h3 id="implementing-the-simplecache">implementing the SimpleCache&lt;/h3>
&lt;p>There are a couple of changes in the constructor and the key memory object functions&lt;/p>
&lt;p>we need to add an extra parameter to handleRequest that is the id of the port which the request originated .&lt;/p>
&lt;p>the new handleRequest does two different things . First , it stores the port if of the request as discussed above . Since the SimpleCache is blocking and only allows a single request outstanding at a time, we only need to save a single port id&lt;/p>
&lt;p>second , it takes time to access . Therefore , we need to take into account the latency to access the cache tags and the cache data for a request . we added an extra parameter to the cache object for this . and in &lt;strong>handleRequest we now use an event to stall the request for the needed amount of time&lt;/strong> . we schedule a new event for latency cycles in th future .. the clockEdge function returns the tick that the nth cycle in the future occurs on .&lt;/p>
&lt;p>instead of using an EventWrapper, in the SimpleCache we will use a new class . The reason we cannot use an &lt;code>EventWrapper&lt;/code>, is that we need to pass the packet (&lt;code>pkt&lt;/code>) from &lt;code>handleRequest&lt;/code> to the event handler function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// simple_cache.hh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">AccessEvent&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#c678dd">public&lt;/span> &lt;span style="color:#e06c75">Event&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">private&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">SimpleCache&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">cache&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">public&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">AccessEvent&lt;/span>(&lt;span style="color:#e06c75">SimpleCache&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">cache&lt;/span>, &lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>) &lt;span style="color:#56b6c2">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Event&lt;/span>(&lt;span style="color:#e06c75">Default_Pri&lt;/span>, &lt;span style="color:#e06c75">AutoDelete&lt;/span>), &lt;span style="color:#e06c75">cache&lt;/span>(&lt;span style="color:#e06c75">cache&lt;/span>), &lt;span style="color:#e06c75">pkt&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#61afef;font-weight:bold">process&lt;/span>() &lt;span style="color:#c678dd">override&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cache&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">accessTiming&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// simple_cache.cc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">SimpleCache&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">handleRequest&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>, &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">port_id&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">blocked&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">SimpleCache&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Got request for addr %#x&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>, &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">getAddr&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">blocked&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">waitingPortId&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">port_id&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">schedule&lt;/span>(&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">AccessEvent&lt;/span>(&lt;span style="color:#c678dd">this&lt;/span>, &lt;span style="color:#e06c75">pkt&lt;/span>), &lt;span style="color:#e06c75">clockEdge&lt;/span>(&lt;span style="color:#e06c75">latency&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// this function first functionally accesses the cache.This function accessFunctional performs the functional access of the cache and either reads or writes the cache on a hit or returns that the access was a miss.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// If the access is a hit, we simply need to respond to the packet.To respond, you first must call the function makeResponse on the packet.This converts the packet from a request packet to a response packet. Then, we can send the response back to the CPU.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">SimpleCache&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">accessTiming&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">hit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">accessFunctional&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">hit&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">makeResponse&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sendResponse&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> {&lt;span style="color:#7f848e">// 如果数据包对齐,并且请求的大小是缓存块的大小,就可以把请求转发到内存,如果数据包小于缓存块,需要创建一个新的数据包来从内存中读取整个缓存块, 无论数据包是读取还是写入,都会向内存发送读取请求.新的数据包的大小为blocksize.然后保存原来的数据包用于恢复,发送新的数据包给内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">Addr&lt;/span> &lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">getAddr&lt;/span>(); &lt;span style="color:#7f848e">// 获取请求地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">Addr&lt;/span> &lt;span style="color:#e06c75">block_addr&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">getBlockAddr&lt;/span>(&lt;span style="color:#e06c75">blockSize&lt;/span>); &lt;span style="color:#7f848e">// 获取数据块地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">unsigned&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">getSize&lt;/span>(); &lt;span style="color:#7f848e">// 获取请求大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 如果请求的地址与缓存块地址相同且请求的大小等于缓存块大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">block_addr&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">blockSize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">SimpleCache&lt;/span>, &lt;span style="color:#98c379">&amp;#34;forwarding packet&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">memPort&lt;/span>.&lt;span style="color:#e06c75">sendPacket&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>); &lt;span style="color:#7f848e">// 将请求转发给内存端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">SimpleCache&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Upgrading packet to block size&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 检查请求的访问是否会跨越多个缓存行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">panic_if&lt;/span>(&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">block_addr&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">blockSize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;Cannot handle accesses that span multiple cache lines&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">assert&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">needsResponse&lt;/span>()); &lt;span style="color:#7f848e">// 确保请求需要响应
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">MemCmd&lt;/span> &lt;span style="color:#e06c75">cmd&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">isWrite&lt;/span>() &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">isRead&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cmd&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">MemCmd&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">ReadReq&lt;/span>; &lt;span style="color:#7f848e">// 如果是写请求或读请求，设置为读请求
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> } &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">panic&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Unknown packet type in upgrade size&amp;#34;&lt;/span>); &lt;span style="color:#7f848e">// 如果是其他请求类型，触发 panic
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 创建新的请求包，大小为块大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">new_pkt&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">Packet&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>, &lt;span style="color:#e06c75">cmd&lt;/span>, &lt;span style="color:#e06c75">blockSize&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">new_pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">allocate&lt;/span>(); &lt;span style="color:#7f848e">// 为新的请求包分配内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">outstandingPacket&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>; &lt;span style="color:#7f848e">// 记录当前的请求包，稍后将其恢复
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">memPort&lt;/span>.&lt;span style="color:#e06c75">sendPacket&lt;/span>(&lt;span style="color:#e06c75">new_pkt&lt;/span>); &lt;span style="color:#7f848e">// 将新的请求包发送到内存端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// the sendResponse function does the same things as the handleResponse function in the SimpleMemobj except that it uses the waitingPortId to send the packet to the right port.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">SimpleCache&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">sendResponse&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">port&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">waitingPortId&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">blocked&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">waitingPortId&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cpuPorts&lt;/span>[&lt;span style="color:#e06c75">port&lt;/span>].&lt;span style="color:#e06c75">sendPacket&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#c678dd">auto&lt;/span>&lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e06c75">port&lt;/span> : &lt;span style="color:#e06c75">cpuPorts&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">port&lt;/span>.&lt;span style="color:#e06c75">trySendRetry&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">SimpleCache&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">handleResponse&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">assert&lt;/span>(&lt;span style="color:#e06c75">blocked&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">SimpleCache&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Got response for addr %#x&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>, &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">getAddr&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">insert&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 如果有outstandingPacket,需要将原始数据包转发给原始请求,如果没有,将pkt中的响应转发给原始请求 如果我们收到的响应数据包是升级数据包，因为原始请求小于缓存行，那么我们需要将新数据复制到未完成数据包中或在写入时写入缓存。然后，我们需要删除在未命中处理逻辑中生成的新数据包。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 此时缓存已经更新完成了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">outstandingPacket&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#c678dd">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">accessFunctional&lt;/span>(&lt;span style="color:#e06c75">outstandingPacket&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">outstandingPacket&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">makeResponse&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">delete&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pkt&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">outstandingPacket&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">outstandingPacket&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#7f848e">// else, pkt contains the data it needs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sendResponse&lt;/span>(&lt;span style="color:#e06c75">pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="功能缓存逻辑">功能缓存逻辑&lt;/h3>
&lt;p>最简单的缓存存储是从地址映射到数据的映射(哈希表),&lt;/p>
&lt;pre tabindex="0">&lt;code>std::unordered_map&amp;lt;Addr, uint8_t*&amp;gt; cacheStore;
&lt;/code>&lt;/pre>&lt;h4 id="补充stdunordered_map">补充(std::unordered_map)&lt;/h4>
&lt;p>unordered_map和map类似,都是存储的key-value的值,可以通过key快速索引到value,但是unordered_map是乱序的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">unordered_map&lt;/span>&lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#e06c75">key_type&lt;/span>, &lt;span style="color:#e06c75">value_type&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">map_name&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">myMap&lt;/span>.&lt;span style="color:#e06c75">erase&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>); &lt;span style="color:#7f848e">// 删除键为1的元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">auto&lt;/span> &lt;span style="color:#e06c75">it&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">myMap&lt;/span>.&lt;span style="color:#e06c75">find&lt;/span>(&lt;span style="color:#d19a66">2&lt;/span>); &lt;span style="color:#7f848e">//查找键值为2的元素
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 如果检查到命中,如果数据包是写入操作,就更新缓存中的数据,使用writeDataToBlock来写入,如果读取操作,需要来更新数据包中的值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">SimpleCache&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">accessFunctional&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 通过getBlockAddr去获取和blockSize对齐的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">Addr&lt;/span> &lt;span style="color:#e06c75">block_addr&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">getBlockAddr&lt;/span>(&lt;span style="color:#e06c75">blockSize&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">auto&lt;/span> &lt;span style="color:#e06c75">it&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">cacheStore&lt;/span>.&lt;span style="color:#e06c75">find&lt;/span>(&lt;span style="color:#e06c75">block_addr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">it&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e06c75">cacheStore&lt;/span>.&lt;span style="color:#e06c75">end&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">isWrite&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">writeDataToBlock&lt;/span>(&lt;span style="color:#e06c75">it&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">second&lt;/span>, &lt;span style="color:#e06c75">blockSize&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#61afef;font-weight:bold">if&lt;/span> (&lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">isRead&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">setDataFromBlock&lt;/span>(&lt;span style="color:#e06c75">it&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">second&lt;/span>, &lt;span style="color:#e06c75">blockSize&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">panic&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Unknown packet type!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="insert">insert&lt;/h4>
&lt;p>用于将数据插入缓存&lt;/p>
&lt;p>第一步是检查缓存当前是否已满。如果缓存中的条目（块）多于 SimObject 参数设置的缓存容量，则我们需要逐出某些条目。以下代码利用 C++ 的哈希表实现逐出随机条目&lt;code>unordered_map&lt;/code>。&lt;/p>
&lt;p>在驱逐时，我们需要将数据写回到后备内存中，以防数据已被更新。为此，我们创建一个新的&lt;code>Request&lt;/code>-&lt;code>Packet&lt;/code> 对。数据包使用新的内存命令：&lt;code>MemCmd::WritebackDirty&lt;/code>。然后，我们通过内存侧端口 () 发送数据包&lt;code>memPort&lt;/code>并擦除缓存存储映射中的条目。&lt;/p>
&lt;p>然后，在某个块可能被逐出后，我们将新地址添加到缓存中。为此，我们只需为该块分配空间并向映射添加一个条目。最后，我们将响应数据包中的数据写入新分配的块中。由于我们确保如果数据包小于缓存块，则在缓存未命中逻辑中创建一个新数据包，因此该数据保证为缓存块的大小。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#e06c75">SimpleCache&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">insert&lt;/span>(&lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">cacheStore&lt;/span>.&lt;span style="color:#e06c75">size&lt;/span>() &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e06c75">capacity&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Select random thing to evict. This is a little convoluted since we
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// are using a std::unordered_map. See http://bit.ly/2hrnLP2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">bucket&lt;/span>, &lt;span style="color:#e06c75">bucket_size&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">bucket&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">random_mt&lt;/span>.&lt;span style="color:#e06c75">random&lt;/span>(&lt;span style="color:#d19a66">0&lt;/span>, (&lt;span style="color:#e5c07b">int&lt;/span>)&lt;span style="color:#e06c75">cacheStore&lt;/span>.&lt;span style="color:#e06c75">bucket_count&lt;/span>() &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#c678dd">while&lt;/span> ( (&lt;span style="color:#e06c75">bucket_size&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">cacheStore&lt;/span>.&lt;span style="color:#e06c75">bucket_size&lt;/span>(&lt;span style="color:#e06c75">bucket&lt;/span>)) &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 返回 cacheStore.begin(bucket)迭代器往后移动 random_mt.random步的位置,也是一个迭代器 ,或者说地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">auto&lt;/span> &lt;span style="color:#e06c75">block&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">std&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">next&lt;/span>(&lt;span style="color:#e06c75">cacheStore&lt;/span>.&lt;span style="color:#e06c75">begin&lt;/span>(&lt;span style="color:#e06c75">bucket&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">random_mt&lt;/span>.&lt;span style="color:#e06c75">random&lt;/span>(&lt;span style="color:#d19a66">0&lt;/span>, &lt;span style="color:#e06c75">bucket_size&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">//创建写回包并将其发送到内存端口 ,一个请求包含地址,大小,flags , id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">RequestPtr&lt;/span> &lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">Request&lt;/span>(&lt;span style="color:#e06c75">block&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">first&lt;/span>, &lt;span style="color:#e06c75">blockSize&lt;/span>, &lt;span style="color:#d19a66">0&lt;/span>, &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">PacketPtr&lt;/span> &lt;span style="color:#e06c75">new_pkt&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">Packet&lt;/span>(&lt;span style="color:#e06c75">req&lt;/span>, &lt;span style="color:#e06c75">MemCmd&lt;/span>&lt;span style="color:#56b6c2">::&lt;/span>&lt;span style="color:#e06c75">WritebackDirty&lt;/span>, &lt;span style="color:#e06c75">blockSize&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 将被驱逐快的数据添加都新的包里,block_&amp;gt;second为数据指针,block-&amp;gt;first为地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">new_pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">dataDynamic&lt;/span>(&lt;span style="color:#e06c75">block&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">second&lt;/span>); &lt;span style="color:#7f848e">// This will be deleted later
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">DPRINTF&lt;/span>(&lt;span style="color:#e06c75">SimpleCache&lt;/span>, &lt;span style="color:#98c379">&amp;#34;Writing packet back %s&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>, &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">print&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 发送
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">memPort&lt;/span>.&lt;span style="color:#e06c75">sendTimingReq&lt;/span>(&lt;span style="color:#e06c75">new_pkt&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cacheStore&lt;/span>.&lt;span style="color:#e06c75">erase&lt;/span>(&lt;span style="color:#e06c75">block&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">first&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 为新的缓存块分配内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e5c07b">uint8_t&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">uint8_t&lt;/span>[&lt;span style="color:#e06c75">blockSize&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// cacheStore采取的是类似于哈希表的形式,地址作为key,保存数据指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">cacheStore&lt;/span>[&lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">getAddr&lt;/span>()] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">data&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 将请求的数据写入缓存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">pkt&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">writeDataToBlock&lt;/span>(&lt;span style="color:#e06c75">data&lt;/span>, &lt;span style="color:#e06c75">blockSize&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="总结-1">总结&lt;/h3>
&lt;p>相比较于SimpleMemobj,&lt;/p>
&lt;p>recvTimingReq没有改变&lt;/p>
&lt;p>handleRequest改变,首先,增加了id,可以明确发起请求的端口是什么id ,其次,需要去延时执行一个事件accessTiming,&lt;/p>
&lt;p>对于accessTiming函数来说,在通过accessFunctional函数获取1.是否hit,2.hit的话写入数据包的值,将req的数据包转为resp,然后就可以直接sendResp ,&lt;/p>
&lt;p>如果未命中的话,会去内存读一个缓存行大小的数据包,即先sendPacket(没变)-&amp;gt;sendTimingReq(没变)-&amp;gt;recvTimingResp((没变)-&amp;gt;handleResponse&lt;/p>
&lt;p>对于handleResponse,首先需要去insert(pkt),即选择相应的缓存行去插入,同时需要将排除的缓存行写回内存(再次调用memPort.sendPacket),另外,有一个有意思的点是originalPacket,就是如果req的时候不是对整个block大小请求,就会去新建一个packet包发给memport,然后originalPacket就保存着原来的数据包,所以在handleResponse的时候会去判断originalPacket是否存在,如果存在的话会用originalPacket重新去读一次缓存(accessFunction)获取到对应的数据,然后sendResponse&lt;/p>
&lt;p>sendResponse有一个改变就是通过id去选择Port了,然后就是SendPacket-&amp;gt;SendTimingReq,中间会由于cpu阻塞进行RecvRespRetry,均没有改变&lt;/p>
&lt;p>最大的改变其实是handleRequest和handleResponse,本身只控制阻塞和简单的转发,现在控制cache的整个逻辑&lt;/p>
&lt;p>block在handlereq上的时候转变为true,在sendResponse的时候转化为false&lt;/p>
&lt;p>blockedPacket在recvRespRetry,recvReqRetry的时候会清空,在sendPacket时会进行赋值,赋值的条件就是后续的操作阻塞了,sendTimingReq或者sendTimingResp ,发起retry就会清空blockedPacket .&lt;/p>
&lt;p>对于recvRespRetry和recvReqRetry没有任何条件,猜测是由下级或者上级根据某种条件发送的,这个retry就是把已经得到的数据获取,是接受数据的retry&lt;/p>
&lt;p>还有一个retry,是TrySendRetry,它是希望CPU重新再发送一次请求,因为有一些req可能会直接卡在handleRequest这边,在sendResponse的时候会发起retry ,最终sendRetryReq的条件是 needRetry &amp;amp;&amp;amp; blockedPacket == nullptr&lt;/p>
&lt;p>needRetry 在 trySendRetry会 变成false , 在recvTimingReq会变成true ,变成true的条件就是handleRequest是block的,还有 ( blocketPacket || needRetry )(why?这个唯一增加的约束是在recvRespRetry那边有blockPacket的时候,本来可以成功,但是现在失败了)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 232;
flex-basis: 558px"
>
&lt;a href="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241214212734143-1734277025888-1.png" data-size="1089x468">
&lt;img src="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241214212734143-1734277025888-1.png"
width="1089"
height="468"
srcset="https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241214212734143-1734277025888-1_hu13758661100891426716.png 480w, https://VastCircle.github.io/2024/gem5_%E4%BF%AE%E6%94%B9%E6%89%A9%E5%B1%95/image-20241214212734143-1734277025888-1_hu10750278072586324411.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/DswCnblog/p/5629165.html" target="_blank" rel="noopener"
>lambda函数&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/shiyublog/p/10996062.html" target="_blank" rel="noopener"
>c++中public,protected,private的区别&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/zhenz0729/article/details/135295268" target="_blank" rel="noopener"
>gem5学习,主要是看insert&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.runoob.com/cplusplus/cpp-libs-unordered_map.html" target="_blank" rel="noopener"
>unordered_map&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Gem5_learning</title><link>https://VastCircle.github.io/2024/gem5_learning/</link><pubDate>Mon, 09 Dec 2024 15:11:13 +0800</pubDate><guid>https://VastCircle.github.io/2024/gem5_learning/</guid><description>&lt;h2 id="配置">配置&lt;/h2>
&lt;p>使用如下命令去安装gem5&lt;/p>
&lt;pre tabindex="0">&lt;code>git clone https://github.com/gem5/gem5
&lt;/code>&lt;/pre>&lt;p>安装依赖 &lt;a class="link" href="https://www.gem5.org/documentation/general_docs/building" target="_blank" rel="noopener"
>https://www.gem5.org/documentation/general_docs/building&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo apt install build-essential git m4 scons zlib1g zlib1g-dev &lt;span style="color:#98c379">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">&lt;/span> libprotobuf-dev protobuf-compiler libprotoc-dev libgoogle-perftools-dev &lt;span style="color:#98c379">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">&lt;/span> python3-dev libboost-all-dev pkg-config python3-tk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;/p>
&lt;pre tabindex="0">&lt;code>python3 `which scons` build/X86/gem5.opt -j9
&lt;/code>&lt;/pre>&lt;h3 id="问题1--youre-missing-the-pre-commitcommit-msg-hooks-未解决">问题1 : you&amp;rsquo;re missing the pre-commit/commit-msg hooks (未解决)&lt;/h3>
&lt;p>出现错误&lt;/p>
&lt;blockquote>
&lt;p>You&amp;rsquo;re missing the pre-commit/commit-msg hooks. These hook help to ensure your
code follows gem5&amp;rsquo;s style rules on git commit and your commit messages follow
our commit message requirements. This script will now install these hooks in
your .git/hooks/ directory.&lt;/p>
&lt;/blockquote>
&lt;h3 id="问题2--cant-find-a-working-python-installation">问题2 : can&amp;rsquo;t find a working python installation&lt;/h3>
&lt;blockquote>
&lt;p>Error: Can&amp;rsquo;t find a working Python installation with Python-3.11 version&lt;/p>
&lt;/blockquote>
&lt;p>在.zshrc里增加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">export&lt;/span> &lt;span style="color:#e06c75">LD_LIBRARY_PATH&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e06c75">$LD_LIBRARY_PATH&lt;/span>:/opt/python361/lib
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="问题3--couldnt-find-any-hdf5-c-libraries-未解决">问题3 : couldn&amp;rsquo;t find any hdf5 c++ libraries (未解决)&lt;/h3>
&lt;blockquote>
&lt;p>Warning: Header file &amp;lt;png.h&amp;gt; not found. This host has no libpng library. Disabling support for PNG framebuffers. Warning: Couldn&amp;rsquo;t find any HDF5 C++ libraries. Disabling HDF5 support.&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>sudo apt-get install libhdf5-dev
sudo apt-get install libpng-dev
&lt;/code>&lt;/pre>&lt;p>上面的指令还是无效(应该是没有含c++库),需要自己构建hdf5的c++库&lt;/p>
&lt;p>从&lt;a class="link" href="https://support.hdfgroup.org/downloads/hdf5/hdf5_1_14_5.html" target="_blank" rel="noopener"
>链接&lt;/a>获取hdf5的安装包&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 210;
flex-basis: 504px"
>
&lt;a href="https://VastCircle.github.io/2024/gem5_learning/image-20241209202620390.png" data-size="1477x702">
&lt;img src="https://VastCircle.github.io/2024/gem5_learning/image-20241209202620390.png"
width="1477"
height="702"
srcset="https://VastCircle.github.io/2024/gem5_learning/image-20241209202620390_hu10008969366492264879.png 480w, https://VastCircle.github.io/2024/gem5_learning/image-20241209202620390_hu831555886710106580.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 解压 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar zxf hdf5-X.Y.Z.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 修改configure文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">HDF_CXX&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>no -&amp;gt; &lt;span style="color:#e06c75">HDF_CXX&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 构建&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./configure --prefix&lt;span style="color:#56b6c2">=&lt;/span>/usr/local/hdf5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>没救了,还是找不到&lt;/p>
&lt;h2 id="vscode-python-环境配置">vscode python 环境配置&lt;/h2>
&lt;p>GEM 5 的 SimObject Python 定义都在 &lt;code>m5.objects&lt;/code> 包下，但 python 文件组织却不是按照目录进行的，每个 SimObject 虽然都属于 &lt;code>m5.objects&lt;/code> 包，但其对应的文件却各自位于对应 C++ 源代码目录下。GEM 5 本身使用了其他的技巧来使得这些分散的 python 文件都置于 &lt;code>m5.objects&lt;/code> 包下方便使用（详见 &lt;code>src/SConscript&lt;/code> 文件中的 &lt;code>SimObject&lt;/code> 以及 &lt;code>src/python/importer.py&lt;/code> 文件）。&lt;/p>
&lt;p>为了使 vscode 的 pylance 能够正确识别所有的 SimObject 方便代码阅读，可以将这些文件通过软链接的方式置于 &lt;code>build/ARM/python/m5/objects&lt;/code> 目录下。可以在 GEM 5 运行的 python 脚本（比如 &lt;code>config/learning_gem5/part1/simple.py&lt;/code>）中添加以下代码来生成创建软链接的脚本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">f&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">open&lt;/span>(&lt;span style="color:#98c379">&amp;#39;create_link.sh&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;w&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">key&lt;/span>,&lt;span style="color:#e06c75">val&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_path&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>]&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">modules&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">items&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">key&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">startswith&lt;/span>(&lt;span style="color:#98c379">&amp;#39;m5.objects&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 将 xx 改为对应的前缀长度&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">f&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">write&lt;/span>(&lt;span style="color:#98c379">&amp;#34;ln -s ../../../../../src/&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">val&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>][&lt;span style="color:#e06c75">xx&lt;/span>:] &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#98c379">&amp;#34; ./&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过运行 &lt;code>./build/ARM/gem5.opt simple.py&lt;/code> 就可以生成对应的脚本。之后将该脚本在 &lt;code>build/ARM/python/m5/objects&lt;/code> 目录下执行。注意生成的脚本中有一些 python 文件是在 &lt;code>build/ARM&lt;/code> 文件夹下的所以使用 &lt;code>val[0][xx:]&lt;/code> 截取会有问题，需要手动修改（几个 &lt;code>mem/ruby/protocol&lt;/code> 下的 python 文件）。&lt;/p>
&lt;p>之后还需要在 &lt;code>m5/objects/__init__.py&lt;/code> 文件中加入对应的 &lt;code>from xx import *&lt;/code> 来使这些 SimObject 能够通过 &lt;code>from m5.objects import *&lt;/code> 导入。将上面 python 代码中的 &lt;code>f.write&lt;/code> 一行变为：&lt;code>f.write(&amp;quot;from &amp;quot; + key.split('.')[-1] + &amp;quot; import *\n&amp;quot;)&lt;/code> 来生成这些代码并将这些代码加入到 &lt;code>m5/objects/__init__.py&lt;/code> 文件中。&lt;/p>
&lt;p>最后在 vscode 的 pylance 配置中将 &lt;code>./build/ARM/python&lt;/code> 加入到 &lt;code>extraPaths&lt;/code> 中：修改 &lt;code>.vscode/settings.json&lt;/code> 文件，将其加入到 &lt;code>python.analysis.extraPaths&lt;/code> 中。&lt;/p>
&lt;h2 id="创建简单配置脚本">创建简单配置脚本&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">m5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">m5.ojbects&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 创建SimObject &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">System&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 设计时钟&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">clk_domain&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">SrcClockDomain&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">clk_domain&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">clock&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;1GHz&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">clk_domain&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">voltage_domain&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">VoltageDomain&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 设置模拟内存&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_mode&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#98c379">&amp;#39;timing&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_ranges&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e06c75">AddrRange&lt;/span>(&lt;span style="color:#98c379">&amp;#39;512MB&amp;#39;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 设置cpu &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">X86TimingSimpleCPU&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 创建内存总线&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">membus&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">SystemXBar&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 将cpu的缓存端口连接到内存总线&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">icache_port&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">membus&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu_side_ports&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dcache_port&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">membus&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu_side_ports&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">createInterruptController&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">interrupts&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>]&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pio&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">membus&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_side_ports&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">interrupts&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>]&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">int_requestor&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">membus&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu_side_ports&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">interrupts&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>]&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">int_responder&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">membus&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_side_ports&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">system_port&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">membus&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu_side_ports&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 创建内存控制器并将其连接到membus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_ctrl&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">MemCtrl&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dram&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">DDR3_1600_8x8&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dram&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">range&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_ranges&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_ctrl&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">port&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">membus&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_side_ports&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## bin文件的路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">thispath&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">os&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">path&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dirname&lt;/span>(&lt;span style="color:#e06c75">os&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">path&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">realpath&lt;/span>(&lt;span style="color:#e06c75">__file__&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">binary&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">os&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">path&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">thispath&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;../../../&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;tests/test-progs/hello/bin/x86/linux/hello&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># 创建一个进程给&amp;#34;hello world&amp;#34;应用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">workload&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">SEWorkload&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">init_compatible&lt;/span>(&lt;span style="color:#e06c75">binary&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">process&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">Process&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">process&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e06c75">binary&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">workload&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">process&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">system&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">createThreads&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">root&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">Root&lt;/span>(&lt;span style="color:#e06c75">full_system&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>, &lt;span style="color:#e06c75">system&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">system&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">m5&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">instantiate&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Beginning simulation!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">exit_event&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">m5&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">simulate&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#98c379">&amp;#39;Exiting @ tick &lt;/span>&lt;span style="color:#98c379">{}&lt;/span>&lt;span style="color:#98c379"> because &lt;/span>&lt;span style="color:#98c379">{}&lt;/span>&lt;span style="color:#98c379">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">format&lt;/span>(&lt;span style="color:#e06c75">m5&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">curTick&lt;/span>(), &lt;span style="color:#e06c75">exit_event&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getCause&lt;/span>()))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 139;
flex-basis: 334px"
>
&lt;a href="https://VastCircle.github.io/2024/gem5_learning/image-20241210144442456.png" data-size="583x418">
&lt;img src="https://VastCircle.github.io/2024/gem5_learning/image-20241210144442456.png"
width="583"
height="418"
srcset="https://VastCircle.github.io/2024/gem5_learning/image-20241210144442456_hu6692497068779717089.png 480w, https://VastCircle.github.io/2024/gem5_learning/image-20241210144442456_hu15383879969304235760.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>通过build/X86/gem5.opt configs/tutorial/part1/simple.py可以观察到终端能够输出具体的结果&lt;/p>
&lt;h2 id="将缓存添加到配置脚本">将缓存添加到配置脚本&lt;/h2>
&lt;h3 id="经典缓存和ruby">经典缓存和Ruby&lt;/h3>
&lt;p>gem5 目前有两个完全不同的子系统来模拟系统中的片上缓存，即“经典缓存”和“Ruby”。历史原因是 gem5 是密歇根州的 m5 和威斯康星州的 GEMS 的组合。GEMS 使用 Ruby 作为其缓存模型，而经典缓存来自 m5 代码库（因此称为“经典”）。这两个模型之间的区别在于 Ruby 旨在详细模拟缓存一致性。&lt;/p>
&lt;h3 id="cache">cache&lt;/h3>
&lt;p>Cache SimObject 声明可以在 src/mem/cache/Cache.py 中找到&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 53;
flex-basis: 129px"
>
&lt;a href="https://VastCircle.github.io/2024/gem5_learning/image-20241210210757575.png" data-size="402x746">
&lt;img src="https://VastCircle.github.io/2024/gem5_learning/image-20241210210757575.png"
width="402"
height="746"
srcset="https://VastCircle.github.io/2024/gem5_learning/image-20241210210757575_hu8240875021614920086.png 480w, https://VastCircle.github.io/2024/gem5_learning/image-20241210210757575_hu11555729507939211325.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="gem5的数据统计和输出">gem5的数据统计和输出&lt;/h2>
&lt;p>运行gem5在m5out生成三个文件&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>config.ini&lt;/strong>&lt;/p>
&lt;p>包含为模拟创建的每个 SimObject 的列表及其参数值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>config.json&lt;/strong>&lt;/p>
&lt;p>与 config.ini 相同，但采用 json 格式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>stats.txt&lt;/strong>&lt;/p>
&lt;p>为模拟注册的所有 gem5 统计数据的文本表示。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="statstxt">stats.txt&lt;/h3>
&lt;p>比较重要的数据&lt;/p>
&lt;p>simSeconds : 模拟的总时间&lt;/p>
&lt;p>simInsts : CPU提交的指令数&lt;/p>
&lt;p>hostInstrate : gem5的性能&lt;/p>
&lt;p>cpi : 指令周期,每条指令运行的周期&lt;/p>
&lt;p>ipc : 周期指令,每周期运行的指令&lt;/p>
&lt;p>numCycles:总运行周期&lt;/p>
&lt;p>sytem.cpu. : cpu的统计信息&lt;/p>
&lt;p>system.mem_ctrl : 内存的统计信息&lt;/p>
&lt;h2 id="gem5自带的配置文件">gem5自带的配置文件&lt;/h2>
&lt;p>在config里面&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>configs/boot:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bbench-gb.rcS bbench-ics.rcS hack_back_ckpt.rcS halt.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configs/common:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Benchmarks.py Caches.py cpu2000.py FileSystemConfig.py GPUTLBConfig.py HMC.py MemConfig.py Options.py Simulation.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CacheConfig.py cores CpuConfig.py FSConfig.py GPUTLBOptions.py __init__.py ObjectList.py SimpleOpts.py SysPaths.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configs/dist:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sw.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configs/dram:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lat_mem_rd.py low_power_sweep.py sweep.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configs/example:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apu_se.py etrace_replay.py garnet_synth_traffic.py hmctest.py hsaTopology.py memtest.py read_config.py ruby_direct_test.py ruby_mem_test.py sc_main.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arm fs.py hmc_hello.py hmc_tgen.cfg memcheck.py noc_config riscv ruby_gpu_random_test.py ruby_random_test.py se.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configs/learning_gem5:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>part1 part2 part3 README
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configs/network:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__init__.py Network.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configs/nvm:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sweep_hybrid.py sweep.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configs/ruby:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AMD_Base_Constructor.py CHI.py Garnet_standalone.py __init__.py MESI_Three_Level.py MI_example.py MOESI_CMP_directory.py MOESI_hammer.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CHI_config.py CntrlBase.py GPU_VIPER.py MESI_Three_Level_HTM.py MESI_Two_Level.py MOESI_AMD_Base.py MOESI_CMP_token.py Ruby.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configs/splash2:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cluster.py run.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configs/topologies:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BaseTopology.py Cluster.py CrossbarGarnet.py Crossbar.py CustomMesh.py __init__.py MeshDirCorners_XY.py Mesh_westfirst.py Mesh_XY.py Pt2Pt.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="boot">boot&lt;/h3>
&lt;p>全系统的rcS文件.这些文件在Linux启动后由模拟器加载并由shell执行.大多数用于在全系统模式下运行时控制基准测试 .有些是实用函数，例如 &lt;code>hack_back_ckpt.rcS&lt;/code>&lt;/p>
&lt;h3 id="common">common&lt;/h3>
&lt;p>包含许多用于创建模拟系统的辅助脚本和函数.&lt;/p>
&lt;p>Caches.py和上述caches.py类似&lt;/p>
&lt;p>Options.py包含可能在命令行中设置的选项.例如CPU数量,系统时钟&lt;/p>
&lt;p>CaceConfig.py包含用于设置经典内存系统缓存参数的选项和函数&lt;/p>
&lt;p>MemConfig.py提供用于设置内存系统的辅助函数&lt;/p>
&lt;p>FSConfig.py包含为多种不同类型的系统设置全系统模拟所需的功能&lt;/p>
&lt;p>Simulations.py饱和用于设置和运行gem5的辅助函数.许多代码用于管理saving and restoring checkpoints.&lt;/p>
&lt;h3 id="dram">Dram&lt;/h3>
&lt;p>包含测试DRAM的脚本&lt;/p>
&lt;h3 id="example">example&lt;/h3>
&lt;p>此目录包含一些示例 gem5 配置脚本，可立即用于运行 gem5。具体来说，&lt;code>se.py&lt;/code>和 &lt;code>fs.py&lt;/code>非常有用(这两脚本被移动到/deprecated/example里面了)。&lt;/p>
&lt;h3 id="learning_gem5">learning_gem5&lt;/h3>
&lt;p>包含learning_gem5 book的所有脚本&lt;/p>
&lt;h3 id="network">network&lt;/h3>
&lt;p>包含HeteroGarnet network的配置脚本&lt;/p>
&lt;h3 id="nvm">nvm&lt;/h3>
&lt;p>包含NVM接口的示例脚本&lt;/p>
&lt;h3 id="ruby">ruby&lt;/h3>
&lt;p>包含ruby及其包含的缓存一致性的配置脚本&lt;/p>
&lt;h3 id="splash2">splash2&lt;/h3>
&lt;p>该目录包含运行 splash2 基准测试套件的脚本以及一些用于配置模拟系统的选项。&lt;/p>
&lt;h3 id="topologies">topologies&lt;/h3>
&lt;p>包含创建Ruby缓存层次结构时可以使用的拓扑的实现&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/yihuajack/article/details/125629179" target="_blank" rel="noopener"
>wsl安装gem5&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.gem5.org/getting_started/" target="_blank" rel="noopener"
>gem5入门(官方)&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/qq_34898487/article/details/121896267" target="_blank" rel="noopener"
>gem5安装修复python3-config&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/wokaowokaowokao12345/article/details/126642061" target="_blank" rel="noopener"
>HDF5 install&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://jianyue.tech/posts/gem5/" target="_blank" rel="noopener"
>vscode python环境&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>ParaVerser_Harnessing_Heterogeneous_Parallelism_For_Affordable_Fault_Detection_in_Data_Centers</title><link>https://VastCircle.github.io/2024/paraverser_harnessing_heterogeneous_parallelism_for_affordable_fault_detection_in_data_centers/</link><pubDate>Sat, 07 Dec 2024 20:28:43 +0800</pubDate><guid>https://VastCircle.github.io/2024/paraverser_harnessing_heterogeneous_parallelism_for_affordable_fault_detection_in_data_centers/</guid><description>&lt;h1 id="paraverser利用异构并行性实现数据中心中经济实惠的故障检测">ParaVerser：利用异构并行性实现数据中心中经济实惠的故障检测&lt;/h1>
&lt;h2 id="abstract">abstract&lt;/h2>
&lt;p>数据中心运营商已经意识到，由于有缺陷的硅计算单元导致的无声数据损坏是大规模流行的。已经部署了软件扫描仪来缓解该问题，但要么覆盖率低，要么需要数月时间，从而导致长时间不正确行为。相比之下，汽车中使用的冗余机制使所需的功率和面积增加了一倍，因此无法实际部署在服务器空间中。我们推出了 ParaVerser，这是一种高覆盖率、低开销的服务器硬件级错误检测解决方案。通过较小的架构修改，我们使异构服务器级处理器中的传统核心能够充当检查器核心，从而利用异构性、扩展频率和重复运行中固有的并行性来提供节能的错误检查。通过将 big.LITTLE 型无序超标量核心与有序超标量核心动态耦合，在相同保证的情况下，我们相对于典型锁步系统将能源开销降低了 70%，而性能仅下降 4.3%，每核心面积开销为 1064B 。&lt;/p>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>随着数据中心规模的扩大，静默数据损坏的威胁已日益频繁，无法再被忽视。Meta [41] 和 Google [52] 警告称，随着晶体管的尺寸缩小和分布式计算规模扩大，尽管已有可靠性、可用性和可维护性（RAS）机制 [13], [30], [67]，但CPU仍然持续无提示地产生错误结果，既无崩溃也无外部错误迹象。为应对这一问题，解决方案已经分化为两极：一端是软件诊断技术 [40]，另一端是全硬件锁步机制 [17]。&lt;/p>
&lt;p>在数据中心，软件扫描器 [16], [40], [82] 已广泛用于测试生产系统中的永久性故障。尽管这些工具部署简单，但需要长时间暂停对资源的访问，或只能检测少量故障。因此，清除生产中的故障硬件可能需要长达六个月 [40]。相比之下，汽车系统长期采用双核和三核锁步机制 [17], [57]，通过核心完全同步来比较输出，以实现全面的硬件错误检测。然而，这种方法会导致在相同面积和功耗预算下计算性能减半，对于数据中心而言并不现实。&lt;/p>
&lt;p>尽管如此，仍然存在可行的替代方案。例如，为容错目的重复运行计算，其并行度通常高于原始运行 [2]–[4]。可以根据初始运行中的数据依赖性，将程序划分为多个段，然后通过归纳法重建完整的容错计算轨迹。这些段可以在缓慢、高效的并行硬件上运行 [2]。&lt;/p>
&lt;p>此外，服务器环境中的核心大小异构性已经开始出现 [72], [81]。然而，现有的错误检测系统通常采用最慢的核心 [4]，这意味着每个运行计算的主核心需要多达16个检查核心。虽然这在效率上可行，但如果服务器运行对容错需求较低的工作负载，微型检查核心将无法运行实际应用。而实际的异构系统中的“较小”核心通常是更大的超标量核心 [81]。&lt;/p>
&lt;p>我们证明，通&lt;strong>过调整可靠性和性能功能，可以在微架构级别实现服务器级SoC中的错误检测&lt;/strong>，在必要时几乎不影响性能，并通过异构并行性将开销降至最低。我们提出 &lt;strong>ParaVerser&lt;/strong>，一种硬件机制，用于机会性并行错误检测，利用备用CPU资源（异构或同构）高效地重复计算，所需的核心修改最小化。&lt;/p>
&lt;p>&lt;strong>我们的贡献如下：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>新型微架构设计&lt;/strong>：用于检测硬件中的永久性和瞬时性故障，复用常规服务器级芯片中的核心。我们的设计引入了归纳并行性机制 [2]，将运行分段，并在多个较慢的并行核心上重放和检查执行的代码。异构SoC中的每个核心均可用于运行工作负载或冗余验证。&lt;/li>
&lt;li>两种运行模式
&lt;ul>
&lt;li>&lt;strong>全覆盖模式&lt;/strong>：能够捕获所有永久性和瞬时性错误；&lt;/li>
&lt;li>&lt;strong>机会性模式&lt;/strong>：只在资源空闲时检查尽可能多的计算，提供部分覆盖。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>设计优化
&lt;ul>
&lt;li>设计混合的加载-存储日志和数据缓存以降低SRAM开销；&lt;/li>
&lt;li>实现加载-存储推送单元，直接将数据推送至检查核心，消除主核心缓冲造成的本地缓存压力和一致性开销；&lt;/li>
&lt;li>启用推测性的乱序检查；&lt;/li>
&lt;li>通过新的哈希机制最小化跨芯片网络流量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>性能评估&lt;/strong>：ParaVerser在全覆盖模式下的性能开销根据检查核心的类型、数量和频率不同，几何均值范围为1%至4%。在这些极端之间，能耗开销从95%减少到仅29%。机会性模式仅引入1%的开销，资源分配不同可覆盖94%至99%的执行指令。&lt;/li>
&lt;li>&lt;strong>比较分析&lt;/strong>：与现有研究 [2], [4] 相比，ParaVerser提供更合理和详细的核心模型。我们证明12个专用检查核心 [2] 无法满足需求（9%开销），而16个专用检查核心 [4] 在低延迟下达成35%的面积开销。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>ParaVerser&lt;/strong> 能以最小的性能和面积影响，在微架构级别实现对硬件中永久性和瞬时性故障的全面检测，其能耗仅为同构锁步方案的三分之一。该设计还支持硬件预测性维护 [88]，通过识别可能因老化 [62] 而变得易出错的CPU，提前预防故障。其灵活性还允许在系统负载较高时自动停用错误检测机制。ParaVerser 是数据中心在追求高质量服务的同时，实现可靠故障检测能力的理想解决方案。&lt;/p>
&lt;h3 id="ii-动机">&lt;strong>II. 动机&lt;/strong>&lt;/h3>
&lt;h4 id="a-数据中心规模的错误">&lt;strong>A. 数据中心规模的错误&lt;/strong>&lt;/h4>
&lt;p>在大规模数据中心中，&lt;strong>硅级故障&lt;/strong>日益普遍，通常表现为&lt;strong>静默数据损坏（SDC）&lt;/strong>，且不会触发系统崩溃或警告。Meta [41] 和 Google [52] 的报告表明，这些错误经常绕过内置的**可靠性、可用性和可维护性（RAS）**功能。&lt;/p>
&lt;h5 id="现有解决方案及其局限性">&lt;strong>现有解决方案及其局限性&lt;/strong>&lt;/h5>
&lt;ol>
&lt;li>软件扫描工具
&lt;ul>
&lt;li>&lt;strong>FleetScanner&lt;/strong>：执行离线测试，将服务器置于维护模式。尽管它在六个月内实现了 93% 的故障覆盖率，但这导致了长时间的漏洞窗口，在此期间错误可能影响实际运行的工作负载。&lt;/li>
&lt;li>&lt;strong>Ripple&lt;/strong>：在生产环境中进行测试，可以在实际工作负载同时运行，但覆盖率显著较低，仅能捕捉一小部分错误。&lt;/li>
&lt;li>&lt;strong>不足&lt;/strong>：这些工具通常运行模拟代码以代替实际工作负载，但错误往往依赖于具体数据输入 [41]，且受温度/电压变化的影响 [27]，因此覆盖率不可避免地不完整。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="b-异构并行错误检测">&lt;strong>B. 异构并行错误检测&lt;/strong>&lt;/h4>
&lt;p>为了实现可接受的功耗开销，可以使用类似 &lt;strong>ParaMedic&lt;/strong> 的方法 [2], [3]，通过&lt;strong>异构并行错误检测&lt;/strong>来提高效率。&lt;/p>
&lt;h5 id="关键思想">&lt;strong>关键思想&lt;/strong>&lt;/h5>
&lt;p>如果记录 CPU 的所有存储操作及其观察到的所有加载值，则可以将工作负载分解为多个独立的“检查点”，并通过重叠运行这些片段来验证错误（详见图 1）。每个检查点的执行依赖于前一个检查点的寄存器文件及加载/存储日志。通过归纳式方法，可以验证以下条件：&lt;/p>
&lt;ol>
&lt;li>所有加载/存储操作正确；&lt;/li>
&lt;li>存储值与原始运行一致；&lt;/li>
&lt;li>每个片段的终态寄存器文件与下一片段的初态寄存器文件一致。&lt;/li>
&lt;/ol>
&lt;h5 id="限制与改进">&lt;strong>限制与改进&lt;/strong>&lt;/h5>
&lt;p>以往研究 [2]-[4] 提出的方案围绕主核部署了大量微控制器级小核进行检测，这些小核虽高效，但不适合系统在非容错需求场景下的使用。解决方法是复用系统中的现有核，通过&lt;strong>异构并行&lt;/strong>处理实现能效优化。例如，利用 &lt;strong>Arm big.LITTLE&lt;/strong> [28], [81]、AMD Zen4/Zen4c [55], [72] 或 Intel P-/E-核 [56] 的现有架构。&lt;/p>
&lt;h4 id="c-机会性并行错误检测">&lt;strong>C. 机会性并行错误检测&lt;/strong>&lt;/h4>
&lt;p>目标是比软件扫描工具更快速、更高效地检测服务器中的不可靠计算。具体方法：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>动态调整检测覆盖率&lt;/strong>：当闲置资源不足时，通过降低覆盖率以维持性能；在系统负载较轻时，利用多余资源实现全面覆盖。&lt;/li>
&lt;li>&lt;strong>无需完全锁步&lt;/strong>：与基于采样的锁步方法 [69] 类似，但不需要完全相同的硬件或周期同步，降低实现复杂性。&lt;/li>
&lt;li>&lt;strong>硬错误优先检测&lt;/strong>：专注于检测硬错误和半硬错误（服务器系统的主要问题 [41]），而非瞬态错误（如宇宙射线引发的位翻转）。&lt;/li>
&lt;/ul>
&lt;h4 id="d-检测核的设计考量">&lt;strong>D. 检测核的设计考量&lt;/strong>&lt;/h4>
&lt;h2 id="paraverser">PARAVERSER&lt;/h2>
&lt;p>如果我们正在重复利用备用的服务器核心，而这些核心有时更适合用于调度用户代码，而非用于小型、低性能的专用容错引擎[4]，则校验核心不可避免地不会像先前关于高效错误检测的研究[2]中那样小或高度并行化——在这些研究中，1216个微型校验核心被部署在每个主核心旁边。在我们的研究中，我们主要关注异构的big.LITTLE风格[28]微架构，因为（i）这使得在小核心上实现能量高效的错误检测成为可能，并且（ii）未来的数据中心SoC预计将包含异构核心[72]、[81]、[87]，尽管我们在第VI节中展示了ParaVerser也可以高效地在同构核心上实现。如果每个校验核心具有更高的吞吐量，我们需要的核心数量将会减少，即使每个核心在功耗和面积上更大。由于我们扩展的硬件功能并非始终被使用，因此其面积影响必须最小化，并尽可能重复利用现有硬件：例如，重新利用现有的SRAM缓存存储器而非专用存储器[2]来进行容错日志记录，重新利用现有的片上网络（NoC）布局而非专用布线[2]来转发中间结果。&lt;/p>
&lt;p>如果我们在为转发中间结果使用现有的NoC（片上网络）布局[2]，则第三部分介绍了ParaVerser的设计。图2展示了ParaVerser对次级核心的轻微修改。这些修改允许任意核心作为主核心1或校验核心运行，目的是使校验核心更加数量庞大、并行且能效更高。对于缓存和主存储器的错误，我们假设使用了ECC（纠错码）[13]或奇偶校验。&lt;/p>
&lt;ul>
&lt;li>我们描述了在全覆盖模式和机会模式之间如何不同地管理和分配校验资源（详见第III-A节）。前者在校验核心集体较慢时暂停主计算，让其赶上进度，而后者则跳过多余指令的校验。&lt;/li>
&lt;li>我们增强了每个L1数据缓存，以允许校验核心存储记录的内存访问和寄存器检查点，从而能够并行重放计算片段（详见第III-B节）。&lt;/li>
&lt;li>我们新增了一个单元，可以通过现有的NoC将记录的加载、存储以及其他不可重复事件直接推送到任意校验核心的日志中，从而避免共享存储和一致性开销（详见第III-C节）。&lt;/li>
&lt;li>我们新增了一个寄存器检查点单元（详见第III-D节），用于在主核心生成起始和结束寄存器检查点，并在校验核心上存储并比较结束寄存器检查点。同时还新增了一个加载-存储比较器（详见第III-E节），比较内存地址和存储数据与加载-存储日志缓存中的记录版本。&lt;/li>
&lt;li>最后，我们新增了一个计数器单元（详见第III-F节），用于在相同的指令计数下中断主核心和校验核心，以支持重放操作。片段通过寄存器检查点单元生成的检查点进行分割。我们还设计了新的机制，以处理可能为乱序和/或超标量的校验核心，这些核心的微架构可能与主核心完全不同（详见第III-G节）。这需要在支持主核心执行的推测和重新排序的同时，仍然观察到原始运行的正确且等效的加载和存储行为日志。&lt;/li>
&lt;/ul>
&lt;p>我们通过允许校验核心在主核心完成相关检查点之前启动执行（详见第III-H节）来提高设计效率，同时提出了对加载和存储行为的约束，以避免两者之间可能产生的不一致。此外，我们提出了一种减少跨核心数据传输的方法，以避免在资源不足的NoC上导致减速（详见第III-I节）。最后，我们解释了如何处理多进程和多核工作负载行为（详见第III-J节）。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 221;
flex-basis: 532px"
>
&lt;a href="https://VastCircle.github.io/2024/paraverser_harnessing_heterogeneous_parallelism_for_affordable_fault_detection_in_data_centers/image-20241208104051744.png" data-size="1538x693">
&lt;img src="https://VastCircle.github.io/2024/paraverser_harnessing_heterogeneous_parallelism_for_affordable_fault_detection_in_data_centers/image-20241208104051744.png"
width="1538"
height="693"
srcset="https://VastCircle.github.io/2024/paraverser_harnessing_heterogeneous_parallelism_for_affordable_fault_detection_in_data_centers/image-20241208104051744_hu1962981438195543932.png 480w, https://VastCircle.github.io/2024/paraverser_harnessing_heterogeneous_parallelism_for_affordable_fault_detection_in_data_centers/image-20241208104051744_hu15157017937507976736.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="a-basic-operation">A. Basic Operation&lt;/h3>
&lt;p>对于给定的主核心，将选择一个空闲的校验核心。寄存器文件的副本会被获取（详见第III-D节）并推送到校验核心，后者从同一点开始执行。加载和存储由主核心记录并发送到校验核心以重放内存访问。当加载-存储日志缓存（详见第III-B节）已满、超时或接收到中断时，会获取一个结束检查点并发送到校验核心以供后续验证。由于主核心故意具有比校验核心更高的单线程吞吐量，因此前一个检查点的完整验证会在主核心创建后的一段时间才完成。为了避免阻塞，它通过为下一个时间间隔选择新的校验核心来并行化错误检测过程，而之前的检查点仍在被验证中。&lt;/p>
&lt;p>在全覆盖模式中，如果所有可能的目标都忙于错误检测（例如，由于可用的校验核心无法集体跟上主核心）或被调度运行其他程序，主核心将暂停执行。一旦有可用资源，一个新的起始检查点会被发送到新的校验核心，计算继续进行。在机会模式中，如果没有剩余的校验资源，寄存器检查点和日志记录会被短暂关闭。之前的片段会继续被检查，但当前检查点不会被转发，主核心继续执行以避免性能下降。一旦之前的检查点被检查并释放了校验核心，主核心会立即获取一个新的检查点，从该点重新开始检查。&lt;/p>
&lt;p>我们让操作系统根据当前负载决定分配哪些CPU作为校验核心，哪些作为主核心2。优先分配空闲核心以及较低性能的核心作为校验核心，因为校验不需要高单线程性能。如果操作系统决定当前校验核心数量超过所需或需要更多主核心计算，核心可以在每个检查点结束时从校验核心切换回主核心3。&lt;/p>
&lt;h3 id="b-load-store-log-cache">B. Load-Store Log Cache&lt;/h3>
&lt;p>先前的技术（例如，Ainsworth和Jones[2]）使用了专用的SRAM加载-存储日志，但引入了内存存储开销。相比之下，我们轻微修改并重新利用通用核心上已经可用的数据缓存，用于存储数据以重新生成计算并验证正确性（除了在第III-I节的Hash模式下，当验证元数据未存储在缓存中时）。我们称这种新结构为加载-存储日志缓存（LSL$）。&lt;/p>
&lt;p>LSL$中存储的用于计算重放的数据包括加载的数据和其他不可重复指令的值，例如条件存储、计时器、系统寄存器的读写以及随机数生成器。这使得无论中间存在任何多核通信，都可以精确重放。用于验证正确性的存储数据包括加载/存储地址、大小和存储数据。&lt;/p>
&lt;p>一个典型的LSL$条目由一个7字节的地址、一个1字节的大小以及一个为数据对齐到最近的8字节的可变长度负载组成（例如在Arm架构中，如果加载和存储同时需要，则数据先加载后存储）。这些条目首先在提交时按顺序由主核心的LSPU（详见第III-C节）填充，并在校验核心上被解释为相同的序列。然后，条目的缓存行（每行512位缓存存储4个条目，每个条目通常为64位结果）通过NoC推送到LSL$。&lt;/p>
&lt;p>如图3所示，LSL$的结构中每个缓存行的标签增加了一个额外的位，用于指示存储的数据是日志（L）还是主存数据的缓存副本（C）。当核心开始被用作校验时，其缓存被重新用作线性日志，而不是地址的内容可寻址存储器。我们从校验核心缓存的第一个索引和集合开始填充，并逐出当前位置的缓存行（如果有效且尚未是日志条目）。存储在新加载-存储日志结束寄存器中的一个字指示当前结束元素所在的行。&lt;/p>
&lt;h3 id="c-加载-存储推送单元">C. 加载-存储推送单元&lt;/h3>
&lt;p>我们为核心新增了一个加载-存储推送单元（LSPU），以便通过通用NoC在主核心和校验核心之间传送加载-存储日志（LSL）条目。与之前的异构错误检测技术[2]–[4]不同，ParaVerser需要核心之间的全互联通信（任何核心可以检查其他核心）。这种跨核心通信的开销通过在每个主核心的LSPU中本地缓冲一个缓存行的LSL条目得以缓解。此外，由于LSL$条目被视为临时存储，而不是一致性流量，它们可以直接发送，而无需经过目录或最后一级缓存（LLC）。除非条目本身大于一个缓存行，否则无法容纳在当前缓存行剩余空间的条目会被放入下一个缓存行。&lt;/p>
&lt;p>为了允许大核心和小核心的微架构有所不同，LSL$以ISA格式存储数据。这需要在流水线提交时将多个微操作的数据融合在一起。对于提交时的每个加载/存储微操作，当访问来自相同指令时，主核心继续在LSPU中更新相同的LSL条目。合并的条目涵盖了从单一基址开始的所有加载数据，随后是基址的任何存储数据。在访问LSL$时，访问地址和大小会与LSL$条目中的地址和大小范围进行比较，并使用地址作为偏移量进入LSL$条目的数据段以检索或检查相应数据。要推送到日志的数据（详见第III-B节）在提交时从核心的加载-存储队列（LSQ）访问。&lt;/p>
&lt;p>为了避免限制覆盖范围，我们对LSQ进行了轻微修改：任何到达内存的存储中的错误也必须到达校验核心。相反，任何加载值中的错误不得到达校验核心，从而确保至少有一个核心接收到正确的值。对于加载操作，来自缓存的ECC或奇偶校验位（无论系统中使用哪种方式）会被转发到加载队列，并在转发到LSPU之前进行检查。对于存储操作，在存储传播到本地缓存和LSL$之前，会生成ECC或奇偶校验位。主核心和校验核心之间以及寄存器文件中的错误不会传播，因为这些组件中的错误仅限于主核心或校验核心。&lt;/p>
&lt;p>LSPU的大小与缓存行、NoC宽度或目标ISA单条指令可能生成的最大LSL$条目相同（以较大者为准），并在其满时或获取结束检查点时推送到NoC（从而切换校验核心）。虽然在LSPU中的中间状态可能违反ISA兼容性，但推送到NoC的所有数据均遵守ISA兼容性。&lt;/p>
&lt;h3 id="d-register-checkpointing-unit">D. Register Checkpointing Unit&lt;/h3>
&lt;p>寄存器检查点单元（RCU）用于在主核心上获取起始和结束寄存器检查点，并在校验核心上存储结束寄存器检查点。在检查点的开始，RCU会复制架构寄存器文件，通过NoC转发到选定的校验核心，该核心更新其寄存器文件并开始校验。在检查点结束时，主核心的RCU将新的架构寄存器文件副本转发到选定的校验核心的RCU，并更新新分配的校验核心（如果有）。最后，一旦校验核心被指令计数器中断，架构寄存器文件将与RCU副本进行比较。&lt;/p>
&lt;p>虽然系统可见状态通过LSL中的加载和存储或Hash模式中的哈希值（详见第III-I节）进行检查，但还需要在每个检查点的开始和结束进行寄存器文件检查，以通过归纳法[2]验证完整的程序序列的正确性。&lt;/p>
&lt;h3 id="e-load-store-comparator">E. Load-Store Comparator&lt;/h3>
&lt;p>负载存储比较器（LSC）将检查器核心生成的地址和大小与记录中存储的每个负载和存储的地址和大小进行比较。对于存储，它还将记录的值与检查器核心的结果进行比较。对于负载，这个过程是无序进行的（第III-G节）：当访问LSL条目时，数据负载被复制到负载队列中，并且负载队列中存储的地址与来自LSL$的值进行比较。对于存储，这在提交时发生：当存储被提交时，LSL$条目与存储队列中的地址和数据进行比较。为了避免减慢速度，每个负载或存储单元都有一个比较器。&lt;/p>
&lt;h3 id="f-instruction-counter">F. Instruction Counter&lt;/h3>
&lt;p>该计数器用于精确匹配主核心和检查器核心之间的检查点结束时间。在主核心一侧，当发生以下情况时，会生成检查点：(i) LSL$满了，(ii) 有中断或上下文切换，或(iii) 达到超时。此时，RCU会拍摄一份架构寄存器文件，并将其转发到检查器核心。在检查器核心一侧，我们在主核心提交的指令数与主核心检查点的时间点匹配时完成检查，并比较寄存器文件。&lt;/p>
&lt;h3 id="g-speculative-out-of-order-checker-cores">G. Speculative Out-Of-Order Checker Cores&lt;/h3>
&lt;p>LSL按程序顺序填充，在主核心提交时，如之前的工作[2]–[4]所示。然而，之前的工作依赖于按顺序访问LSL进行检查，限制了检查器仅能用于最简单的按顺序核心，在这些核心中，错误的预测永远不会到达数据路径，并且内存访问无法重新排序。这对于典型的可编程服务器核心来说是一个错误假设，即使是我们评估中最小的核心。为了解决这个问题，我们为LSL$使用了索引访问方案。无序检查器核心不再按顺序访问日志。当检查器核心解码负载/存储时，我们根据预期的LSL$负载的大小在按顺序前端增加一个猜测计数器（第III-B节），以便索引将指向程序顺序中的适当条目（见图4）。对于负载，这个猜测索引跟随指令进入负载队列，并在数据负载字段中，直到被返回的数据覆盖。对于存储，它没有显式存储，而是在提交时重新生成，当访问日志时进行处理。当负载/存储指令被分解为微操作时，这些微操作共享相同的索引。由于索引是猜测性质的，即使没有发生错误，访问LSL$时，访问的条目也可能与索引条目不匹配：猜测错误的指令将被压扁，并且访问的条目是预定用于返回到正确执行的指令。因此，怀疑的故障必须作为精确异常来处理：我们记录LSL$访问时的错误，但直到提交时才引发它们。当指令被压扁时，猜测的索引必须进行调整，以匹配提交顺序。我们通过在每个被压扁的指令上从前端的猜测索引中扣除来处理这一点。此外，当检查器开始检查新的LSL$段/检查点时，这个索引会被重置为0。&lt;/p>
&lt;h3 id="h-eager-checker-core-waking">H. Eager Checker-Core Waking&lt;/h3>
&lt;p>在之前的工作[2]–[4]中，检查器核心仅在检查点完成后被唤醒，以确保执行的一致性。如果检查器核心足够简单，几乎不占用资源，这是合理的，但如果检查器核心的大小与常规核心相当，这样会浪费资源，因为至少有一个核心总是等待检查点完成而停滞。检查器核心可以提前启动，只要它从不执行超出主核心的指令，且因此不会读取无效的LSL$条目，也不能执行主核心从未执行的指令（由于达到超时或发生中断，第III-J节）。为了实现这一点，同时确保匹配行为并防止检查器核心提前执行，我们使用LSL$作为限制器。检查器核心不能执行任何超出当前推送到检查器核心的最后LSL$条目的指令。如果它尝试这样做，并且RCU检查点尚未设置，检查器核心将睡眠，直到向其LSL$推送一个缓存行或设置RCU检查点。试图读取LSL$中最后有效条目的内存访问指令会导致所有后续指令被压扁（除了作为相同宏操作的一部分的微操作）。当新的日志缓存行到达或接收到检查点寄存器文件以指示检查点结束时，取指从第一个被压扁的指令重新开始。如果读取最后有效条目的操作本身被压扁，指令取指也会重新开始，任何随后的尝试读取当前最后LSL$条目的操作都会使核心重新进入睡眠状态。&lt;/p>
&lt;h3 id="i-hash-mode">I. Hash Mode&lt;/h3>
&lt;p>ParaVerser使用大量的NoC流量将LSL$条目从主核心发送到检查器核心。为了限制这一点，我们还提供了哈希模式，其中仅记录执行所需的数据（例如，加载的数据）并将其传输到LSL$条目中，并通过NoC传输（条目仍按顺序连续存储）。仅用于验证正确性的数据（例如，地址和存储数据）会进行校验和处理，只有哈希值被传输到NoC并在检查点结束时进行比较。哈希模式将负载流量减少50%，并完全消除了存储的流量，但可靠性将取决于哈希函数的属性。不能检测相同位上的重复错误或重排序的哈希函数应避免使用——在这里我们使用SHA-256[29]。哈希模式需要对之前提到的机制进行一些修改。在哈希模式下，LSL$条目仅包含按提交顺序重现执行所需的数据，因此无序核心的猜测索引只有在指令具有这些数据时才会增加。对于微操作，偏移量在解码时计算并与索引一起存储，直到访问LSL$。主核心和检查器核心都使用LSPU来缓冲要用于哈希计算的数据，在指令提交时保持访问顺序。检查器核心不再使用LSC来检测LSL$访问错误。相反，哈希值在RCU中计算，并与寄存器检查点一起发送到检查器的RCU进行比较。&lt;/p>
&lt;h3 id="j-multiprocess-and-multicore">J. Multiprocess and Multicore&lt;/h3>
&lt;p>为了避免在主核心和检查器核心之间同时重播中断的需求，每当发生中断时都会进行寄存器检查点。这对于上下文切换也是如此：因此，每个寄存器检查点只与一个进程相关联。多个进程在一个主核心上的检查可以在多个检查器核心上并行进行，就像多个进程在多个主核心上的检查也可以并行进行一样。如果在任何特定进程的检查点中发生错误，则会引发该进程的异常。ParaVerser不是一个错误修正系统，因为它在执行和检查之间会产生延迟，以实现线程级并行性，因此，如果发现错误，软件必须自行清理（第II-C节）。ParaVerser使用的日志系统可以在不做修改的情况下扩展到多核共享内存工作负载[3]。由于主核心看到的确切负载和存储然后传播到检查器核心，任何由此产生的跨线程通信也会被准确地模拟和检查。在检查器核心分配方面，我们将每个主核心视为一个单独的检查任务，并将其分配到多个检查器中。&lt;/p>
&lt;h2 id="sphere-of-replication">SPHERE OF REPLICATION&lt;/h2>
&lt;p>ParaVerser 是一种计算冗余机制，因此复制的范围是处理器核心本身，边界位于负载存储队列（LSQ），其内容被复制并通过负载存储日志（LSL）传输到检查核心。缓存位于复制范围之外，需要使用奇偶校验或错误更正码（ECC）来确保其正确性，以及缓存系统内部任何计算（如一致性）的冗余。&lt;/p>
&lt;p>检查核心上的冗余执行不会重复数据地址转换，并假设记录在 LSL 中的加载数据是正确的；如果希望覆盖核心的每个晶体管，应该在页表遍历器和 LSQ 中增加额外的冗余。在这种情况下，这涉及在数据发送到 LSL 之前传播和检查奇偶校验位，以及冗余机制来捕捉来自 LSQ 逻辑本身的故障错误（例如，由于位翻转而错误地检测到访问顺序违规）。&lt;/p>
&lt;p>在完全覆盖模式下，ParaVerser 可以检测系统中的硬错误和软错误。机会模式仅针对最终可以检测到的硬错误，但也会在检查的片段中检测到软错误。由于我们不区分硬错误和软错误，操作员需要在我们检测到错误后运行自己的测试，以确定核心是否存在硬故障并需要退役。如果需要更精确的故障分析，我们的起始寄存器检查点允许重复回放以识别故障原因，代价是每个核心额外 776B 的开销。不会改变执行的错误仍然可以被检测到，如果 LSL 的内容、哈希模式中的哈希值，或者寄存器检查点开始或结束时的寄存器值发生变化，我们无法直接区分错误来自主核心还是检查核心。这些可以被认为是假阳性，因为检测到的错误并不影响主核心的执行。然而，这些仍然代表系统中某个地方发生的真实错误；因此，它们仍然有助于在发生硬错误时尽早退役故障核心。在哈希模式下，我们使用 SHA-256 哈希，因为具有和不具有错误的值产生的哈希值碰撞的可能性极低，具有 128 位碰撞抗性安全性。&lt;/p>
&lt;h2 id="experimental-setup">EXPERIMENTAL SETUP&lt;/h2>
&lt;p>为了评估ParaVerser，我们将ParaDox模拟器[4]移植到了gem5 v22.0.0.1版本。我们添加了第III节中描述的新机制，并设计了高性能服务器风格的Arm核心CPU模型（见表I），基于公开的Cortex-X2 [6]，[11]，[92]和Cortex-A510 [10]，[91]核心的信息，这些核心分别构成了Arm异构数据中心Neoverse V2和E2的基础[81]。我们的主核心始终为3GHz的乱序核心；我们在不同的时钟频率下运行不同数量和类型（大核心、小核心）的检查核心。先前的工作[2]，[4]在原始评估中使用了gem5的通用MinorCPU模型，该模型例如为所有浮点运算提供了不现实的6周期延迟，而诸如除法等指令的延迟可能长达22周期[10]，[12]。即便是整数运算，该模型也缺乏共享相同功能单元的操作的可变延迟建模，而gem5的HPI核心则为我们的A510模型提供了这方面的改进。这意味着先前工作的核心模型并未提供合理的比较基础，因此我们采用了基于Cortex-A55 [12]的专用检查核心模型，并限制其为标量核心，以模拟Cortex-A34/35 [5]核心的性能（由于文档缺失）。这些是支持AArch64 [14]的最小乱序Cortex-A处理器。&lt;/p>
&lt;p>我们使用SPECspeed 2017基准进行评估，统计数据来自详细仿真，仿真1B指令，除非另有说明，模拟将跳过初始化并运行PARSEC至完成，慢速执行时相对于没有检查的基准来展示。在评估完全覆盖模式时，我们评估性能开销；在评估机会模式时，我们也评估检查覆盖率。&lt;/p>
&lt;p>我们通过将gem5网络参数输入到MM1排队网络模型中，模拟了NoC延迟，该模型采用2D网格布局。图5展示了我们实验中使用的4x4网格布局，核心作为主核心用阿拉伯数字0-3表示，作为相同颜色主核心的检查核心用罗马数字iiv表示。NoC配置为256位宽，时钟频率为2GHz，除非另有说明，类似于ARM Neoverse CMN-700网格网络的能力[7]。网格中间的4个交叉点每个都连接一个LLC切片和一个核心，每个LLC切片假定为每个主核心提供1/4的需求数据。除了角落的4个交叉点，其他交叉点每个连接2个核心。我们选择没有LLC切片的交叉点上的核心作为主核心，因为这种情况在我们的布局中更常见，而与主核心相邻的核心则作为检查核心使用。当使用异构主核心和检查核心时，该布局表示一个带有大核心和小核心分布的平铺系统，而不是同质核心的聚集。仅使用1个主核心时，使用核心0作为主核心；使用2个主核心时，使用核心0和核心1。在选择检查核心时，首先选择检查核心i，因为它会导致需求流量的争用并带来更大的性能开销。如果需要更多检查核心，则使用核心ii–iv。未使用的主核心和检查核心假定为空闲，不产生流量。我们通过回传从额外的LSL$流量中观察到的平均延迟，进入gem5的LLC访问延迟，以估算开销，并在第VI-D节中探讨NoC带宽的影响。&lt;/p>
&lt;h2 id="evaluation评估">EVALUATION(评估)&lt;/h2>
&lt;h3 id="a-完全覆盖模式">&lt;strong>A. 完全覆盖模式&lt;/strong>&lt;/h3>
&lt;p>图6显示了在完全覆盖模式下（所有动态指令都被检查）不同检查核心配置下主核心的性能下降，相比于先前的工作，DSN18 [2]配置了12个检查核心，Paradox [4]配置了16个专用检查核心。通过将检查核心配置为与3GHz主核心相同的异构系统，检查核心能够跟上主核心的执行进度，几何平均性能下降为1.6%。而DSN18的配置显示出9%的几何平均性能下降，无法跟上我们X2主核心的性能。虽然Paradox在16个专用检查核心的配置下显示出仅1.2%的性能下降，但这需要35%的面积开销（第VI-E节），限制了可用于计算的硅区域。ParaVerser提供了利用已有核心的检查功能，当检查功能关闭时，它不影响性能。采用2个运行在半频率（1.5GHz）的X2检查核心时，性能下降几乎与异构系统相同。虽然LSL流量与NoC的需求流量发生争用，但这一优势被由未共享组件（如icache预取和分支预测训练）带来的额外性能开销所抵消，导致略微增加的未命中率和预测错误率。使用4个运行在2GHz的A510核心作为检查核心时，性能下降为3.4%。检查核心的集体性能通常与主核心相匹配，除了bwaves。在bwaves中，大量的浮点除法指令和大核心X2 [11]与小核心A510 [10]之间在浮点除法性能上的巨大差异，导致最差的检查核心无法跟上最好的主核心。通过DVFS，我们还将A510检查核心的频率从2GHz调整至1.4GHz，并相应调整电压，以寻找每个基准的最佳ED2P点，性能下降仍仅为4.3%。&lt;/p>
&lt;p>接下来，我们考虑开销的原因：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>寄存器检查点&lt;/strong>
在之前的工作[2]中，寄存器检查点由于延迟主核心的提交来复制寄存器文件而产生显著开销，而在ParaVerser中，这种开销可以忽略不计。通过重新利用常规核心的缓存，我们拥有更大的LSL（64KiB对比3KiB [2]），因此检查点的频率大大降低。&lt;/li>
&lt;li>&lt;strong>停顿开销&lt;/strong>
在完全覆盖模式下，当检查核心无法跟上主核心时，主核心必须停顿，直到有检查核心可用。这是主核心减少时钟频率、数量和乱序能力时的主要因素。&lt;/li>
&lt;li>&lt;strong>指令获取&lt;/strong>
虽然检查核心永远不会引起对主内存或共享缓存的访问，因为它们的加载和存储通过LSL$提供服务，但它们仍然会通过LSL$访问指令。这在完全覆盖模式和机会模式下会导致轻微的争用效应，特别是在如gcc这样的工作负载中，其中频繁发生L1 icache未命中。&lt;/li>
&lt;li>&lt;strong>NoC开销&lt;/strong>
加载和存储会根据总线宽度（第III-C节）分组，记录并转发到检查核心。虽然这不会对检查核心造成显著延迟（因为它们是推送消息而不是请求消息），但它会对同一网络上其他请求造成次要争用效应，尤其是LLC访问。&lt;/li>
&lt;/ul>
&lt;h3 id="b-机会模式">&lt;strong>B. 机会模式&lt;/strong>&lt;/h3>
&lt;p>图7显示了与第VI-A节相同的检查核心配置，但启用了机会模式，机会模式在资源不足时减少覆盖，而不是停顿。出乎意料的是，开销低于完全覆盖模式，对于异构系统，几何平均性能下降为1.4%，对于2个X2或4个A510，性能下降不到1%。开销主要来自于NoC争用，因此无论核心频率如何，性能下降都保持平稳。为了研究机会模式的硬错误覆盖率，我们根据文献中的标准模型[59]注入了硬错误，图8展示了不同检查核心配置下的结果。由于错误检测是对称的，为避免注入的错误妨碍主核心的执行，错误被注入到检查核心。我们将硬错误建模为单比特卡住错误，并将错误注入到gem5模型中的功能单元输出值。
在完全覆盖模式下，我们注入了10M条指令，发现76%的注入错误在完全覆盖模式下被检测到，其余错误（正确地）被掩盖，因为它们没有改变执行。图8中，几乎所有未被掩盖的注入错误都能在运行100M条指令内被检测到，即使只有一个A510运行在500MHz。对于大多数工作负载，这种配置能检测到所有有效错误；只有bwaves、deepsjeng、imagick和perlbench的检测率较低，为87-99%。除imagick外，其他所有工作负载在1GHz时可以达到100%的检测率，imagick在2个A510运行在2GHz时也能达到100%的检测率。&lt;/p>
&lt;p>我们还发现，在机会模式下，运行时指令覆盖率（即被检查的主核心指令的比例）在有足够的检查核心时较高。使用3GHz的X2检查核心时，几何平均覆盖率高达98%以上，且几乎没有性能开销。当检查核心频率降低至2.7GHz时，覆盖率降至94%。使用4个A510检查核心时，在2GHz、1.8GHz和1.6GHz时，几何平均覆盖率分别为97%、96%和95%。与完全覆盖模式中的性能下降类似，bwaves的运行时指令覆盖率显著低于其他基准，即使使用2GHz的A510，覆盖率也仅为71%，这是由于其大量的浮点指令。&lt;/p>
&lt;h3 id="c-数据导向并行和多进程工作负载">&lt;strong>C. 数据导向、并行和多进程工作负载&lt;/strong>&lt;/h3>
&lt;p>为了展示更广泛的服务器端工作负载，我们还看了图形工作负载的GAP套件[20]。GAP如此依赖内存，以至于即使是少数几个检查核心也能跟上主核心的执行；图9显示，即使在完全覆盖模式下，2个A510也足以应对，除了PageRank之外。ParaVerser还能够处理并行工作负载。图9还显示了在2线程的PARSEC [23]上，ParaVerser在完全覆盖模式下的性能下降。虽然PARSEC不像GAP那样严重依赖内存，但当每个主核心使用3个A510时，性能下降仅为7.6%。&lt;/p>
&lt;p>为了评估ParaVerser对多进程工作负载的影响，我们运行了SPECspeed 2017基准的随机混合测试14，模拟了4个主核心的1亿条总指令（在最快的核心上快速转发10亿条指令后），每个核心至少运行250百万条指令（混合1-4）或至少100百万条指令（混合5），以应对模拟时间限制。图10显示了在不同检查核心配置下的总CPI性能下降。虽然来自一个进程的额外LSL流量与其他进程的需求流量发生争用，但整体性能开销较小，几何平均仅为1%，对于1.5GHz的异构检查核心或2个X2检查核心，性能下降不到0.6%，对于2GHz的4个A510检查核心，性能下降不到0.6%。&lt;/p>
&lt;h3 id="d-noc-灵敏度研究">D. NoC 灵敏度研究&lt;/h3>
&lt;p>为了评估 LSL 流量的影响，我们进行了灵敏度研究，将检查器核心配置为最高频率，并采用128位宽、1.5GHz频率的较慢 NoC 配置。同时，我们还展示了启用哈希模式（参见章节 III-I）对这一较慢 NoC 的影响。图11显示，一些基准测试受到了显著影响，导致几何平均开销超过15%。启用哈希模式后，LSL 流量至少减少一半，NoC 压力大幅缓解，使得几何平均开销降至仅比较快 NoC（256位宽、2GHz 时钟频率）高0.8%。较快 NoC 对同构检查器核心的 NoC 开销为1.5%，而对异构核心的开销低于1%。&lt;/p>
&lt;h3 id="e-功耗与面积开销">E. 功耗与面积开销&lt;/h3>
&lt;p>ParaVerser 修改仅增加了每个核心1064B的存储开销：包括2宽 LSC 的48B，每个加载和存储队列项的2位奇偶校验位（如果尚未存在）、前后端 LSL$ 索引的16位、用于 LSPU 的512位（或一个缓存行）、LSL$ 中每个缓存行的1位、指令计时器的13位以及RCU的776B。
此前研究【4】估算专用检查器核心的面积开销低于2014年 Cortex A57 的三分之一，但其基于 RISCV 核心，并与 ARM 主核心对比，尽管该技术需要相同的 ISA。我们基于 X2 和 A510 核心的晶圆照片像素计算【8】，使用三星 4LPE 工艺得出其面积分别约为 2.43mm² 和 0.44mm²。通过推算【32】【33】基于 28nm TSMC 的 A35 核心【5】，我们估算16个 A35 核心的面积约为 0.84mm²，导致35%的面积开销。
尽管检查器核心是从现有计算单元中复用而非新增，但每个检查器核心的开启势必比闲置状态消耗更多功率。我们通过 McPAT【60】在22nm下评估其开销。对于4个2GHz运行的 A510 检查器，静态和动态功耗加时间的能量开销几何平均值比全部检查器核心电源关闭的基线高49%。对于2个1.5GHz运行的 X2 检查器，能量开销为45%；而1个3GHz运行的 X2 检查器（同构，可比双核锁步【57】【58】【90】），能量开销为95%。
通过降低4个 A510 核心的频率和电压以减少运行至2GHz以下，我们实现了 ED2P 最小配置，其能量开销为29%，性能减速为4.3%（相比于全速下的49%能量开销和3.4%减速）。相比之下，针对先前研究中的专用检查器核心【2】【4】，我们观察到其能量开销为25%。考虑到额外的35%面积开销，与系统中现有的4个 A510 核心实现 ED2P 最小配置相比，这并未提供显著的能量节省。&lt;/p>
&lt;h3 id="f-计算机会成本">F. 计算机会成本&lt;/h3>
&lt;p>从另一种角度来看，用于检查的核心可以执行额外的计算。对于包括大多数 SPEC 应用程序在内的单线程工作负载，这无关紧要：程序在多核上并不更快。对于并行工作负载，直观上重复所有计算会导致2倍的减速。然而，并行应用程序的扩展性通常不如检查，且更依赖内存，导致竞争进而减慢所有核心的运行速度。例如，在1个大核心和2个小核心上运行 GAP，仅比单独运行1个大核心快1.52倍：相同数量的小核心可以在10%性能开销下实现全面检查。同样，对于在1个大核心和3个小核心上运行的 PARSEC，仅观察到1.44倍的加速，而将小核心用于检查的同一设置下的开销仅为7.6%。相比之下，同构设置下使用两个大核心时，GAP 和 PARSEC 的加速分别为1.9倍和1.8倍。&lt;/p>
&lt;h2 id="conclusion">CONCLUSION&lt;/h2>
&lt;p>ParaVerser 是第一个能够在满足 HPC 和数据中心严格的功耗/性能/面积（PPA）限制的条件下，实现高覆盖率、低成本错误检测能力的系统。通过微小的改动，下一代服务器能够在性能不受损的情况下，同时实现强大的全面保障和高覆盖率采样。相较于仅依赖软件扫描器，硬件级的静默错误检测更能有效缓解日益严重的问题；通过归纳并行实现的异构性，则提供了此前仅能通过高成本锁步机制实现的高效保障。由于 ParaVerser 是通过重新利用计算单元，而非增加专用的高开销组件来实现检测功能，既需要保障的系统与无需保障的系统均可使用同一设备。ParaVerser 首次为大规模静默数据损坏问题提供了实用的解决方案。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Filemonitor</title><link>https://VastCircle.github.io/2024/filemonitor/</link><pubDate>Fri, 06 Dec 2024 13:29:58 +0800</pubDate><guid>https://VastCircle.github.io/2024/filemonitor/</guid><description>&lt;p>&lt;a class="link" href="https://github.com/TheKingOfDuck/FileMonitor?tab=readme-ov-file" target="_blank" rel="noopener"
>https://github.com/TheKingOfDuck/FileMonitor?tab=readme-ov-file&lt;/a>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Chipyard_boot_linux</title><link>https://VastCircle.github.io/2024/chipyard_boot_linux/</link><pubDate>Wed, 04 Dec 2024 21:26:52 +0800</pubDate><guid>https://VastCircle.github.io/2024/chipyard_boot_linux/</guid><description>&lt;h2 id="firemershal-生成linux-执行文件">firemershal 生成linux 执行文件&lt;/h2>
&lt;p>以下的命令可以构建工作负载 , 在构建完成之后可以在images 可以看到 br-base-bin 和 br-base.img 分别是 boot-binary (linux + boot loader) and root filesystem&lt;/p>
&lt;pre tabindex="0">&lt;code> ./marshal build br-base.json
&lt;/code>&lt;/pre>&lt;p>通过 ./marshal launch br-base.json可以通过qemu启动linux&lt;/p>
&lt;h2 id="firemarshal的实现细节">firemarshal的实现细节&lt;/h2>
&lt;p>wlutil/build.py&lt;/p>
&lt;p>构建工作负载的目标是生成一个可用的启动二进制文件，以及（可选的）一个用于启动的根文件系统。生成的输出可同时用于 &lt;strong>Spike&lt;/strong>、&lt;strong>Qemu&lt;/strong> 和 &lt;strong>FireSim&lt;/strong>。唯一的例外是 &lt;strong>Spike&lt;/strong> 不支持磁盘，因此用户可以选择为 &lt;strong>Spike&lt;/strong> 创建仅包含 &lt;strong>initramfs&lt;/strong> 的工作负载版本（该二进制文件同样可以在 &lt;strong>Qemu&lt;/strong> 和 &lt;strong>FireSim&lt;/strong> 上启动）。&lt;/p>
&lt;h3 id="build-parents">Build Parents&lt;/h3>
&lt;p>第一步是确保工作负载的&lt;strong>基础工作负载&lt;/strong>已准备就绪。Marshal 将首先遵循基础的依赖关系链，并确保在开始请求的工作负载之前构建所有依赖关系。一旦直接父级完成，Marshal 就会开始构建过程，创建父级根文件系统的副本，以用作请求的工作负载的基础（发行版对其 rootfs 进行硬编码以结束递归）。&lt;/p>
&lt;h3 id="host-init">host init&lt;/h3>
&lt;p>在执行任何其他操作之前，Marshal 会运行工作负载的&lt;code>host-init&lt;/code>脚本（如果有）来准备工作负载。此脚本可以执行任何操作，因此我们必须在流程早期运行它，以防它更改从 Linux 内核源代码到根文件系统覆盖的任何内容。&lt;/p>
&lt;h3 id="build-binary">build binary&lt;/h3>
&lt;pre tabindex="0">&lt;code>wlutil/build.py:makeBin()
&lt;/code>&lt;/pre>&lt;p>我们在完成 rootfs 之前构建了启动二进制文件(br-base-bin)，因为我们可能需要在 Qemu 中启动工作负载才能构建它。如果用户提供了硬编码的启动二进制文件，则跳过此步骤。&lt;/p>
&lt;h4 id="create-final-linux-configuration">Create Final Linux Configuration&lt;/h4>
&lt;p>用户仅提供内核配置片段，必须处理这些片段才能创建真正的 Linux 配置。我们首先在 Linux 源目录（默认或用户提供）中运行“make ARCH=riscv defconfig”。然后我们附加配置选项以包含 initramfs（CONFIG_BLK_DEV_INITRD 和 CONFIG_INITRAMFS_SOURCE），更多信息见下文。然后我们调用 Linux 提供的脚本来组合内核片段（&lt;code>riscv-linux/scripts/kconfig/merge_config.sh&lt;/code>）。&lt;/p>
&lt;h4 id="build-platform-drivers">Build Platform Drivers&lt;/h4>
&lt;p>FireSim 提供了一些非标准设备，这些设备需要定制的 Linux 驱动程序。特别是块设备驱动程序是启动可用系统所必需的。为了避免维护一个定制的 Linux 内核分支（以及要求用户与其保持同步），我们提供了一个定制的 &lt;strong>initramfs&lt;/strong>，它在主系统启动之前加载这些驱动程序。&lt;/p>
&lt;p>FireSim 的驱动程序位于 &lt;strong>boards/firechip/drivers&lt;/strong> 目录下。&lt;strong>Marshal&lt;/strong> 首先在 Linux 源代码树中运行 &lt;code>make modules_prepare&lt;/code>，然后基于提供的源代码编译每个驱动程序。这一过程在每次新构建时执行，以确保驱动程序与最新的内核源代码和配置保持一致（尤其是在工作负载使用定制内核时，这一点尤为重要）。&lt;/p>
&lt;p>目前，我们不支持替代驱动程序，因此任何定制的 Linux 内核必须在这些驱动程序方面与默认内核兼容。&lt;/p>
&lt;h4 id="generate-initramfs">Generate Initramfs&lt;/h4>
&lt;p>由于某些驱动程序必须在系统启动时加载，因此我们将这些驱动程序打包到一个定制的 &lt;strong>initramfs&lt;/strong> 中，并将其编译到内核中。&lt;strong>Marshal&lt;/strong> 通过在 &lt;strong>wlutil/initramfs&lt;/strong> 的以下目录中组织多个文件系统来生成此归档文件：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>disk/&lt;/code>&lt;/strong>：
包含一个功能齐全的根文件系统，包括基于 &lt;strong>busybox&lt;/strong> 的环境和一个 &lt;strong>init&lt;/strong> 脚本。该脚本负责加载驱动程序，并查找启动磁盘（对于 QEMU 是 &lt;code>/dev/vda&lt;/code>，对于 FireSim 是 &lt;code>/dev/iceblk&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>&lt;code>nodisk/&lt;/code>&lt;/strong>：
仅包含用于加载驱动程序的 &lt;strong>init&lt;/strong> 脚本（需要与一个可用的根文件系统配合使用）。&lt;/li>
&lt;li>&lt;strong>&lt;code>drivers/&lt;/code>&lt;/strong>：
包含之前构建的硬件平台驱动程序。&lt;/li>
&lt;li>&lt;strong>&lt;code>devNodes.cpio&lt;/code>&lt;/strong>：
一个预构建的归档文件，包含特殊设备文件 &lt;code>/dev/console&lt;/code> 和 &lt;code>/dev/tty&lt;/code>。这些文件需要特殊的创建步骤，因此我们仅创建一次并将结果提交保存。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Marshal&lt;/strong> 将所需的 &lt;strong>initramfs&lt;/strong> 源文件在一个临时目录中合并为单个 &lt;strong>cpio&lt;/strong> 归档文件，并配置内核在启动时包含此归档文件。&lt;/p>
&lt;h4 id="linux-kernel-generation-and-linking">Linux Kernel Generation and Linking&lt;/h4>
&lt;p>在所有依赖项完成后，我们终于可以编译 Linux 内核并将其与引导加载程序（bootloader）链接起来。尽管每个工作负载可以使用自定义的内核源代码，但所有工作负载都会使用相同的引导加载程序。最终链接生成的 &lt;strong>sbi+linux+initramfs&lt;/strong> 文件会被复制到 &lt;strong>&lt;code>images/workloadName-bin&lt;/code>&lt;/strong> 路径下。&lt;/p>
&lt;h3 id="build-rootfs">Build Rootfs&lt;/h3>
&lt;h4 id="add-files">Add Files&lt;/h4>
&lt;p>Marshal 会将文件和叠加选项（overlay options）都转换为 &lt;strong>FileSpec&lt;/strong> 对象列表，这些对象描述了源路径和目标路径。随后，使用 &lt;strong>guestmount&lt;/strong> 工具将访客（guest）的根文件系统挂载到 &lt;code>disk-mount/&lt;/code> 目录下（具体逻辑见 &lt;code>wlutil/wlutil.py&lt;/code> 中的 &lt;strong>&lt;code>applyOverlay()&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>copyImageFiles()&lt;/code>&lt;/strong> 函数）。&lt;/p>
&lt;h4 id="guest-init">Guest Init&lt;/h4>
&lt;p>现在我们有了可运行的二进制文件和根文件系统，我们可以运行用户 &lt;code>guest-init&lt;/code>脚本（如果提供）。我们将映像配置为在启动时运行此脚本（请参阅下文了解如何操作），并在 Qemu 中精确启动一次。&lt;/p>
&lt;h4 id="run-script-or-command">Run Script or Command&lt;/h4>
&lt;p>最后一步是应用用户的&lt;code>run&lt;/code>脚本或&lt;code>command&lt;/code>选项（如果有）。为简单起见，命令在继续之前被转换成运行脚本（存储在 中 &lt;code>wlutil/generated/_command.sh&lt;/code>）。&lt;/p>
&lt;p>运行脚本以每个发行版的方式处理（因为发行版以不同的方式实现它）。Marshal 通过请求发行版生成我们应用于映像的“bootScriptOverlay”来抽象这一点。在 Buildroot 中，这会将脚本放置在已知位置并使用运行它的硬编码 init 脚本。Fedora 有一个运行该脚本的 systemd 服务。&lt;/p>
&lt;p>firemershal&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://gitlab.laas.fr/matana/chipyard-linux" target="_blank" rel="noopener"
>一个成功boot的开源程序&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://wiki.gentoo.org/wiki/Initramfs/Guide/zh-cn" target="_blank" rel="noopener"
>什么是initramfs&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://yifengyou.github.io/vita/docs/%E6%9E%84%E5%BB%BAinitramfs/initramfs%E5%8E%9F%E7%90%86%E6%8E%A2%E8%AE%A8.html#initramfs%E5%8E%9F%E7%90%86%E6%8E%A2%E8%AE%A8-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81initramfs" target="_blank" rel="noopener"
>&amp;lt;深度探索Linux操作系统:系统构建和原理解析&amp;gt;&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://yangwang92.github.io/2023/04/03/How-to-Run-FireSim-on-a-Local-FPGA/" target="_blank" rel="noopener"
>在本地FPGA跑firesim&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Chipyard串口疑问</title><link>https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/</link><pubDate>Tue, 03 Dec 2024 19:43:44 +0800</pubDate><guid>https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/</guid><description>&lt;h2 id="问题简述">问题简述&lt;/h2>
&lt;p>对于chipyard的串口,猜测是通过log去打印的,但是即使是通过dpic-log打印,也应该传输到串口的地址,但是从波形图来看是没有的&lt;/p>
&lt;h2 id="测试配置">测试配置&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">MyRocketConfig&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">Config&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">freechips&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rocketchip&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">subsystem&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">WithNBigCores&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#7f848e">// single rocket-core
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">chipyard&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">config&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">WithUART&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">baudrate&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#d19a66">115200&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">chipyard&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">config&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">AbstractConfig&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="串口输出">串口输出&lt;/h2>
&lt;p>通过分析hello.riscv,可以看出发送串口数据的函数是sfputc_r&lt;/p>
&lt;p>具体ftrace是 main -&amp;gt; iprintf -&amp;gt; vfiprintf_r -&amp;gt; sfputs_r-&amp;gt;sfputc_r ,如果字符串是&amp;quot;hello world&amp;quot;,应该会循环11次&lt;/p>
&lt;p>以下代码在遍历字符串&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly"> 80000790: 00044783 lbu a5,0(s0)
80000794: c399 beqz a5,8000079a &amp;lt;_vfiprintf_r+0x7e&amp;gt;
80000796: 0f779263 bne a5,s7,8000087a &amp;lt;_vfiprintf_r+0x15e&amp;gt;
8000087a: 0405 addi s0,s0,1
8000087c: bf11 j 80000790 &amp;lt;_vfiprintf_r+0x74&amp;gt;
&lt;/code>&lt;/pre>&lt;p>以下代码在输出数据,可以看出来0(s0)对应字符串对应的数据,函数输入是a1 ,所以通过观察0x800006d6读取的数据就可以得到相应字符串的值&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly"> 800006ce: 00941463 bne s0,s1,800006d6 &amp;lt;__sfputs_r+0x22&amp;gt;
800006d2: 4501 li a0,0
800006d4: a811 j 800006e8 &amp;lt;__sfputs_r+0x34&amp;gt;
800006d6: 00044583 lbu a1,0(s0)
800006da: 864e mv a2,s3
800006dc: 854a mv a0,s2
800006de: fadff0ef jal ra,8000068a &amp;lt;__sfputc_r&amp;gt;
800006e2: 0405 addi s0,s0,1
800006e4: ff4515e3 bne a0,s4,800006ce &amp;lt;__sfputs_r+0x1a&amp;gt;
&lt;/code>&lt;/pre>&lt;p>从波形看是没什么问题的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 970;
flex-basis: 2330px"
>
&lt;a href="https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241203201004169.png" data-size="1398x144">
&lt;img src="https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241203201004169.png"
width="1398"
height="144"
srcset="https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241203201004169_hu2287500500266782612.png 480w, https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241203201004169_hu612186356014223029.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>这一段代码的作用是把字符写入缓存区 ,a1是具体的字符 ,a4代表缓存区的大小 , 12(a2)的内存区域写入的是缓冲区的大小,倒是可以看出缓存区大小是0-1,即最大值,12(a2)=0x8000021c8+12,代表的可能是调用者传入的目标缓冲区或流指针&lt;/p>
&lt;p>所以串口的数据实际上是写入了一个构建的缓存区&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">000000008000068a &amp;lt;__sfputc_r&amp;gt;:
8000068a: 465c lw a5,12(a2) # 从a2偏移12处加载缓冲区剩余大小到a5
8000068c: fff7871b addiw a4,a5,-1 # 将剩余大小减1，结果存入a4
80000690: c658 sw a4,12(a2) # 将更新后的剩余大小存回a2偏移12处
80000692: 00075963 bgez a4,800006a4 # 如果剩余大小非负，跳转到800006a4
80000696: 561c lw a5,40(a2) # 从a2偏移40处加载缓冲区低水位标记到a5
80000698: 00f74563 blt a4,a5,800006a2 # 如果剩余大小小于低水位标记，跳转到800006a2
8000069c: 47a9 li a5,10 # 将常量10加载到a5
8000069e: 00f59363 bne a1,a5,800006a4 # 如果当前字符不是换行符，跳转到800006a4
800006a2: a115 j 80000ac6 # 跳转到函数__swbuf_r的入口地址
800006a4: 621c ld a5,0(a2) # 从a2偏移0处加载缓冲区当前指针到a5
800006a6: 852e mv a0,a1 # 将当前字符（a1）复制到a0
800006a8: 00178713 addi a4,a5,1 # 缓冲区指针递增1，结果存入a4
800006ac: e218 sd a4,0(a2) # 更新后的缓冲区指针存回a2偏移0处
800006ae: 00b78023 sb a1,0(a5) # 将当前字符存入缓冲区当前位置
800006b2: 8082 ret # 返回到调用函数
&lt;/code>&lt;/pre>&lt;p>从图中看串口是写入了0x8000023e0往后的,但是不管怎么样,这个数据都应该通过某种方式进行log出来&lt;/p>
&lt;p>发现l2是有请求过0x8000023c0的数据 , 为什么是c0,因为l2的block size=64,所以关于64字节对齐,就是请求0x8000023c0&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 895;
flex-basis: 2149px"
>
&lt;a href="https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241204012625976.png" data-size="1469x164">
&lt;img src="https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241204012625976.png"
width="1469"
height="164"
srcset="https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241204012625976_hu555553607089794396.png 480w, https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241204012625976_hu11861810693305300885.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 552;
flex-basis: 1325px"
>
&lt;a href="https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241204012604842.png" data-size="1602x290">
&lt;img src="https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241204012604842.png"
width="1602"
height="290"
srcset="https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241204012604842_hu8428354499617891524.png 480w, https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241204012604842_hu6093035668650593194.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>究其根本,应该是serdesser去请求了l2相应地址的数据,所以根据缓存一致性的协议,先从dcache 写回到l2再被读取&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 784;
flex-basis: 1881px"
>
&lt;a href="https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241204012840910.png" data-size="1380x176">
&lt;img src="https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241204012840910.png"
width="1380"
height="176"
srcset="https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241204012840910_hu1744728535732029670.png 480w, https://VastCircle.github.io/2024/chipyard%E4%B8%B2%E5%8F%A3%E7%96%91%E9%97%AE/image-20241204012840910_hu5890923293695806153.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>所以说还是只能运用于仿真&lt;/p>
&lt;h2 id="如何得到真正的串口">如何得到真正的串口&lt;/h2>
&lt;p>在经过一系列资料查找后,我目前得到的结论是printf本身就没有重定向到串口数据,要是需要在串口输出的话,需要实现串口数据的重定向,就是说,硬件上是没有什么问题的&lt;/p>
&lt;p>按照这种方式重写printf之后,能够正确跳转到串口的地址了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/* For GCC compiler revise _write() function for printf functionality */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#61afef;font-weight:bold">_write&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">file&lt;/span>, &lt;span style="color:#e5c07b">char&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">ptr&lt;/span>, &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">len&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">file&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">file&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">len&lt;/span>; &lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">UART_PutByte&lt;/span>(&lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">ptr&lt;/span>&lt;span style="color:#56b6c2">++&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">len&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>发现相比与前面,主要是跳转到了函数__swbuf_r的入口地址,然后去执行__swbuf_r -&amp;gt; _fflush_r -&amp;gt;__sflush_r -&amp;gt;&lt;/p>
&lt;p>-&amp;gt; __swrite -&amp;gt; _write_r -&amp;gt; write&lt;/p>
&lt;p>这样得到能够写入串口的程序,但是貌似这样无法打印到终端上了&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">000000008000068a &amp;lt;__sfputc_r&amp;gt;:
...
800006a2: a115 j 80000ac6 # 跳转到函数__swbuf_r的入口地址
...
&lt;/code>&lt;/pre>&lt;h2 id="附录">附录&lt;/h2>
&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/76611040/rocketchip-sifive-blocks-uart-unable-to-make-use-of-system-printf-function" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/76611040/rocketchip-sifive-blocks-uart-unable-to-make-use-of-system-printf-function&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://community.infineon.com/t5/PSoC-5-3-1/printf-with-newlib-nano-vs-newlib-retargeting-to-UART/td-p/110224" target="_blank" rel="noopener"
>https://community.infineon.com/t5/PSoC-5-3-1/printf-with-newlib-nano-vs-newlib-retargeting-to-UART/td-p/110224&lt;/a>&lt;/p>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Zotero_tag</title><link>https://VastCircle.github.io/2024/zotero_tag/</link><pubDate>Mon, 02 Dec 2024 16:37:43 +0800</pubDate><guid>https://VastCircle.github.io/2024/zotero_tag/</guid><description>&lt;h2 id="zotero7-安装">zotero7 安装&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 创建zotero目录,这里选择的是/opt/这个目录下创建的，因为这个目录通常放下Google Chrome和火狐浏览器和pycharm。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mkdir /opt/zotero
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 复制解压文件到/opt/zotero目录下&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mv Zotero_linux-x86_64/* /opt/zotero/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">##更新zotero的桌面位置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">cd&lt;/span> /opt/zotero
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo ./set_launcher_icon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">##创造软连接到应用程序桌面&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ln -s /opt/zotero/zotero.desktop ~/.local/share/applications/zotero.desktop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="zotero-style">zotero style&lt;/h2>
&lt;h3 id="配置easyscholar">配置easyscholar&lt;/h3>
&lt;p>参见网站https://www.easyscholar.cc/blogs/10007&lt;/p>
&lt;h2 id="zotero-tag">zotero tag&lt;/h2>
&lt;h3 id="下载">下载&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/windingwind/zotero-actions-tags" target="_blank" rel="noopener"
>https://github.com/windingwind/zotero-actions-tags&lt;/a>&lt;/p>
&lt;p>zotero 6只能使用v0.3.0版本的&lt;/p>
&lt;h3 id="动作">动作&lt;/h3>
&lt;p>通过动作添加的标签便于我们对文献状态的判断（是添加进来待读的、还是已经打开读过了、还是打开度过了还做了批注和注释）。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 148;
flex-basis: 355px"
>
&lt;a href="https://VastCircle.github.io/2024/zotero_tag/image-20241202163823519.png" data-size="804x543">
&lt;img src="https://VastCircle.github.io/2024/zotero_tag/image-20241202163823519.png"
width="804"
height="543"
srcset="https://VastCircle.github.io/2024/zotero_tag/image-20241202163823519_hu7240921750968695782.png 480w, https://VastCircle.github.io/2024/zotero_tag/image-20241202163823519_hu2770645525910083389.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/xinjieyuan/article/details/105407564" target="_blank" rel="noopener"
>zotero7安装&lt;/a>&lt;/p>
&lt;p>[插件网站][https://zotero-chinese.com/plugins/]&lt;/p>
&lt;p>&lt;a class="link" href="https://www.notion.so/Zotero-Style-bc2aebbbb6df4b7baa858e376e4fc5be#e46805998a264f1d8b330abede4587c7" target="_blank" rel="noopener"
>zotero_style 文档&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/wybtpt/article/details/127386364" target="_blank" rel="noopener"
>zotero_tag的使用&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://pkmer.cn/Pkmer-Docs/11-zotero/zotero%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%81bug%E5%8F%8A%E5%A4%84%E7%90%86/" target="_blank" rel="noopener"
>pkmer-一些常见学术软件&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://zotero-chinese.com/user-guide/plugins/style#%E9%98%85%E8%AF%BB%E6%97%B6%E9%97%B4-%E9%98%85%E8%AF%BB%E6%97%B6%E9%97%B4%E5%88%97" target="_blank" rel="noopener"
>zotero中文社区&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>An_Event_Triggered_Programmable_Prefetcher_for_Irregular_Workloads</title><link>https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/</link><pubDate>Fri, 29 Nov 2024 23:39:07 +0800</pubDate><guid>https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/</guid><description>&lt;h1 id="针对不规则工作负载的事件触发可编程预取器">针对不规则工作负载的事件触发可编程预取器&lt;/h1>
&lt;h2 id="abstract">abstract&lt;/h2>
&lt;p>许多现代工作负载需要处理大量数据，通常伴随不规则的内存访问。现有架构在处理这些工作负载时表现不佳，因为现有的预取技术无法捕捉内存访问模式，导致这些应用程序严重依赖内存。尽管已经有一些技术可以通过显式配置预取器的遍历模式来显著提高性能，这些方法的适用性通常局限于特定的数据结构。&lt;/p>
&lt;p>为此，我们提出了一种事件触发的可编程预取器，结合了通用计算单元的灵活性与基于事件的编程模型，并配合编译器技术自动从带注释的原始源代码生成事件。这种方法允许做出更复杂的预取决策，而无需在需要中间结果时发生停滞。&lt;/p>
&lt;p>通过使用我们的可编程预取系统，并结合从应用程序中提取的小型预取内核，我们在仿真中针对多种图算法、数据库和高性能计算（HPC）工作负载实现了平均3.0倍的性能提升。&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>许多现代及新兴的工作负载需要处理海量数据，这些数据往往无法完全存储在当前系统的缓存中。这些数据访问通常是不规则的，难以提前预测，导致执行过程中频繁受到高DRAM延迟的影响而出现严重的内存瓶颈和停顿。&lt;/p>
&lt;p>为应对这些挑战，目前有多种技术可供选择。一种方法是利用应用程序中的线程级并行性，通过激进的多线程技术来应对延迟，通过让多个线程同时处于等待状态来实现负载的并行化。例如，这种方法在运行于图形卡上的工作负载中较为典型。然而，这种技术的效果依赖于应用程序是否具备高度的线程级并行性，而这在大数据工作负载中往往并不成立。原因在于这些工作负载通常涉及对同一数据的复杂且不可预测的读写操作，并且很难为并行内核创建有效的分区。&lt;/p>
&lt;p>另一种方法是预取技术，包括硬件预取单元或软件指令。然而，传统的基于地址的（如步幅）预取器仅适用于非常规则的计算，例如处理密集矩阵或完全顺序的内存访问。基于历史的预取器则仅适用于高度重复的计算。这两种方法都不适用于许多大数据应用，例如数据库、图算法和许多高性能计算（HPC）工作负载，这些应用通常表现出更加复杂和不规则的数据遍历，包括指针追踪和间接数组查找。&lt;/p>
&lt;p>针对不规则访问，也有一些特定技术被提出，例如指针预取器，它通过观察内存加载来预取可能的指针。然而，这些技术无法在数组中进行预见性查找，无法处理常用的基于索引的数据结构（因为加载的内存不包含指针），并且由于缺乏对预取进行细粒度控制的能力，容易导致严重的内存过度预取。&lt;/p>
&lt;p>尽管传统的隐式预取技术在这些工作负载中并不成功，但仍有可能通过其他方法来减轻内存访问延迟带来的开销。针对各种内存受限应用的技术已经出现，通过显式配置遍历模式，可为特定工作负载带来显著的性能提升。然而，目前此类架构技术高度专用化，仅适用于目标计算，因而难以应用于通用系统。此外，由于这些技术的固定功能特性，它们难以应对该领域中算法的快速演变。&lt;/p>
&lt;p>为此，我们设计了一种基于事件的可编程预取系统，用于处理包括图算法、数据库和高性能计算（HPC）在内的多个领域的稀疏内存访问通用工作负载。**我们将一个传统的高性能乱序计算核心与一个专用的L1缓存预取结构相结合，并附加多个顺序执行的可编程预取单元.**这种基于事件的编程模型使得每个预取单元能够同时发出多个加载请求并对其作出响应，而不会导致停顿。这不仅允许系统基于先前预取的结果进行预取，还能够同时从多个数据结构中进行预取。&lt;/p>
&lt;p>此外，我们提供了编译器技术，用于根据原始源代码为这些核心生成事件程序，从而通过注释指定需要预取的内容，减少对手动配置的依赖，尤其是针对简单访问模式。对于一组广泛的内存受限基准测试，我们实现了3.0×的平均性能提升，在缓存中对预取数据的利用率很高，并且对大多数工作负载的额外内存访问需求几乎可以忽略不计。&lt;/p>
&lt;h2 id="existing-work">Existing Work&lt;/h2>
&lt;p>文献中关于预取的研究非常丰富，我们在此总结与不规则内存访问工作负载最相关的研究，并突出了其中对这些工作负载有益的元素。以下是一些研究的概述，包括Mittal和Falsafi与Wenisch的工作。&lt;/p>
&lt;h3 id="预取单元">预取单元&lt;/h3>
&lt;p>许多针对不规则工作负载高效执行的研究集中在高度专用的预取单元。这些单元通过控制特定访问模式的内存访问，并利用数据的并行加载来提高性能，通常可以实现显著的性能提升。例如，&lt;strong>SQRL&lt;/strong>和&lt;strong>DASX&lt;/strong>是专为B树、向量和哈希表结构的迭代访问设计的预取系统。同样，&lt;strong>Kocberber等人&lt;/strong>专注于通过并行哈希表遍历优化数据库内部连接操作。在后续的研究中，他们进一步在软件中模拟了类似的技术。&lt;/p>
&lt;p>此外，&lt;strong>Ho等人&lt;/strong>将预取单元的概念推广，通过将内存访问编码为一组规则，使加载和存储操作能够映射到数据流架构中。预取单元还能通过移除原始加载指令来实现能耗节约。然而，必须修改原始应用程序，产生与不具有提取器单元的设备不兼容的代码，并且通常不允许存储所提取的数据。&lt;/p>
&lt;h3 id="可配置预取器">可配置预取器&lt;/h3>
&lt;p>本文开发了一种在架构级别公开的可配置预取器，并且过去已经提出了显示其好处的想法。阿尔-苏赫尼等人在程序级别使用显式 Harbinger 指令来控制链表指针的获取。 Yang 和 Lebeck开发了一种用于链接数据结构的可编程预取方案。可编程提取器被允许停止，因此不能处理需要重叠存储器访问以实现高性能的模式。 Ainsworth 和 Jones 专门针对图形工作负载设计了一个可配置预取器，获得了大幅加速，但仅针对特定图形格式的特定遍历。科胡特等人设计一个可配置的预取器来获取列表的列表。&lt;/p>
&lt;h3 id="隐式不规则预取器">隐式不规则预取器&lt;/h3>
&lt;p>许多研究尝试通过传统的隐式预取方案来处理不规则结构，而无需显式配置。这种方法具有吸引力，因为它减少了手动干预的工作量，也无需重新编译。然而，尽管取得了一些进展，这些方法至今尚未被商用系统采用。&lt;/p>
&lt;h4 id="指针预取器">指针预取器&lt;/h4>
&lt;p>&lt;strong>指针预取器&lt;/strong>通过从核心读取的缓存行中提取所有可能的虚拟地址来实现预取，这种方法已在多种方案中提出。其主要缺点是&lt;strong>过度预取率较高&lt;/strong>，此外，这些方案无法处理许多工作负载中出现的数组间接访问模式。&lt;/p>
&lt;h4 id="依赖图流提取">依赖图流提取&lt;/h4>
&lt;p>也有尝试通过检测依赖加载来在运行时提取依赖图流。这些方法通过在识别加载起点后，将动态检测到的加载流运行在可编程单元上，从而预取数据。然而，这需要在流水线的提交阶段增加大量的分析硬件，并需要显著的处理能力来运行检测到的加载流。&lt;/p>
&lt;h4 id="runahead-方案">Runahead 方案&lt;/h4>
&lt;p>&lt;strong>Mutlu等人&lt;/strong>提出了一种runahead方案，利用缓存未命中时的空闲芯片资源动态预取数据。然而，这种方法因严格依赖指令流而受限，无法实现显著的前瞻性预取，也无法基于其他已预取的数据进行进一步预取。&lt;strong>Hashemi等人&lt;/strong>对此方案进行了扩展，使用运行时分析硬件访问所有微架构状态，生成关键指令的代码片段。这些片段仍可能在依赖加载时停顿，但通过更简单的硬件完成数据加载，并移除了一些冗余执行。&lt;/p>
&lt;h4 id="数组间接模式预取">数组间接模式预取&lt;/h4>
&lt;p>&lt;strong>Yu等人&lt;/strong>通过运行时分析执行代码，找到数组基址和每个数据元素的大小，从而捕捉步幅间接模式。这种方法实现了对单一模式的预取，但代价是缓存中需要复杂的分析硬件，这可能影响执行的关键路径。&lt;/p>
&lt;h3 id="辅助线程">辅助线程&lt;/h3>
&lt;p>一种针对不规则应用的预取解决方案是使用独立的CPU线程在软件中进行数据预取。以下是相关研究的总结：&lt;/p>
&lt;h4 id="自动生成的预执行线程">自动生成的预执行线程&lt;/h4>
&lt;p>&lt;strong>Kim 和 Yeung&lt;/strong>通过编译器分析自动生成“预执行线程”。这种方法的优点是不需要额外硬件，但它在高性能核心上使用额外线程，可能消耗大量能量。此外，该方法无法处理基于其他预取操作的预取，且容易因停顿而受限【28】。由于缺乏硬件事件队列，加载操作的同步变得困难且代价高昂。&lt;/p>
&lt;h4 id="具有架构支持的辅助内核">具有架构支持的辅助内核&lt;/h4>
&lt;p>&lt;strong>Lau等人&lt;/strong>提出了类似的方案，但增加了架构支持：在主核心旁边附加一个小型辅助核心以协助处理任务。这种紧耦合机制在一定程度上缓解了同步问题，但仍然会出现与上述相同的停顿。此外，单个核心通常无法满足复杂访问模式的处理需求。&lt;/p>
&lt;h4 id="分离访问与执行线程的核心">分离访问与执行线程的核心&lt;/h4>
&lt;p>&lt;strong>Ham等人&lt;/strong>提出了一个方案，将核心分为独立的访问线程和执行线程，运行不同代码。这种方法提供了更紧密的同步，并且由于每个线程是专用的，可以运行在更高效的硬件上。但它要求加载和计算单元都具有高性能，并且在处理复杂地址生成时仍会因中间加载而停顿。&lt;/p>
&lt;h4 id="基于辅助线程的预取机制">基于辅助线程的预取机制&lt;/h4>
&lt;p>&lt;strong>Ganusov 和 Burtscher&lt;/strong>通过硬件支持，将观察到的加载操作转发给新生成的线程，从而在软件中模拟常见的 Markov【26】和步幅预取方案。&lt;/p>
&lt;h4 id="我们的改进">我们的改进&lt;/h4>
&lt;p>我们在硬件中转发类似的数据，但创建了完全可编程的预取事件。这些事件能够对其他预取作出反应，支持真实数据结构的遍历，并通过许多专用单元的紧密耦合和运行自定义预取代码的轻量抽象来实现高效的并行性。&lt;/p>
&lt;h2 id="motivation">motivation&lt;/h2>
&lt;p>图1展示了数据库中常用的典型哈希连接内核的示例。我们通过对键数组的顺序访问进行哈希操作，间接访问哈希表数组，然后进行链表遍历。现有预取器在处理此类模式时面临多个挑战：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>哈希函数导致的访问不可预测性&lt;/strong>
由于哈希函数的存在，对哈希表数组的访问是不可预测的，且分布在内存的各个位置，缺乏空间和时间局部性。在不知道哈希函数的情况下，预取器几乎无法准确预取相关条目。&lt;/li>
&lt;li>&lt;strong>链表遍历的延迟问题&lt;/strong>
在链表遍历中，每个元素的处理工作量较少。尽管指针预取器可以识别&lt;code>l-&amp;gt;next&lt;/code>作为下一个需要处理的元素地址，但由于&lt;code>while&lt;/code>循环中每次迭代的工作量不足，预取器无法掩盖加载下一链表项时的内存访问延迟。&lt;/li>
&lt;li>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241207131949548.png" data-size="562x369">
&lt;img src="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241207131949548.png"
width="562"
height="369"
srcset="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241207131949548_hu9190750475602985920.png 480w, https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241207131949548_hu12636253816021822851.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/li>
&lt;/ol>
&lt;p>图2(a)显示了未修改代码的执行方式。浅绿色框表示哈希计算和哈希表桶的加载，深绿色框表示链表项的加载。框中的对角线表示由于数据等待从更低级缓存或主存到达而产生的停顿。可以看出，由于代码缺乏时间和空间局部性，每次加载都会导致停顿。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 425px"
>
&lt;a href="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241207131717198.png" data-size="1127x636">
&lt;img src="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241207131717198.png"
width="1127"
height="636"
srcset="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241207131717198_hu11404448108703432409.png 480w, https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241207131717198_hu17326338218669514549.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="软件预取">软件预取&lt;/h3>
&lt;p>在这个示例中，软件预取比硬件预取器更有优势，因为我们可以在预取逻辑中编码哈希函数。图1显示了这种指令及其在代码中的位置。通过在&lt;code>for&lt;/code>循环的未来固定迭代次数（即距离&lt;code>dist&lt;/code>）预取，我们可以提前将哈希表元素加载到缓存中，以供后续使用。&lt;/p>
&lt;p>然而，对于链表遍历，软件预取无法提供帮助，因为软件无法得知哈希表项预取的结果。我们只能预取当前哈希表项的链表，但这与硬件的情况一样，存在无法隐藏内存访问延迟的问题。&lt;/p>
&lt;p>图2(b)展示了软件预取如何提升性能。黄色框表示预取地址计算和相应的预取指令。在本示例中，我们假设预取距离为1次迭代，即第1次迭代预取第2次迭代的哈希表桶，依此类推。如图所示，从第2次迭代开始，加载哈希表桶时没有停顿（尽管预取指令本身会产生一定的开销）。经过4次迭代后，执行时间比原始代码略短，但由于无法预取链表项，性能提升受到限制。&lt;/p>
&lt;h3 id="多线程处理">多线程处理&lt;/h3>
&lt;p>第三种选择是利用线程级并行性（Thread-Level Parallelism, TLP）。&lt;code>for&lt;/code>循环的每次迭代都可以作为一个独立的线程执行，从而隐藏内存访问延迟。然而，这种算法并非完全并行，因为若以无序的方式执行迭代会改变输出键的顺序，因此需要同步机制以防止这种情况的发生。&lt;/p>
&lt;p>图1展示了这一选项的代码，而图2(c)则展示了其在两个线程上的执行情况。当找到匹配的键时，线程需要等待其成为最老的迭代才能将结果写入输出数组，以保持顺序。这是通过调用&lt;code>wait_til_oldest()&lt;/code>来实现的；同时，每次迭代结束时通过&lt;code>signal_iter_done()&lt;/code>发出信号，用于跟踪当前最老的迭代。&lt;/p>
&lt;p>在示例中（图2(c)），第2次迭代的第一个链表项找到匹配键。然而，由于核心0上的第1次迭代仍在运行，第2次迭代必须等待第1次迭代完成后才能将结果写入输出数组。尽管存在这一空闲等待时间，在本示例中，通过尽可能重叠执行与停顿，多线程版本的完成时间仍然比软件预取更快。&lt;/p>
&lt;h3 id="辅助线程-1">辅助线程&lt;/h3>
&lt;p>第四种预取方式是将循环中负责&lt;strong>内存访问的部分复制到一个独立的辅助线程中&lt;/strong>。如果支持同时多线程（Simultaneous Multithreading, SMT），该线程可以在与主线程相同的核心的不同上下文中运行，以便将数据预取到主L1缓存中。图2(d)展示了该技术的执行情况。&lt;/p>
&lt;p>此方法的根本局限在于，辅助线程无法以足够快的速度加载数据，无法&lt;strong>始终领先主线程&lt;/strong>。辅助线程无法使用预取指令，只能在每次加载时停顿以利用加载结果。虽然可以通过使用多个辅助线程在一定程度上缓解这一问题，但这需要消耗大量的系统资源，因为我们需要足够多的辅助线程来隐藏所有的内存停顿。(辅助线程非常快可以吗)&lt;/p>
&lt;p>为了实现这一点，我们需要让预取器能够对自身预取返回的数据作出反应，并让其了解所执行的计算内容，从而基于正在遍历的数据结构计算下一组预取地址。&lt;/p>
&lt;h3 id="理想行为">理想行为&lt;/h3>
&lt;p>在理想情况下，我们希望完全避免停顿。这种工作负载实际上包含大量内存级并行性（Memory-Level Parallelism, MLP），但现有技术无法充分利用。具体来说，我们&lt;strong>可以在&lt;code>in.key&lt;/code>数组上并行化，从而同时预取多个链表，并重叠顺序链表的预取操作&lt;/strong>。&lt;/p>
&lt;p>如果我们能够将预取地址的计算与主线程的执行解耦，并避免在每次加载时停顿，就能够利用这些并行性，在数据即将被使用前将其加载到缓存中。这将导致如图2(e)所示的执行方式：在经历一个预热阶段后，计算可以不受停顿影响继续进行，因为数据会立即从一级缓存中获得。&lt;/p>
&lt;p>为了实现这一点，我们需要让&lt;strong>预取器能够对自身预取返回的数据作出反应，并让其了解所执行的计算内容，从而基于正在遍历的数据结构计算下一组预取地址。&lt;/strong>&lt;/p>
&lt;h2 id="programmable-prefetcher可编程预取器">Programmable Prefetcher(可编程预取器)&lt;/h2>
&lt;p>与常见的跨步预取器一样，新的预取由&lt;strong>缓存内的读取事件以及到达缓存的预取数据触发&lt;/strong>。使我们的方案适合更多样化和不规则应用的原因是，这些事件具有可编程行为，由&lt;strong>配置的地址范围&lt;/strong>触发，这会导致运行小型的、完全可编程的事件代码序列，从而生成新的预取。由于每个事件都与前一个事件分开，因此它们是极其并行的，从而可以在许多微型可编程单元上实现高效和高性能的执行。对先前的预取做出反应的能力是其他具有可编程性的方案（例如软件预取或辅助线程）无法实现的，允许在不停止的情况下预取通常具有多个相关访问特征的不规则模式。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 245;
flex-basis: 589px"
>
&lt;a href="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206201718437.png" data-size="1191x485">
&lt;img src="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206201718437.png"
width="1191"
height="485"
srcset="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206201718437_hu16517466288801699795.png 480w, https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206201718437_hu11855639380807906099.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="overview">overview&lt;/h3>
&lt;p>图 3 展示了我们设计的总体架构。我们添加了可编程单元和支持硬件，用于根据程序的当前和未来工作集生成预取请求。预取器是基于&lt;strong>事件&lt;/strong>的，以避免停顿，同时仍然能够通过早期预取结果支持进一步的预取操作。从主核发出的所有读取操作以及到达 L1 缓存的预取数据都会首先进入地址过滤器（见第 4.2 节）。被过滤为感兴趣的数据将进入观察队列，当调度器（见第 4.3 节）检测到有空闲的可编程预取单元（PPU，见第 4.4 节）时会将数据移出。&lt;/p>
&lt;p>这些可编程单元是低频、顺序执行的核心，针对从调度器接收到的每个地址执行一个小型的定制计算，并生成零个或多个预取请求。它们利用加载事件中的数据、配置在全局寄存器中的状态以及由 EWMA 计算器（见第 4.5 节）计算的前瞻距离，来生成新的预取请求，这些请求被放入一个 FIFO 预取请求队列（见第 4.6 节）。当 L1 缓存有空闲的 MSHR 时，它会从预取请求队列中取出一个预取请求并将其发送到 L2 缓存。&lt;/p>
&lt;p>在预取器未被使用的情况下，可以关闭其电源以避免影响性能。以下各小节将详细描述每个结构。&lt;/p>
&lt;h3 id="address-filter">Address Filter&lt;/h3>
&lt;p>地址过滤器对来自&lt;strong>主核的所有加载操作以及从 L2 进入 L1 缓存的预取数据进行监听&lt;/strong>。此过滤器保存了多个需要&lt;strong>监控的地址范围&lt;/strong>，并利用这些范围生成新的预取请求，例如图 1 中内核的哈希表（htab）。地址过滤器通过运行在主核上的显式地址边界配置指令进行配置。这些指令由编译器或程序员在为 PPU 创建代码时生成。(哈希表去取线性表吗??)&lt;/p>
&lt;p>配置数据存储在过滤表中，其中包括每个重要数据结构的虚拟地址范围，以及两个指向小型计算内核的函数指针：&lt;strong>Load Ptr&lt;/strong>（在观察到加载操作时运行）和 &lt;strong>PF Ptr&lt;/strong>（在预取到该范围时运行）。&lt;/p>
&lt;p>部分配置也用于调度目的（见第 4.5 节），这些条目在表中标记出来。&lt;strong>过滤后的地址（观测值）会连同其函数指针以及（在预取观测情况下）预取的缓存行一起放入观察队列&lt;/strong>。地址范围可以重叠；若一个地址属于多个范围，则队列中会为每个范围存储一个条目。&lt;/p>
&lt;h3 id="observation-queue-and-scheduler">Observation Queue and Scheduler&lt;/h3>
&lt;p>&lt;strong>过滤后的地址会先放入一个小型观察队列中，随后再分配给核心&lt;/strong>。该队列是一个简单的 FIFO 缓冲区，用于存储观测值，直到有空闲的 PPU 可用。由于预取仅是性能优化措施，如果队列满了，可以安全地丢弃旧的观测值，而不会影响主程序的正确性。&lt;/p>
&lt;p>当一个 PPU 空闲时，调度器会将数据的缓存行和虚拟地址写入该 PPU 的寄存器，然后将 PPU 的程序计数器设置为与该观测值相关联的预取内核，启动核心执行。调度器的任务仅仅是监控 PPUs，并在需要时从 FIFO 观察队列中为它们分配工作。&lt;/p>
&lt;h3 id="programmable-prefetch-units-ppus">Programmable Prefetch Units (PPUs)&lt;/h3>
&lt;p>PPUs 是一组顺序执行、低功耗的可编程 RISC 核，与预取器的调度器相连，负责生成新的预取请求。PPUs 与主核使用相同的字长，以便能够通过一条指令执行地址运算。默认情况下，预取单元是暂停的。当观察队列中有数据且有空闲的 PPU 时，调度器将最旧的观察值发送到该 PPU 执行。PPU 运行直到完成内核任务，通常只需几行代码。在执行过程中，它会&lt;strong>生成若干预取请求&lt;/strong>，这些请求会被放入预取请求队列，然后 PPU 进入休眠状态，等待调度器重新唤醒。&lt;/p>
&lt;p>&lt;strong>PPUs 共享一个单独的多端口指令缓存&lt;/strong>，&lt;strong>但不与主核共享指令缓存&lt;/strong>；&lt;font color='red'>(执行的是相对于的函数指针吗?)&lt;/font>PPU 的代码与主应用程序代码是独立的，且任何观察值都可以由任意 PPU 执行。大多数应用程序所需的可编程预取代码非常小，因此指令缓存的需求较少：在第 7 节描述的基准测试中，每个应用程序的 PPU 从主存储器中获取的指令总量最多为 1KB。&lt;/p>
&lt;p>PPUs 没有加载或存储单元，因此不需要数据缓存。&lt;strong>它们只能读取转发给它们的单个缓存行、本地寄存器存储，以及全局预取器寄存器&lt;/strong>。去除访问其他内存的能力既简化了 PPU 的设计，也减少了它们发生停顿的可能性。尽管这限制了预取计算中可用的数据，但我们尚未发现需要额外数据的场景。通常，预取代码只需从缓存行中提取一些数据，执行简单的算术操作，然后将其与全局预取器状态（如数组的基地址）结合，生成新的预取地址。&lt;/p>
&lt;p>由于无法访问其他内存，每个 PPU 也没有用于中间值的栈空间，但寄存器可以提供充足的临时存储。在实际应用中，这并未造成问题。&lt;/p>
&lt;h3 id="moving-average-ewma-calculators">Moving Average (EWMA) Calculators&lt;/h3>
&lt;p>对于某些应用，预取的前瞻距离无法通过固定值设置。它可能依赖于输入，并可能根据特定系统的时间统计信息变化。在一些工作负载中，特别是图的广度优先搜索中，预取距离可能在计算过程中发生变化，因为各阶段访问的元素大小不同 [1]。先前的研究通过考虑计算时间与内存访问时间之间的比率应对这一挑战。例如，Mowry 等人 [45] 将&lt;strong>预取延迟除以循环中最短路径的指令数量&lt;/strong>，以确定需要预取的迭代次数。&lt;/p>
&lt;p>我们推广了这一思想，并在硬件中动态执行计算，使用指数加权移动平均（EWMA）计算器为各种观察到的事件生成时间。EWMA 可以在硬件中高效实现，仅需少量状态存储 [18]，因此 PPU 不需要执行时间计算。我们动态计算完成一串预取所需的时间与每次循环迭代所需时间的比率，并据此决定在基础数组中需要提前预取多远。这意味着我们尝试预取刚好在当前预取完成后将被访问的元素。&lt;/p>
&lt;p>当对某个数据结构的读取操作被观测到时，&lt;strong>会记录该事件与该地址范围上前一个事件之间的时间&lt;/strong>。这可以为我们提供例如广度优先搜索中 FIFO 访问之间的时间间隔。为了计量加载操作的耗时，我们标记开始一次计时预取的 EWMA，并将当前时间附加到生成的事件中。随后将其传播到由此产生的预取操作，直到到达具有标志位的地址范围，然后使用事件之间的时间间隔作为加载时间 EWMA 的输入。&lt;/p>
&lt;h3 id="prefetch-request-queue">Prefetch Request Queue&lt;/h3>
&lt;p>预取请求队列是一个 FIFO 队列，包含由 PPU 计算得出的尚未处理的虚拟地址，用于预取操作。当 L1 数据缓存有空闲的 MSHR 时，它会从队列中取出最旧的条目，通过共享的 TLB 将其转换为物理地址，然后向该地址发出预取请求。与观察队列类似，如果队列已满，可以安全地丢弃旧请求，而不会影响应用程序的正确性。&lt;/p>
&lt;h3 id="memory-request-tags">Memory Request Tags&lt;/h3>
&lt;p>虽然数组范围（可以通过虚拟地址边界捕获）可以通过第 4.2 节讨论的配置步骤轻松识别，但预取器需要响应的结构不仅限于此。链式结构（如树、图、链表）可能在非连续的内存区域中逐个元素分配，并且在预取数据到达缓存时需要进行识别。&lt;/p>
&lt;p>为了解决这个问题，&lt;strong>我们在 MSHR 中存储一个标记，用来标识预取目标的数据结构&lt;/strong>，例如哈希表桶的链表。当预取请求返回数据并且带有已注册的标记时，缓存行将被&lt;strong>发送到加载了该结构函数指针的 PPU&lt;/strong>，进行进一步的处理。每个结构都会有具体的结构函数.&lt;/p>
&lt;h3 id="hardware-requirements">Hardware Requirements&lt;/h3>
&lt;p>尽管预取器具有许多可编程单元，但每个单元都非常小，类似于微控制器的规模，例如 ARM Cortex M0+，其包含不到 12,000 个门电路（大约 50,000 个晶体管）[7]。根据公开数据 [4, 5]，在相似的硅工艺下，我们可以预计这十二个核心的硬件影响大约占 Cortex A57 处理器面积的 1.3%（不包括共享缓存）。在实际实现中，可能希望支持这些核心的 64 位操作，因此我们可以预期面积将增加到 2.6%。当我们为指令缓存、全局寄存器、预取请求队列和观察队列增加 8.5KiB 内存 [56] 时，总的面积开销仍然只有 3%。这一开销与 L1 数据缓存的面积相当。&lt;/p>
&lt;h3 id="summer">summer&lt;/h3>
&lt;p>我们开发了一个可编程预取器，它响应过滤后的加载和预取观察事件。这些输入到一组可编程单元中，这些单元根据事件运行内核以向缓存中发出预取。为了简洁起见，我们在这里省略了多核预取的介绍，但实现和预期结果是相似的 [1, 2]。以下部分描述了如何对其进行编程。&lt;/p>
&lt;h2 id="os-and-application-support">OS and Application Support&lt;/h2>
&lt;p>为了使预取器发挥作用，必须&lt;strong>为每个应用程序生成定制代码&lt;/strong>。本节描述了用于这一目的的基于事件的编程模型，适用于多个 PPU 上的延迟容忍取指。它还考虑了与操作系统和上下文切换的交互。在本节中，我们假设预取代码是手动编写的。接下来，我们将在第 6 节中探讨编译器的支持.&lt;/p>
&lt;h3 id="event-programming-model">Event Programming Model&lt;/h3>
&lt;p>PPU 编程模型是基于事件的，这与预取指令的特点自然契合，因为预取指令在返回数据之前具有可变的延迟。事件生成预取操作，而不是加载操作，这些操作可以在数据到达核心时通过新事件进行响应。当资源可用时，预取请求会被发往内存层级，如第 4 节所述。这种方式自然具备延迟容忍性，避免了等待预取数据时 PPU 的停滞。&lt;/p>
&lt;p>运行在 PPU 上的事件是由加载或预取到缓存中的地址决定的。如果预取操作返回数据，调度器可以选择任何 PPU 来执行相应的事件，而不必局限于发起事件的单元。这使得该架构适合处理需要加载中间值的预取操作，否则这些操作会导致预取器停滞。&lt;/p>
&lt;p>这种编程方式的一个优点是，PPU 不需要在每个事件的计算之间保持状态。每个事件的代码类似于传统处理器中的标准 C 函数，但有一些限制。由于 PPU 无法访问内存（除非是发出预取请求），因此无法进行数据加载、存储或堆栈存储。PPU 可以访问的唯一数据是触发事件的地址、已观察到的缓存行（存储在本地寄存器中）和全局预取器状态（存储在全局寄存器中，如地址边界或配置的值，如哈希掩码）。&lt;/p>
&lt;p>我们为 PPU 添加了特殊的预取指令，这些指令不同于软件预取，因为它们会在返回数据后触发随后的事件，由 PPU 处理。不能进行函数调用，因为没有堆栈，也不支持系统调用。预取事件可以随时终止，因为它们对于主核心上运行的应用程序的正确执行不是必需的。例如，当上下文切换时，当前应用程序被移出主核心，此时所有 PPU 会被暂停，且其预取事件会被中止。此外，任何通常会导致陷阱或异常的操作（例如除以零）都会立即终止预取事件。&lt;/p>
&lt;h3 id="example">example&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 499;
flex-basis: 1198px"
>
&lt;a href="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206205302636.png" data-size="1463x293">
&lt;img src="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206205302636.png"
width="1463"
height="293"
srcset="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206205302636_hu17618219161418557276.png 480w, https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206205302636_hu6907335328717841296.png 1024w"
loading="lazy"
alt="image-20241206205302636">
&lt;/a>
&lt;figcaption>image-20241206205302636&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>考虑图 4(a) 中的程序。它的数据访问非常不规则，具有间接访问数组 B 和 C 的特点。然而，由于数组 A 的顺序访问，我们可以利用每次迭代中的内存层级并行性，来并行加载数据。这可以通过加载 PPUs 以执行图 4(b) 中的代码来实现。我们假设 A、B 和 C 都是 8 字节值的数组。通过在原始代码中插入指令，我们将数组 A、B 和 C 的地址范围分别配置为预取器的地址范围 0、1 和 2。同样，图 4(b) 中内核的地址也被提取并配置为预取器的相关加载事件。&lt;/p>
&lt;p>当主程序对 A 进行读取时，预取事件被触发，从当前读取的地址开始，提前预取两缓存行。当预取完成后，获取到的数据将作为索引分别用于访问 B（&lt;code>get_base(1)&lt;/code>）和 C（&lt;code>get_base(2)&lt;/code>）。&lt;/p>
&lt;p>需要注意的是，预取器代码是将一组阻塞加载转换为一组非阻塞的预取事件。主程序的核心代码保持顺序执行且没有改变，唯一的变化是插入了配置指令。大部分的缓存缺失应该通过 PPUs 提前发出加载请求来避免，从而减少核心程序的缓存缺失。预取器函数（&lt;code>get_vaddr()&lt;/code>、&lt;code>get_base()&lt;/code> 和 &lt;code>get_fetched_data()&lt;/code>）是编译器内建函数，它们会被转换为寄存器读取或从附加的小型共享预取器状态内存中加载数据。&lt;/p>
&lt;h3 id="operating-system-visibility">Operating System Visibility&lt;/h3>
&lt;p>尽管 PPUs 拥有与常规核心类似的许多功能，但它们并不会被操作系统视为独立的核心，因此操作系统无法将进程调度到它们上。相反，操作系统只能看到需要在上下文切换时保存的状态。虽然在某些情况下，操作系统将 PPUs 视为完整核心可能是有用的，但避免与操作系统的交互简化了它们的设计（例如，它不需要特权指令）。因此，尽管预取器会发起页表遍历，但它无法处理页错误，遇到这种情况时我们会丢弃该预取。&lt;/p>
&lt;p>预取单元仅用于提升性能，不能影响主程序的正确性。因此，所需保存的状态量很小。例如，我们不需要保留内部 PPU 寄存器，而只需在上下文切换时丢弃它们。出于同样的原因，我们也可以丢弃观察队列中的所有事件和获取队列中的地址。只要上下文切换不频繁，这将导致性能下降较小。EWMA 值在上下文切换时不需要保留，因为它们可以重新计算。&lt;/p>
&lt;p>因此，在上下文切换时所需保存的内容仅是预取器配置：全局寄存器和地址表。&lt;/p>
&lt;h2 id="compiler-assistance">Compiler Assistance&lt;/h2>
&lt;p>手动编写事件需要大量的手动工作。更理想的方式是通过编译器从原始代码中生成这些事件，以便最终用户使用。软件预取[2, 12]是一种常见的技术，处理器可以在不等待结果的情况下将数据加载到缓存系统中。这种方法为最终用户提供了高层次的抽象，但如第3节所讨论的，直接执行时存在许多缺点。然而，我们可以通过逆向分析循环中出现的地址生成代码，来生成硬件事件，从而生成可编程预取器代码。这使得我们能够在不减慢主计算线程速度的情况下执行预取。我们提供了在LLVM [36]中实现的编译器传递，既可以将软件预取转换为可编程事件，也可以通过在程序员需要预取的循环中添加pragma，直接生成事件，从而提供了一系列的技术，权衡了手动工作与性能之间的平衡。伪代码如算法1所示。&lt;/p>
&lt;h3 id="analysis">Analysis&lt;/h3>
&lt;p>我们的编译器分析传递从软件预取指令开始，利用深度优先分析数据依赖图向后追踪。我们在遇到常量、循环不变值、非循环不变负载或phi节点时终止。目标是将预取地址生成拆分为一系列节点，最终形成一个以单个负载结尾的序列，并将在后续的传递中将其转化为PPU事件。&lt;/p>
&lt;p>为了为PPU代码获得适当的提前量，软件预取指令必须位于一个具有可识别归纳变量的循环中。我们还需要一个使用归纳变量访问的数据结构，以便可以通过观察缓存中的负载来推断其值。&lt;/p>
&lt;p>Phi节点标识要么是循环的归纳变量，要么是其他受控制流依赖的值。在前一种情况下，只要在深度优先搜索的当前迭代中没有找到负载，我们就可以将归纳变量替换为通过地址推断的代码，并将找到的指令集作为一组预取的第一个事件。后一种情况需要更复杂的分析，并且在实际中较为罕见，因此我们不再讨论。&lt;/p>
&lt;p>如果在搜索中发现多个不同的非循环不变负载，那么将使用多个加载的值来创建地址，而事件不能由单个数据值的到达触发。在这种情况下，转换失败。然而，如果只找到一个负载，我们将这些指令打包成一个事件，并从负载开始重复分析。&lt;/p>
&lt;p>图6展示了图5(a)中代码的控制流图。分析从预取指令（第14行）开始，对其输入v5进行深度优先搜索，并在达到第12行的负载时终止。由于这是一个非循环不变负载，这三条指令被打包成一个事件，分析重新从负载开始。接着，第二次分析传递在第10行的负载处终止，再次创建一个事件。最后，第三次分析传递在phi节点处终止，该节点对应于循环的归纳变量，因此创建了一个新的事件，不再需要进一步分析。&lt;/p>
&lt;h3 id="array-bounds-detection">Array Bounds Detection&lt;/h3>
&lt;p>预取器需要获取通过归纳变量访问的每个数组的地址边界，并将其存储在地址过滤器中，以便在监视到加载或预取时触发正确的事件。例如，在图6中的代码中，必须在观察到主核心对数组A的加载时执行事件A。返回的预取通过使用内存请求标签来处理，这些标签在第4.7节中进行了描述。&lt;/p>
&lt;p>每个数组的起始地址可以通过地址生成指令轻松获取，在有类型的数组的情况下，结束地址也很简单，因为数组的大小是明确声明的。然而，在像C这样的语言中，数组通常表示为指针，这使得确定地址边界变得更加复杂。一种方法是针对常见情况进行模式匹配，例如，向后查找分配指令。另一种方法是识别循环终止条件，前提是该条件是循环不变的。&lt;/p>
&lt;h3 id="code-generation">Code Generation&lt;/h3>
&lt;p>代码生成阶段的任务是插入预取器配置指令、生成PPU代码并删除原始的软件预取指令。使用第6.2节中描述的分析，已知数组的边界，因此为每个数组的配置指令会放置在循环之前。同时，为PPU代码所需的任何循环不变值添加配置指令，将它们分配给唯一的预取器全局寄存器。&lt;/p>
&lt;p>为了生成预取器代码，我们从第6.1节中通过分析识别的指令集合，转换为事件函数。在第一个事件中，我们用当前地址观察值（可以从PPU寄存器访问）减去基数组地址并除以数组元素的大小（通常转换为移位操作）来替换归纳变量的phi节点。我们用硬件预取指令替换每个事件中的最后一条指令，该指令可能是加载或软件预取。对于加载，我们添加回调，以便当此预取返回时，调用序列中的下一个事件。我们将所有循环不变值替换为对在主代码中配置的全局寄存器的访问。剩下的唯一加载必须是从当前预取或加载事件中观察到的数据，因此可以将其转换为寄存器访问。最后，删除现在不再需要的软件预取指令。然后使用死代码消除技术去除仅用于软件预取的代码，保留仍然需要的指令的公共子表达式。&lt;/p>
&lt;h4 id="pragma-prefetching">Pragma Prefetching&lt;/h4>
&lt;p>虽然软件预取是一种相对描述性较强的机制，可用于转换为硬件事件，但这仍然需要一些手动操作。一种选择是让编译器负责生成初始的软件预取【2】，然后将其转换为事件。然而，一个更简单直接的选择是直接指明需要进行预取的循环，并让编译器从头生成预取事件。我们通过一个自定义的预取编译指令（如图5(b)所示）支持这一功能，采用与第6.1节类似的深度优先搜索方法。&lt;/p>
&lt;p>我们从具有间接访问的加载开始分析（这些加载很可能发生缺失），并基于发现的归纳变量进行预取。以这种方式生成代码意味着我们掌握的信息少于软件预取阶段的情况，因为软件预取阶段可以对哪些数据会发生缺失以及哪些数据将被访问进行运行时编码，而循环上的简单编译指令可能会遗漏这些信息（例如，数组访问的步长模式）。此外，如果没有更多信息，编译时无法决定哪些加载可能访问已在L1缓存中的数据，因此对这些数据结构的预取是多余的（尽管可以通过分析硬件在运行时禁用这些预取）。然而，对于简单模式，这种描述器与软件预取转换一样强大。&lt;/p>
&lt;h2 id="evaluation">Evaluation&lt;/h2>
&lt;p>为了评估我们的预取器性能，我们使用 gem5 模拟器【10】在全系统模式下模拟了一个高性能系统。该系统运行 Linux，并采用 ARMv8 64 位指令集，其配置如表 1 所示，与之前的研究验证过的配置类似【21】。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 81;
flex-basis: 194px"
>
&lt;a href="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206212742894.png" data-size="591x729">
&lt;img src="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206212742894.png"
width="591"
height="729"
srcset="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206212742894_hu6047732684462417660.png 480w, https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206212742894_hu13171037479579663573.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="performance性能">Performance(性能)&lt;/h3>
&lt;p>&lt;strong>图7显示&lt;/strong>，相比于未使用预取的情况，我们的可编程预取器在内存受限的工作负载中（详见第7节）通过手动编程(manual)可实现最高&lt;strong>4.3倍&lt;/strong>的加速，而普通的&lt;strong>步幅预取器&lt;/strong>(stride)和&lt;strong>软件预取器&lt;/strong>(software)分别只能实现最高&lt;strong>1.4倍&lt;/strong>和&lt;strong>2.2倍&lt;/strong>的加速。&lt;/p>
&lt;p>使用常规配置的&lt;strong>马尔可夫全局历史缓冲器&lt;/strong>【48】未能实现任何加速，因为我们评估的应用程序访问的数据量过大，仅凭其有限的状态无法进行有效预测。当我们将状态量扩展至&lt;strong>1GiB&lt;/strong>（大容量配置）时，仅在访问数据量较小的基准测试（如 G500List 和 ConjGrad）中获得性能提升。而其他应用程序由于访问的数据量即使对于一个非常大的历史缓冲器来说仍然过多，或者其内存访问模式不具有重复性，因而无法从该技术中获益。&lt;/p>
&lt;p>通过编译器辅助的软件预取转换（&lt;strong>converted&lt;/strong>）在大多数基准测试中获得了与手动编写事件相似的加速，但在 Graph500 工作负载中表现略逊。而基于&lt;strong>pragma&lt;/strong> 的自动事件生成技术（&lt;strong>pragma generated&lt;/strong>）能够对较简单的访问模式实现与手动编写事件相当的加速效果，但在我们的八个基准测试中有四个未能充分发挥其潜力。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 281;
flex-basis: 675px"
>
&lt;a href="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206213624315.png" data-size="1520x540">
&lt;img src="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206213624315.png"
width="1520"
height="540"
srcset="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206213624315_hu9047025795724385010.png 480w, https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206213624315_hu2542691706129141724.png 1024w"
loading="lazy"
alt="image-20241206213624315">
&lt;/a>
&lt;figcaption>image-20241206213624315&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="speedups加速比">Speedups(加速比)&lt;/h4>
&lt;p>三个基准测试通过软件预取获得了显著的性能提升，分别是 &lt;strong>RandAcc&lt;/strong>、&lt;strong>IntSort&lt;/strong> 和 &lt;strong>HJ-2&lt;/strong>。它们的访问模式基于单一步长加载的数组间接访问，非常适合软件预取。这种空间局部性意味着预取地址计算不会引发大量的流水线停顿。然而，在极端情况下（例如 &lt;strong>IntSort&lt;/strong>），软件预取导致了动态指令数量的显著增加，&lt;strong>IntSort&lt;/strong> 增加了 113%，&lt;strong>RandAcc&lt;/strong> 增加了 83%，&lt;strong>HJ-2&lt;/strong> 增加了 56%。相比之下，在我们的方案中将预取地址计算转移到可编程预取单元（PPUs）后，加速比更高：&lt;strong>IntSort&lt;/strong> 从软件预取的 2.0× 提升到 2.8×，&lt;strong>RandAcc&lt;/strong> 从 2.2× 提升到 3.0×，&lt;strong>HJ-2&lt;/strong> 从 1.4× 提升到 3.9×。&lt;/p>
&lt;p>在其他基准中，步长和软件预取带来的收益较小，但我们的预取器能够解锁更多的内存级并行性，实现显著的加速。例如，在 &lt;strong>HJ-8&lt;/strong> 中，步长和软件预取的加速几乎可以忽略，但我们的 PPUs 实现了 3.8× 的加速。&lt;/p>
&lt;p>&lt;strong>G500-List&lt;/strong> 是唯一的显著例外，尽管实现了 1.7× 的加速，却是我们的预取器中表现最差的基准。这是因为该应用程序中不存在细粒度的并行性：图中每个顶点的出边被存储在一个链表中。当预取某个顶点时，每条边只能通过前一条边的指针来确定，这实际上将边的处理序列化了。相比之下，Peled 等人[50] 在同一基准测试中未能取得任何性能改进。&lt;/p>
&lt;p>在图 7 中，&lt;strong>PageRank&lt;/strong> 的软件预取和预取转换没有柱状条。这是因为 Boost 图形库代码使用了模板迭代器，迭代器只能访问边对(pair)，无法获取单个元素的地址，因此无法插入软件预取指令。通过编译器辅助的预取（包括 pragma 和软件预取转换）在 &lt;strong>IntSort&lt;/strong>、&lt;strong>ConjGrad&lt;/strong> 和 &lt;strong>HJ-2&lt;/strong> 中表现良好。&lt;/p>
&lt;p>在 &lt;strong>PageRank&lt;/strong> 中，由于代码不允许插入软件预取指令（高层迭代器的限制），这对我们的 pragma pass 并不是问题，因为 pragma pass 在 LLVM IR 上工作，可以自动发现访问模式并生成事件。然而，在 &lt;strong>IntSort&lt;/strong>、&lt;strong>ConjGrad&lt;/strong> 和 &lt;strong>PageRank&lt;/strong> 中，使用 pragma 自动生成的预取略微降低了性能，这是因为生成了一些无用的预取，而不是因为无法发现访问模式。&lt;/p>
&lt;p>&lt;strong>RandAcc&lt;/strong> 中，pragma 转换获得的性能提升低于手动编写的软件预取。这是因为该基准反复迭代一个小的 128 项数组，手动预取时可以编码循环回绕的预取。而这一特性涉及多个控制流循环，自动化分析难以发现，因此我们的方案没有预取数组的前几个条目。但 pragma 方案对程序员的工作量要求比手动预取低得多，程序员只需标识目标循环，而无需手动指定预取逻辑和前瞻距离。&lt;/p>
&lt;p>&lt;strong>HJ-8&lt;/strong> 在使用软件预取转换时获得了显著的性能提升，这是因为我们可以指定预取前 N 个哈希桶。这与软件预取不同，因为软件预取无法以延迟容忍的方式实现这一点（需要读取预取数据）。而对于 pragma 生成方案，由于 N 无法从代码中轻松推导，也存在类似的问题。通常，哈希表每个桶中元素较少，因此即使元素数目不同，保守的 “前 N” 方法也可以很好地工作。然而，通过手动预取，可以引入控制流循环，遍历每个桶，直到尝试预取空指针为止。&lt;/p>
&lt;p>&lt;strong>G500-CSR&lt;/strong> 的性能随预取的程序员工作量增加而逐步提升。由于编译器转换无法处理控制流（软件预取本质上无法表达循环），因此无法预取数据相关的边范围，只能以固定 N 预取前 N 条边。此外，由于编译器 pass 假设一次只访问一个加载值，因此无法利用每个顶点的起始值和终止值会位于同一缓存行的知识。&lt;/p>
&lt;p>在 G500-CSR 中，pragma pass 无法识别从顶点数据中获取边或访问值的需求，这是由于其中复杂的控制流。结果仅实现了两种从 FIFO 队列到顶点、从边到访问信息的 stride-indirect 模式，限制了可实现的预取性能。尽管如此，这仍然显著高于其他近期研究[50]，其在相同基准上获得的性能提升不足 10%。&lt;/p>
&lt;p>由于 &lt;strong>G500-List&lt;/strong> 严重依赖于链表形式的长边列表，其有效预取需要循环控制流。因此，无法将其表示为软件预取，编译器 pass 的作用也受到限制。&lt;/p>
&lt;h4 id="对-l1-缓存的影响">对 L1 缓存的影响&lt;/h4>
&lt;p>图 8 对此进行了更详细的探讨。图 8(a) 显示，尽管在大多数基准中，使用我们的预取器时 L1 缓存利用率很高，但在 &lt;strong>G500-List&lt;/strong> 中却相对较低。在该应用中，对于较大的顶点，其边链表可能超过 L1 缓存的容量。遍历该链表可能导致预取的数据在使用前因容量缺失（capacity misses）而从缓存中被驱逐，原因可能是：
a) 对同一边链表的后续预取；
b) 对其他数据的预取或加载。&lt;/p>
&lt;p>根本问题在于预取发生得过早，但没有机制可以延迟这些预取。除了在顶点被预取后启动边链表的预取之外，唯一的其他可能点是在实际应用线程开始处理该顶点时启动链表预取。然而，此时已经太晚，因为主线程需要依次处理这些边，导致预取和主应用的加载几乎同步执行（类似于图 2(d) 所示的情况）。&lt;/p>
&lt;p>图 8(b) 显示，尽管如此，&lt;strong>G500-List&lt;/strong> 的 L1 缓存读命中率确实从 0.34 提升到了 0.42，但提升幅度有限。然而，尽管如此，该应用仍然从边链表的提前预取中获得了一定的好处，因为这些边被放置在 L2 缓存中。在这种情况下，L2 缓存的命中率从 0.20 提升到了 0.57。&lt;/p>
&lt;h3 id="analysis-1">Analysis&lt;/h3>
&lt;p>我们现有的可编程预取器配置包含 12 个 PPU，每个 PPU 运行频率为 1GHz，而主内核的运行频率为 3.2GHz。我们现在表明，这实现了大部分好处，并且随着 PPU 数量及其频率的增加，扩展继续进行，因为预取内核是令人尴尬的并行.&lt;/p>
&lt;h4 id="时钟频率">时钟频率&lt;/h4>
&lt;p>图 9 显示了 PPU 时钟频率如何影响各个基准测试，以及减少 PPU 数量的影响。图 9(a) 表明，大约有一半的工作负载在提高 PPU 频率时收益不大。另一方面，&lt;strong>HJ-2&lt;/strong> 需要 500MHz 的频率才能实现其最大加速比，而 &lt;strong>ConjGrad&lt;/strong> 和 &lt;strong>G500-CSR&lt;/strong> 的加速比随着 PPU 频率的提高持续增长。总体来看，大多数性能提升在 1GHz 时已能实现，此时几何平均加速比为 3 倍，而在 2GHz 时略微增加到 3.1 倍。&lt;/p>
&lt;h4 id="ppu-数量">PPU 数量&lt;/h4>
&lt;p>我们在图 9(b) 中探讨了 PPU 频率与 PPU 数量之间的关系，以 &lt;strong>G500-CSR&lt;/strong> 为例，选择了一个随着频率增加而持续扩展的应用。我们将 PPU 频率的上限设为 4GHz，作为一个研究案例，用以评估这种关系；我们并不期望 PPU 的时钟频率达到此值。图中显示，通过将 PPU 数量加倍并将频率减半，能够维持加速比。例如，使用 3 个 PPU 在 2GHz、6 个 PPU 在 1GHz 或 12 个 PPU 在 500MHz 时，都能达到 1.9 倍加速比。运行在 PPU 上的预取内核是高度并行的，因为每次调用都是独立的，因此可以通过增加 PPU 数量或提高其频率来实现扩展。图中还显示，对于该工作负载，性能在 12 个 PPU 和 2GHz 时趋于饱和，进一步增加频率不会带来更多收益。&lt;/p>
&lt;h4 id="ppu-活动">PPU 活动&lt;/h4>
&lt;p>图 10 进一步探讨了在 1GHz 下，12 个 PPU 执行计算时的工作量。该图展示了每个 PPU 在计算过程中保持活跃的时间比例。我们的调度策略是从可用的 PPU 中选择 ID 最低的一个来分配预取工作。这意味着 ID 较低的 PPU 活跃的时间比 ID 较高的 PPU 更多。其他调度策略（如轮询）会将工作更均匀地分配，但不会改变整体性能，也无法进行这种分析。&lt;/p>
&lt;p>当工作负载是预取-计算绑定时，增加更多的 PPU 或提高时钟频率会提升性能（如在 G500-CSR 中）；工作会均匀地分配给 PPU，所有 PPU 都保持忙碌。相比之下，像 PageRank、RandAcc 和 IntSort 这样的基准测试无法充分利用所有 PPU：这些工作负载中至少有一个 PPU 永远不会被唤醒。主要原因是它们仅需简单计算来识别未来的预取目标。这些应用在较慢的 PPU 上或使用较少的 PPU 时，也会达到相似的性能（如图 9(a) 所示）。&lt;/p>
&lt;p>ConjGrad 是一个异常情况，虽然一些 PPU 执行的工作很少，但它依然随着频率的增加而扩展（如图 9(a) 所示）。这种行为的原因是，在 1GHz 时，并没有足够的工作量需要所有 PPU 都活跃，但预取操作略有延迟。因此，当时钟速度增加时，预取计算完成得更早，从而获得了些许额外的性能提升。与此不同的是，G500-CSR 也随着时钟频率的提升而扩展，提升频率可以增加更多的预取操作，从而提高性能。&lt;/p>
&lt;p>没有应用程序的 PPU 是持续运行的：最大活动因子为 0.82。这反映了 PPU 仅在主核心发生事件时才会响应，因此在没有数据需要预取的阶段，它们是不需要的。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 362;
flex-basis: 870px"
>
&lt;a href="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206221444153.png" data-size="1135x313">
&lt;img src="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206221444153.png"
width="1135"
height="313"
srcset="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206221444153_hu12828022374792581116.png 480w, https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206221444153_hu10821685749307673837.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 171;
flex-basis: 410px"
>
&lt;a href="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206221511675.png" data-size="580x339">
&lt;img src="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206221511675.png"
width="580"
height="339"
srcset="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206221511675_hu13434118408429887239.png 480w, https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206221511675_hu3098259951179837835.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 193;
flex-basis: 464px"
>
&lt;a href="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206221521804.png" data-size="584x302">
&lt;img src="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206221521804.png"
width="584"
height="302"
srcset="https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206221521804_hu17229592624111399246.png 480w, https://VastCircle.github.io/2024/an_event_triggered_programmable_prefetcher_for_irregular_workloads/image-20241206221521804_hu17808589098043504456.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="额外内存访问">额外内存访问&lt;/h4>
&lt;p>为了高效执行，减少我们向内存总线添加的额外流量是理想的目标。通常，编程解决方案应该非常高效地进行预取，只针对计算所需的地址进行预取。除了两个 Graph500 基准测试外，其他大多数基准测试的额外访问值是微不足道的：预取非常准确且及时，因此不会预取未使用的数据。G500-List 因为缺乏细粒度并行性而增加了 40% 的额外访问。这是由于链表的基本限制，限制了及时预取，正如第 7.1 节所讨论的那样。G500-CSR 增加了 16% 的额外内存访问，由于每个顶点的工作量不均，预取距离必须相对于 EWMA 被高估&lt;/p>
&lt;h4 id="事件触发">事件触发&lt;/h4>
&lt;p>为了研究我们通过延迟容忍的基于事件的编程模型所获得的性能，我们扩展了系统以支持对用于进一步计算的数据进行加载阻塞：如果预取是链中的最后一个，那么核心将可供调度，但如果不是，必须停顿，因为在没有事件触发的情况下这是必要的。结果如图 11 所示。当访问模式是简单的步幅间接模式时，性能相对接近：我们只需要在步幅访问时停顿，并且通过在单个线程中预取整个缓存行来缓解停顿的开销，从而每 8 次访问就会发生一次停顿。这意味着内存级并行性仍然很高。然而，当访问模式变得复杂时，性能会显著下降。在复杂的访问模式下，停顿会限制甚至完全消除预取带来的性能提升，因此即使有来自十二个核心的大量并行性，延迟容忍事件仍然是系统能够正常工作的必要条件。&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>我们提出了一种可编程预取器，它使用基于事件的编程模型，能够提取内存级并行性并提高各种不规则内存密集型工作负载的性能。在选择图形、数据库和 HPC 工作负载时，我们的预取器在不显着增加内存访问次数的情况下实现了平均 3.0 倍的加速。我们进一步提供了编译器技术，以减少程序员利用我们方案的性能优势的手动工作量，我们提出的两种方案平均加速 1.9 倍和 2.5 倍。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/weixin_49272453/article/details/140990388?spm=1001.2101.3001.6650.1&amp;amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7ECtr-1-140990388-blog-104640587.235%5Ev43%5Epc_blog_bottom_relevance_base1&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7ECtr-1-140990388-blog-104640587.235%5Ev43%5Epc_blog_bottom_relevance_base1&amp;amp;utm_relevant_index=2" target="_blank" rel="noopener"
>哈希表&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/qq_34734303/article/details/79705259" target="_blank" rel="noopener"
>指数移动加权平均法&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Linux移植</title><link>https://VastCircle.github.io/2024/linux%E7%A7%BB%E6%A4%8D/</link><pubDate>Mon, 25 Nov 2024 10:53:14 +0800</pubDate><guid>https://VastCircle.github.io/2024/linux%E7%A7%BB%E6%A4%8D/</guid><description>&lt;h2 id="linux环境搭建的要求">linux环境搭建的要求&lt;/h2>
&lt;p>&lt;strong>1.搭建交叉开发环境&lt;/strong>
需要搭建交叉开发环境在pc机上编译出符合相应嵌入式系统体系结构和指令集的机器码，同时确定目标机和主机的连接方式，搭建数据传输通道。&lt;/p>
&lt;p>一般而言，目标机、主机的连接方式有：&lt;/p>
&lt;p>UART异步串行通信接口
USB串行通信接口
TCP/IP网络通信接口
Debug Jtag调试接口
连接方式的选择将会相应决定需要给SoC增加什么外设。&lt;/p>
&lt;p>&lt;strong>2.移植u-boot&lt;/strong>&lt;/p>
&lt;p>u-boot是一个通用的引导程序，也就是bootloader的一种，它的功能是引导操作系统，即将内核加载到DDR中，而DDR必须要软件进行初始化才能运行，因此在搬运内核之前U-boot还需要初始化内存。U-boot的启动过程分为stage1和stage2两大部分，处理器驱动一般在stage1用汇编语言来实现，这一部分代码位于start.s文件中，实现定义执行入口，设置异常向量，设置中断控制器等功能。而stage2则一般用c语言实现，包括调用一系列初始化函数，初始化SD卡等系统设备。&lt;/p>
&lt;p>&lt;strong>3.Kernel的配置，编译和移植&lt;/strong>&lt;/p>
&lt;p>Kernel本质上也是一个程序，从开始运行一直进入到最后的while(1),内核一旦成功运行，U-boot即完成工作，内核则会一直在内存中运行，直到系统复位重启。内核会根据U-boot传递的参数去指定地址寻找根文件系统rootfs,一旦找到rootfs之后，控制权则会传递给文件系统。&lt;/p>
&lt;p>&lt;strong>4.根文件系统的制作&lt;/strong>&lt;/p>
&lt;p>Linux需要在一个分区上存放系统启动的必要文件，内核启动运行后的第一个程序(init一号进程)、用于挂接文件系统的脚本、shell程序等，这些必要的文件的集合称为根文件系统，根文件系统的制作和移植则是Linux系统移植的最后一部。&lt;/p>
&lt;p>通过上述四个步骤我们可以确定一个能运行Linux系统的SoC最少需要如下外设：&lt;/p>
&lt;p>UART异步串行通信接口：实现目标机和主机交互
Debug Jtag调试接口：这里是根据选择的数据传输通道确定，用于完成程序的加载
BootRom:一小块内存单元，包含处理器在上电或者复位时执行的第一个代码。用来存储引导程序U-boot或者其他外设测试程序，一旦系统上电处理器就会运行BootRom中存储的程序。
SPI接口：与SD卡通讯，搬运存储在SD卡中的Linux内核和根文件系统。
DDR控制器：访问DDR4，用于存储处理器运行过程中产生的数据。&lt;/p>
&lt;h2 id="启动原理">启动原理&lt;/h2>
&lt;h3 id="各级简介">各级简介&lt;/h3>
&lt;p>BootROM：上电后固定首先执行的代码，由芯片厂家烧录，不可更改，可看作硬件初始化状态机的一种实现。它一般进行安全相关的工作，然后从外部存储中加载并启动后级代码。&lt;/p>
&lt;p>U-Boot SPL：SPL（Second Program Loader）的存在是由于U-Boot太大了，无法装在片上SRAM中，只能放在DDR，但DDR又还没有初始化，所以先加载一段简易程序，负责初始化DDR，并加载U-Boot到DDR执行。&lt;/p>
&lt;p>U-Boot：主要负责初始化板上硬件，然后加载并启动操作系统。&lt;/p>
&lt;p>OpenSBI：SBI（Supervisor Binary Interface）是伴随着RISC-V的M态概念而诞生的：利用M态，构建一个特权级在操作系统之上的管理程序，负责处理OS启动引导、M态中断&amp;amp;异常服务、来自S态的系统调用服务等。OpenSBI则是SBI的一个开源实现。&lt;/p>
&lt;p>Linux：一般而言，Linux镜像需要一个dtb镜像和一个可选的initramfs（或initrd）。Linux在启动过程中，会根据设备树提供的信息了解自己所拥有的硬件资源，从而使用正确的驱动操作它们。最终，Linux会运行根文件系统中的某个指定的init程序。作为第一个用户态进程，该进程一般不会退出，是一个死循环。至此启动完成。&lt;/p>
&lt;h2 id="方案">方案&lt;/h2>
&lt;h3 id="平头哥方案">平头哥方案&lt;/h3>
&lt;p>BootROM—&amp;gt;U-Boot SPL—&amp;gt;U-Boot—&amp;gt;OpenSBI—&amp;gt;Linux&lt;/p>
&lt;p>**外部存储：**该方案的外部存储使用eMMC，有三个分区，第一个分区没有安装文件系统，用来存放U-Boot和U-Boot SPL，第二、三个分区分别叫boot和root，都安装了ext4文件系统，其中boot存放Linux镜像、opensbi镜像、&lt;strong>Linux&lt;/strong>设备树镜像、以及（如果需要的话）&lt;a class="link" href="https://zhida.zhihu.com/search?content_id=237033676&amp;amp;content_type=Article&amp;amp;match_order=2&amp;amp;q=initramfs&amp;amp;zhida_source=entity" target="_blank" rel="noopener"
>initramfs&lt;/a>；root中是Linux的根文件系统。&lt;/p>
&lt;p>**运行流程：**U-Boot SPL运行在片上SRAM中，负责初始化DDR，然后从第一个（裸）分区中加载U-Boot镜像到DDR。U-Boot会从boot分区中读取opensbi镜像、Linux镜像、&lt;strong>Linux&lt;/strong>设备树镜像、（如果需要的话）initramfs，分别加载到DDR的特定位置，然后从openSBI开始运行。（强调“&lt;strong>Linux&lt;/strong>”设备树是因为该设备树只是给openSBI和Linux使用，U-Boot及其SPL则使用另一份在编译时分别被链接进它们各自的&lt;a class="link" href="https://zhida.zhihu.com/search?content_id=237033676&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e4%ba%8c%e8%bf%9b%e5%88%b6%e6%96%87%e4%bb%b6&amp;amp;zhida_source=entity" target="_blank" rel="noopener"
>二进制文件&lt;/a>中的设备树。）&lt;/p>
&lt;h3 id="chipyard方案">chipyard方案&lt;/h3>
&lt;p>BootROM—&amp;gt;OpenSBI—&amp;gt;Linux&lt;/p>
&lt;p>**外部存储：**该方案使用SD卡作为外部存储。有两个分区，分区1没有安装文件系统，存放OpenSBI+Linux镜像。之所以这么称呼是因为其OpenSBI使用了payload模式，所以在编译时会将Linux镜像和OpenSBI链接在一起；分区2中是Linux的根文件系统。&lt;/p>
&lt;p>**运行流程：**BootROM将OpenSBI+Linux镜像和设备树镜像加载到DDR指定位置，然后开始运行OpenSBI。在这个方案中，设备树镜像存放在BootROM中。&lt;/p>
&lt;h2 id="u-boot及其spl">U-Boot及其SPL&lt;/h2>
&lt;h3 id="启动汇编">启动汇编&lt;/h3>
&lt;p>初始化（start.S）—&amp;gt;board_init_f()—&amp;gt;清空bss，重定位数据段（start.S）—&amp;gt;board_init_r()，然后board_init_r()函数不返回，直接跳转到U-Boot。我们这里先讲述start.S用于初始化的部分，我把它分为&lt;strong>设置中断&lt;/strong>，&lt;strong>决定启动核&lt;/strong>，&lt;strong>开辟空间&lt;/strong>，&lt;strong>设置gd变量&lt;/strong>4件事。&lt;/p>
&lt;h4 id="设置中断">&lt;strong>设置中断&lt;/strong>&lt;/h4>
&lt;p>在整个U-Boot及其SPL中，mstatus的MIE（全局中断使能）都是关闭的，只是在mie（中断使能寄存器）中打开了MSIE（软件中断使能）。这种情况下，中断是无法trap的（因此赋值给mtvec的函数只是用于异常处理，我们不关心它），然而wfi状态的核心却可以被唤醒，且唤醒之后会执行pc+4的指令。这是wfi指令有趣设定的一部分，详见risc-v手册的wfi指令部分。利用wfi机制，非启动核等待ipi的函数被写成这样（删去了多个&lt;a class="link" href="https://zhida.zhihu.com/search?content_id=237033676&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e6%9d%a1%e4%bb%b6%e7%bc%96%e8%af%91&amp;amp;zhida_source=entity" target="_blank" rel="noopener"
>条件编译&lt;/a>宏）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">secondary_hart_loop&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">wfi&lt;/span> &lt;span style="color:#7f848e">// 等待唤醒
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">csrr&lt;/span> &lt;span style="color:#e06c75">t0&lt;/span>, &lt;span style="color:#61afef;font-weight:bold">MODE_PREFIX&lt;/span>(&lt;span style="color:#e06c75">ip&lt;/span>) &lt;span style="color:#7f848e">// 读mip
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">andi&lt;/span> &lt;span style="color:#e06c75">t0&lt;/span>, &lt;span style="color:#e06c75">t0&lt;/span>, &lt;span style="color:#e06c75">MIE_MSIE&lt;/span> &lt;span style="color:#7f848e">// 判断被唤醒原因
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">beqz&lt;/span> &lt;span style="color:#e06c75">t0&lt;/span>, &lt;span style="color:#e06c75">secondary_hart_loop&lt;/span> &lt;span style="color:#7f848e">// 若唤醒原因不是MSIP，继续wfi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mv&lt;/span> &lt;span style="color:#e06c75">a0&lt;/span>, &lt;span style="color:#e06c75">tp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">jal&lt;/span> &lt;span style="color:#e06c75">handle_ipi&lt;/span> &lt;span style="color:#7f848e">//处理ipi
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些做法实际上也都是risc-v手册中要求的。&lt;/p>
&lt;h4 id="设置gd变量">&lt;strong>设置gd变量&lt;/strong>&lt;/h4>
&lt;p>在启动代码（bootloader，例如 U-Boot）中，&lt;code>gd&lt;/code> 是一个全局变量，指向一个全局数据结构（&lt;code>global_data&lt;/code>）。&lt;/p>
&lt;p>这个结构体通常包含系统运行时的信息，比如内存布局、设备状态等。&lt;/p>
&lt;p>即初始化gd指向的gd_t类型结构体的一些成员。gd变量是gd_t类型结构体的指针，该变量在C语言中声明为“以gp寄存器分派”：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">register&lt;/span> &lt;span style="color:#e5c07b">gd_t&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">gd&lt;/span> &lt;span style="color:#c678dd">asm&lt;/span> (&lt;span style="color:#e06c75">gp&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>汇编中会将从栈中开辟的gd的地址赋值给gp寄存器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">jal&lt;/span> &lt;span style="color:#e06c75">board_init_f_alloc_reserve&lt;/span> &lt;span style="color:#7f848e">// 该函数返回值是指向gd结构体起始的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">mv&lt;/span> &lt;span style="color:#e06c75">gp&lt;/span>, &lt;span style="color:#e06c75">a0&lt;/span> &lt;span style="color:#7f848e">// 赋值给gp寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是，多个核更改gd变量时需要维护一个锁：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/* 摘自每个核分别在gd中注册自己的代码 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 多核处理器初始化：多个核在启动时注册自己到共享数据结构中，防止并发冲突。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">la&lt;/span> &lt;span style="color:#e06c75">t0&lt;/span>, &lt;span style="color:#e06c75">available_harts_lock&lt;/span> &lt;span style="color:#7f848e">// 锁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">li&lt;/span> &lt;span style="color:#e06c75">t1&lt;/span>, &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#e06c75">amoswap&lt;/span>.&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#e06c75">t1&lt;/span>, &lt;span style="color:#e06c75">t1&lt;/span>, &lt;span style="color:#d19a66">0&lt;/span>(&lt;span style="color:#e06c75">t0&lt;/span>) &lt;span style="color:#7f848e">// 获取锁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">fence&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>, &lt;span style="color:#e06c75">rw&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">bnez&lt;/span> &lt;span style="color:#e06c75">t1&lt;/span>, &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#e06c75">b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/* 临界区 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fence&lt;/span> &lt;span style="color:#e06c75">rw&lt;/span>, &lt;span style="color:#e06c75">w&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">amoswap&lt;/span>.&lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#e06c75">zero&lt;/span>, &lt;span style="color:#e06c75">zero&lt;/span>, &lt;span style="color:#d19a66">0&lt;/span>(&lt;span style="color:#e06c75">t0&lt;/span>) &lt;span style="color:#7f848e">// 释放锁
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>完成初始化后，启动核继续执行board_init_f()，其他核进入刚刚分析过的secondary_hart_loop等待ipi。&lt;/p>
&lt;h4 id="设备树与驱动模型httpszhidazhihucomsearchcontent_id237033676content_typearticlematch_order1q驱动模型zhida_sourceentity">设备树与&lt;a class="link" href="https://zhida.zhihu.com/search?content_id=237033676&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e9%a9%b1%e5%8a%a8%e6%a8%a1%e5%9e%8b&amp;amp;zhida_source=entity" target="_blank" rel="noopener"
>驱动模型&lt;/a>&lt;/h4>
&lt;p>board_init_f()在源码中有多处定义。因为平头哥版本专门为ice-c910板写了一个board_init_f()，在board/thead/ice-c910/spl.c中，所以我们基于这个函数来讲解。它主要做了两件事：调用spl_early_init()生成udevice节点，以及调用preloader_console_init()首次初始化串口。本节就介绍第一个函数。&lt;/p>
&lt;p>但在介绍函数的具体操作之前，我们要先了解U-Boot驱动模型。首先，U-Boot驱动模型最终试图对驱动开发者、平台开发者、驱动调用者三方展现的大致接口是这样的：&lt;/p>
&lt;p>（a）&lt;strong>驱动的编写者&lt;/strong>无须考虑运行代码的硬件平台。他们只需知道两点。第一，他们需要在一个可查找到的地方[&lt;a class="link" href="https://zhuanlan.zhihu.com/p/670064991#ref_3" target="_blank" rel="noopener"
>3]&lt;/a>静态定义一个drvier结构体，其中至少要包含诸如**（1）&lt;strong>表示的驱动名字的of_match等字段，&lt;/strong>（2）&lt;strong>指向外设初始化函数的probe字段，&lt;/strong>（3）**指向dm_xxx_ops结构体的指针等。（dm_xxx_ops结构体可以由驱动开发者定义（当然需要将定义告知调用者），其中存放驱动编写者实现的各&lt;a class="link" href="https://zhida.zhihu.com/search?content_id=237033676&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e9%a9%b1%e5%8a%a8%e5%87%bd%e6%95%b0&amp;amp;zhida_source=entity" target="_blank" rel="noopener"
>驱动函数&lt;/a>的指针。）第二，存在一种udevice结构体，每个udevice代表一个可用的设备，其中含有该设备所有信息。而驱动函数每次被调用时，调用者都会传入要操作的设备的udevice。&lt;/p>
&lt;p>（b）&lt;strong>硬件平台的开发者&lt;/strong>无须了解驱动函数的实现，只需用设备树描述设备信息，及用compatible属性指定驱动名字。设备树在启动时传入。&lt;/p>
&lt;p>（c）&lt;strong>驱动函数的调用者&lt;/strong>（调用者可以是U-Boot中其他模块，也可以是App）应当能通过驱动系统提供的udevice查找函数，找到任何udevice。且udevice应当包含一个driver字段，指向对应的driver，从而调用者得以进行“搜索udevice—&amp;gt;索引到其driver—&amp;gt;调用probe()—&amp;gt;调用各驱动函数”的流程。&lt;/p>
&lt;h4 id="移植改动">移植改动&lt;/h4>
&lt;p>移植U-Boot要做的改动。主要有三处。第一，要在include/configs下改动各个宏的值，主要包括SPL级和U-Boot的代码段起始及大小，&lt;a class="link" href="https://zhida.zhihu.com/search?content_id=237190095&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=BSS%e6%ae%b5&amp;amp;zhida_source=entity" target="_blank" rel="noopener"
>BSS段&lt;/a>起始及大小，SPL级MALLOC的起始及大小。另外还能使用CONFIG_EXTRA_ENV_SETTINGS宏指定一些环境变量，例如可以指定自己的启动命令序列。第二，要确保时钟、串口、SPI驱动能用。主要修改设备树和各硬件层ops即可。第三，SPL级的镜像加载函数可以自己写，并使用SPL_LOAD_IMAGE_METHOD宏静态注册。&lt;/p>
&lt;h3 id="opensbi">OpenSBI&lt;/h3>
&lt;p>OpenSBI有两个任务：（1）引导Linux，（2）作为Linux的SBI接口的提供者。其中第二部分将以定时器为例介绍。&lt;/p>
&lt;h4 id="引导linux">引导Linux&lt;/h4>
&lt;p>OpenSBI启动流程大致可以分为fw_base.S—&amp;gt;sbi_init()两个阶段。和我们分6小节讲解。从“平台相关初始化”开始，进入sbi_init()阶段。&lt;/p>
&lt;h5 id="重定位">重定位&lt;/h5>
&lt;p>若编译时定义了FW_PIC make变量，OpenSBI会被编译为无论被加载到哪里都能就地运行的模式。其原理为，定义_link_start变量，其值初始化为FW_TEXT_START，该宏在编译时确定，为代码起始的链接时地址：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>_link_start:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RISCV_PTR FW_TEXT_START
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行时再动态获取代码段起始标号的地址：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>lla t1, _start # 该标号为代码段起始处标号
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这句&lt;a class="link" href="https://zhida.zhihu.com/search?content_id=237190095&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e4%bc%aa%e6%8c%87%e4%bb%a4&amp;amp;zhida_source=entity" target="_blank" rel="noopener"
>伪指令&lt;/a>在-pic参数下会被编译为相对PC寻址：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>lla t1, _start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b8: 00000317 auipc t1,0x0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bc: f4830313 addi t1,t1,-184 # 0 &amp;lt;_fw_start&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>_start 代码段起始的地址 ， _link_start 代码起始的链接时的地址&lt;/p>
&lt;p>意思是_link_start是在链接脚本中假定的加载地址，_start是实际的加载地址，但是_start 是在程序运行时才能够得到的，通过_link_start和_start差值就能够去纠正后续的指令，使得无论程序加载到哪里都能够运行&lt;/p>
&lt;p>本身在链接时程序的加载地址是能够被确定的，但是动态重定位能够使得在不加载到这个地址的情况下还能够正常运行&lt;/p>
&lt;p>也就是说，可以得到该标号真实的加载地址。只要将该地址与_link_start所存地址做差即可得到动态重定位所需的BASE。&lt;/p>
&lt;h5 id="引导信息获取">引导信息获取&lt;/h5>
&lt;p>OpenSBI提供了三类获取引导信息的方法，分别对应jump，dynamic和payload三种模式，使用make变量配置。代码不多但较为零碎，所以这里只做总结。对于每种模式，我们主要关心两个信息的获取：**（1）&lt;strong>如何获取要传递给Linux的dtb（设备树），并知道应当把dtb加载到哪里[&lt;a class="link" href="https://zhuanlan.zhihu.com/p/670769929#ref_8" target="_blank" rel="noopener"
>8]&lt;/a>，&lt;/strong>（2）**如何获取要跳转的地址。&lt;/p>
&lt;p>&lt;strong>jump模式：&lt;/strong>&lt;/p>
&lt;p>通常由引导加载程序（如BootROM）负责，将控制权从OpenSBI转移到下一阶段的操作系统（如Linux）&lt;/p>
&lt;ul>
&lt;li>有三种方式指定要给Linux的dtb，优先级从低到高：**（1）&lt;strong>由BootROM通过a1传入dtb地址；&lt;/strong>（2）&lt;strong>FW_FDT_PATH指定一个dtb编译进OpenSBI镜像；&lt;/strong>（3）**调用由硬件平台开发者定义的fw_platform_init()函数，其中允许修改前二者指定的dtb，或直接指定一个位于其他地址的dtb。&lt;/li>
&lt;li>有两种方式指定应当把dtb加载到哪里，优先级从低到高：**（1）&lt;strong>设备树存在哪里，便放在那里；&lt;/strong>（2）**通过FW_JUMP_FDT_ADDR宏定义要加载到哪里。&lt;/li>
&lt;li>跳转地址通过FW_JUMP_ADDR宏指定。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>dynamic模式：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>指定dtb的方式同上。&lt;/li>
&lt;li>dtb加载位置只能由前级&lt;a class="link" href="https://zhida.zhihu.com/search?content_id=237190095&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e5%bc%95%e5%af%bc%e7%a8%8b%e5%ba%8f&amp;amp;zhida_source=entity" target="_blank" rel="noopener"
>引导程序&lt;/a>通过a1传入。&lt;/li>
&lt;li>跳转地址只能由前级引导程序通过a1传入。a2应当是一个fw_dynamic_info结构体的首地址，该结构体中包含next_addr成员。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>payload模式：&lt;/strong>&lt;/p>
&lt;p>引导程序（如BootROM）通过&lt;code>a1&lt;/code>传递DTB和跳转地址，适用于更动态的引导场景。&lt;/p>
&lt;ul>
&lt;li>指定dtb的方式同上。&lt;/li>
&lt;li>有两种方式指定应当把dtb加载到哪里，优先级从低到高：**（1）&lt;strong>设备树存在哪里，便放在那里；&lt;/strong>（2）**通过FW_PAYLOAD_FDT_ADDR宏定义要加载到哪里。&lt;/li>
&lt;li>因为payload模式将Linux镜像编译进OpenSBI镜像，因此具体的跳转地址由OpenSBI在链接时自动决定。&lt;/li>
&lt;/ul>
&lt;h5 id="中断初始化">中断初始化&lt;/h5>
&lt;p>中断初始化主要包括mtvec，stvec，mstatus的MIE和SIE，sie打开情况，mie打开情况，mideleg代理情况，以及medeleg代理情况。这里总结如下：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://zhida.zhihu.com/search?content_id=237190095&amp;amp;content_type=Article&amp;amp;match_order=2&amp;amp;q=mtvec&amp;amp;zhida_source=entity" target="_blank" rel="noopener"
>mtvec&lt;/a>在fw_base.S中被初始化为_trap_handler。&lt;/li>
&lt;li>stvec在跳转前的最后一个函数sbi_hart_switch_mode()中被设为next_addr，因此若在Linux还未设定stvec之前发生异常，会跳回Linux第一条指令。&lt;/li>
&lt;li>mstatus的MIE在sbi_hart_switch_mode()中使用清空MPP再MRET的方式再跳转时清空，SIE则未设置。注意：MIE虽然不打开，但当hart运行在低特权级时，只要发生被mie打开的M态中断，会无视MIE位跳转回来。&lt;/li>
&lt;li>sie未设置。&lt;/li>
&lt;li>mie未设置。注意：M态各中断一般由SBI服务函数打开。&lt;/li>
&lt;li>mideleg和medeleg在delegate_traps()中被设置。该函数被调用流程如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>sbi_init()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init_coldboot()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sbi_hart_init()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sbi_hart_reinit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delegate_traps()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中代理的中断有SSIP、STIP和SEIP；代理的异常有：取指非对齐，断点，U态ECALL。如果平台定义了SBI_PLATFORM_HAS_MFAULTS_DELEGATION feature，则还会代理指令、load、store的page falut。&lt;/p>
&lt;h5 id="平台相关初始化">平台相关初始化&lt;/h5>
&lt;p>OpenSBI中，硬件平台拥有两个自定义内容：（1）第一，也是最主要的，一个sbi_platform结构体全局变量。该变量必须命名为platform。在启动流程进入sbi_init()前，fw_base.S会初始化一个sbi_scratch结构体，其中存放OpenSBI启动相关的所有信息。platform的地址也会被存入其中，从而在后续启动流程中可以访问它。platform中最关键的成员是platform_ops_addr，它指向一个&lt;a class="link" href="https://zhida.zhihu.com/search?content_id=237190095&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%e5%87%bd%e6%95%b0%e6%8c%87%e9%92%88&amp;amp;zhida_source=entity" target="_blank" rel="noopener"
>函数指针&lt;/a>结构体，其中存放启动流程各步骤中会进行的回调。硬件平台需要定义这些函数。（2）第二，可选的fw_platform_init()函数，如果定义了，该函数会在fw_base.S早期被调用。&lt;/p>
&lt;p>OpenSBI本身自带了一个generic平台。其“通用性”在于，它定义的各个回调中会再执行其他硬件平台的回调：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/* generic平台的回调 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#61afef;font-weight:bold">generic_early_init&lt;/span>(&lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">cold_boot&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/* generic_plat指向另一个平台 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">generic_plat&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">generic_plat&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#e06c75">early_init&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rc&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">generic_plat&lt;/span>&lt;span style="color:#56b6c2">-&amp;gt;&lt;/span>&lt;span style="color:#61afef;font-weight:bold">early_init&lt;/span>(&lt;span style="color:#e06c75">cold_boot&lt;/span>, &lt;span style="color:#e06c75">generic_plat_match&lt;/span>);&lt;span style="color:#7f848e">/* 执行另一个平台的回调 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>具体来说，硬件平台的开发者可以在使用generic平台的基础上，自己定义一个platform_override类型变量，静态注册到special_platforms数组中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">static&lt;/span> &lt;span style="color:#c678dd">const&lt;/span> &lt;span style="color:#c678dd">struct&lt;/span> &lt;span style="color:#e06c75">platform_override&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">special_platforms&lt;/span>[] &lt;span style="color:#56b6c2">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span>&lt;span style="color:#e06c75">sifive_fu540&lt;/span>, &lt;span style="color:#7f848e">// 这是sifive的一个示例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>platform_override包含一个match table和各回调函数指针。match table用于和设备树中的platform匹配，special_platforms[]中第一个匹配成功者被注册为上面看到的generic_plat。匹配和赋值的过程均在generic定义的fw_platform_init()中进行。&lt;/p>
&lt;h5 id="串口初始化">串口初始化&lt;/h5>
&lt;p>串口初始化函数sbi_console_init()被调用流程是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>sbi_init()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init_coldboot()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sbi_console_init()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该函数最终会调用platform的console_init。generic平台中，该函数被赋值为fdt_serial_init()。fdt_serial_init()中会使用设备树的chosen节点的stdout-path属性指定的节点作为控制台，然后在静态定义的serial_drivers[]数组中寻找可匹配的串口。serial_drivers[]数组中的fdt_serial类型元素并非串口驱动，而是只包含match table和init函数。init函数负责解析设备树节点，初始化串口，并调用sbi_console_set_device()将真正的驱动结构体（含有putc()和getc()函数）注册到console_dev变量。OpenSBI中各种输入输出函数均依赖该变量进行输出。所有可用的输入输出函数见include/sbi/sbi_console.h。&lt;/p>
&lt;h5 id="跳转至linux">跳转至Linux&lt;/h5>
&lt;p>跳转主要在sbi_hart_switch_mode()函数中处理，其被调用流程是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>sbi_init()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init_coldboot()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sbi_hart_switch_mode()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>sbi_hart_switch_mode()通过设置好mepc和mstatus.MPP后，执行MRET的方式来跳转。其简略定义如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#61afef;font-weight:bold">__attribute__&lt;/span>((&lt;span style="color:#e06c75">noreturn&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#61afef;font-weight:bold">sbi_hart_switch_mode&lt;/span>(&lt;span style="color:#e5c07b">unsigned&lt;/span> &lt;span style="color:#e5c07b">long&lt;/span> &lt;span style="color:#e06c75">arg0&lt;/span>, &lt;span style="color:#e5c07b">unsigned&lt;/span> &lt;span style="color:#e5c07b">long&lt;/span> &lt;span style="color:#e06c75">arg1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">unsigned&lt;/span> &lt;span style="color:#e5c07b">long&lt;/span> &lt;span style="color:#e06c75">next_addr&lt;/span>, &lt;span style="color:#e5c07b">unsigned&lt;/span> &lt;span style="color:#e5c07b">long&lt;/span> &lt;span style="color:#e06c75">next_mode&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#e06c75">next_virt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">val&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#61afef;font-weight:bold">csr_read&lt;/span>(&lt;span style="color:#e06c75">CSR_MSTATUS&lt;/span>); &lt;span style="color:#7f848e">// read
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">val&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#61afef;font-weight:bold">INSERT_FIELD&lt;/span>(&lt;span style="color:#e06c75">val&lt;/span>, &lt;span style="color:#e06c75">MSTATUS_MPP&lt;/span>, &lt;span style="color:#e06c75">next_mode&lt;/span>); &lt;span style="color:#7f848e">// 将MPP字段设为下一特权级
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">val&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#61afef;font-weight:bold">INSERT_FIELD&lt;/span>(&lt;span style="color:#e06c75">val&lt;/span>, &lt;span style="color:#e06c75">MSTATUS_MPIE&lt;/span>, &lt;span style="color:#d19a66">0&lt;/span>); &lt;span style="color:#7f848e">// MPIE设为0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">csr_write&lt;/span>(&lt;span style="color:#e06c75">CSR_MSTATUS&lt;/span>, &lt;span style="color:#e06c75">val&lt;/span>); &lt;span style="color:#7f848e">// write
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#61afef;font-weight:bold">csr_write&lt;/span>(&lt;span style="color:#e06c75">CSR_MEPC&lt;/span>, &lt;span style="color:#e06c75">next_addr&lt;/span>); &lt;span style="color:#7f848e">// 设置跳转位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">next_mode&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">PRV_S&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">csr_write&lt;/span>(&lt;span style="color:#e06c75">CSR_STVEC&lt;/span>, &lt;span style="color:#e06c75">next_addr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">csr_write&lt;/span>(&lt;span style="color:#e06c75">CSR_SSCRATCH&lt;/span>, &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">csr_write&lt;/span>(&lt;span style="color:#e06c75">CSR_SIE&lt;/span>, &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">csr_write&lt;/span>(&lt;span style="color:#e06c75">CSR_SATP&lt;/span>, &lt;span style="color:#d19a66">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">/* 设置寄存器 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">register&lt;/span> &lt;span style="color:#e5c07b">unsigned&lt;/span> &lt;span style="color:#e5c07b">long&lt;/span> &lt;span style="color:#e06c75">a0&lt;/span> &lt;span style="color:#c678dd">asm&lt;/span>(&lt;span style="color:#98c379">&amp;#34;a0&amp;#34;&lt;/span>) &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">register&lt;/span> &lt;span style="color:#e5c07b">unsigned&lt;/span> &lt;span style="color:#e5c07b">long&lt;/span> &lt;span style="color:#e06c75">a1&lt;/span> &lt;span style="color:#c678dd">asm&lt;/span>(&lt;span style="color:#98c379">&amp;#34;a1&amp;#34;&lt;/span>) &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">arg1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">__asm__&lt;/span> &lt;span style="color:#61afef;font-weight:bold">__volatile__&lt;/span>(&lt;span style="color:#98c379">&amp;#34;mret&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#56b6c2">:&lt;/span> &lt;span style="color:#98c379">&amp;#34;r&amp;#34;&lt;/span>(&lt;span style="color:#e06c75">a0&lt;/span>), &lt;span style="color:#98c379">&amp;#34;r&amp;#34;&lt;/span>(&lt;span style="color:#e06c75">a1&lt;/span>)); &lt;span style="color:#7f848e">// 使用mret跳转
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#61afef;font-weight:bold">__builtin_unreachable&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="xiangshan构建linux">xiangshan构建Linux&lt;/h2>
&lt;h2 id="heading">&lt;/h2>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/qq_30031349/article/details/135368366" target="_blank" rel="noopener"
>玄铁处理器的linux移植&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/zhi-z/EmbeddedLinux/blob/master/Chapter5/README.md" target="_blank" rel="noopener"
>动态重定位&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>使用conda创建一个隔离的环境</title><link>https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8conda%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9A%94%E7%A6%BB%E7%9A%84%E7%8E%AF%E5%A2%83/</link><pubDate>Sun, 24 Nov 2024 21:58:06 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8conda%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9A%94%E7%A6%BB%E7%9A%84%E7%8E%AF%E5%A2%83/</guid><description>&lt;p>在chipyard的build-setup.sh里可以看到它是如何创建一个conda环境的&lt;/p>
&lt;p>具体来说就是通过conda-lock去将一个锁文件里的配置加载到一个conda环境了去，锁文件也是通过脚本generate-conda-lockfiles.sh生成的，所以根本文件是chipyard.yaml的配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># setup and install conda environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> run_step &lt;span style="color:#98c379">&amp;#34;1&amp;#34;&lt;/span>; &lt;span style="color:#c678dd">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># note: lock file must end in .conda-lock.yml - see https://github.com/conda-incubator/conda-lock/issues/154&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">CONDA_REQS&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e06c75">$CYDIR&lt;/span>/conda-reqs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">CONDA_LOCK_REQS&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e06c75">$CONDA_REQS&lt;/span>/conda-lock-reqs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># must match with the file generated by generate-conda-lockfile.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">LOCKFILE&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e06c75">$CONDA_LOCK_REQS&lt;/span>/conda-requirements-&lt;span style="color:#e06c75">$TOOLCHAIN_TYPE&lt;/span>-linux-64.conda-lock.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">[&lt;/span> &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$USE_UNPINNED_DEPS&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span> &lt;span style="color:#56b6c2">]&lt;/span>; &lt;span style="color:#c678dd">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># auto-gen the lockfiles&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">$CYDIR&lt;/span>/scripts/generate-conda-lockfiles.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># use conda-lock to create env&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conda-lock install -p &lt;span style="color:#e06c75">$CYDIR&lt;/span>/.conda-env &lt;span style="color:#e06c75">$LOCKFILE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">source&lt;/span> &lt;span style="color:#e06c75">$CYDIR&lt;/span>/.conda-env/etc/profile.d/conda.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conda activate &lt;span style="color:#e06c75">$CYDIR&lt;/span>/.conda-env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## chipyard.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>channels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ucb-bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - conda-forge
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - litex-hub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - nodefaults
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>platforms:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - linux-64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dependencies:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># https://conda-forge.org/feedstock-outputs/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># filterable list of all conda-forge packages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># https://conda-forge.org/#contribute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># instructions on adding a recipe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># https://docs.conda.io/projects/conda/en/latest/user-guide/concepts/pkg-specs.html#package-match-specifications&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># documentation on package_spec syntax for constraining versions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># handy tool for introspecting package relationships and file ownership&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># see https://github.com/rvalieris/conda-tree&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - conda-tree
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># bundle FireSim driver with deps into installer shell-script&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - constructor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - gcc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - gxx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - sysroot_linux-64&lt;span style="color:#56b6c2">=&lt;/span>2.17 &lt;span style="color:#7f848e"># needed to match pre-built CI XRT glibc version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - conda-gcc-specs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - binutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - dromajo &lt;span style="color:#7f848e"># from ucb-bar channel - https://github.com/riscv-boom/dromajo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">firtool&lt;/span>&lt;span style="color:#56b6c2">==&lt;/span>1.30.0 &lt;span style="color:#7f848e"># from ucb-bar channel - https://github.com/ucb-bar/firtool-feedstock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有部分不存在的就还是通过apt安装&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 262;
flex-basis: 629px"
>
&lt;a href="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8conda%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9A%94%E7%A6%BB%E7%9A%84%E7%8E%AF%E5%A2%83/image-20241125003535087.png" data-size="813x310">
&lt;img src="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8conda%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9A%94%E7%A6%BB%E7%9A%84%E7%8E%AF%E5%A2%83/image-20241125003535087.png"
width="813"
height="310"
srcset="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8conda%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9A%94%E7%A6%BB%E7%9A%84%E7%8E%AF%E5%A2%83/image-20241125003535087_hu12008603055710581184.png 480w, https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8conda%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9A%94%E7%A6%BB%E7%9A%84%E7%8E%AF%E5%A2%83/image-20241125003535087_hu16950151743253815472.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>然后构建脚本&lt;/p>
&lt;p>build-setup.sh&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">USE_UNPINNED_DEPS&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e5c07b">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">CYDIR&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#c678dd">$(&lt;/span>&lt;span style="color:#e5c07b">pwd&lt;/span>&lt;span style="color:#c678dd">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">CONDA_REQS&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e06c75">$CYDIR&lt;/span>/conda-req
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">CONDA_LOCK_REQS&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e06c75">$CONDA_REQS&lt;/span>/conda-lock-reqs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># must match with the file generated by generate-conda-lockfile.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">LOCKFILE&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e06c75">$CONDA_LOCK_REQS&lt;/span>/conda-requirements-linux-64.conda-lock.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">[&lt;/span> &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$USE_UNPINNED_DEPS&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span> &lt;span style="color:#56b6c2">]&lt;/span>; &lt;span style="color:#c678dd">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># auto-gen the lockfiles&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ./generate-conda-lockfiles.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># use conda-lock to create env&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda-lock install -p &lt;span style="color:#e06c75">$CYDIR&lt;/span>/.conda-env &lt;span style="color:#e06c75">$LOCKFILE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">source&lt;/span> &lt;span style="color:#e06c75">$CYDIR&lt;/span>/.conda-env/etc/profile.d/conda.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda activate &lt;span style="color:#e06c75">$CYDIR&lt;/span>/.conda-env
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>generate-conda-lockfiles.sh&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">set&lt;/span> -ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">CUR_DIR&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#c678dd">$(&lt;/span> &lt;span style="color:#e5c07b">cd&lt;/span> -- &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#c678dd">$(&lt;/span> dirname -- &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">BASH_SOURCE&lt;/span>[0]&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span> &lt;span style="color:#c678dd">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span> &amp;amp;&amp;gt; /dev/null &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">pwd&lt;/span> &lt;span style="color:#c678dd">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">REQS_DIR&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$CUR_DIR&lt;/span>&lt;span style="color:#98c379">/conda-req&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">[&lt;/span> ! -d &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$REQS_DIR&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">]&lt;/span>; &lt;span style="color:#c678dd">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">echo&lt;/span> &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$REQS_DIR&lt;/span>&lt;span style="color:#98c379"> does not exist, make sure you&amp;#39;re calling this script from xs-env/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">exit&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p &lt;span style="color:#e06c75">$REQS_DIR&lt;/span>/conda-lock-reqs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># note: lock file must end in .conda-lock.yml - see https://github.com/conda-incubator/conda-lock/issues/154&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">LOCKFILE&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e06c75">$REQS_DIR&lt;/span>/conda-lock-reqs/conda-requirements-linux-64.conda-lock.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda-lock -f &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$REQS_DIR&lt;/span>&lt;span style="color:#98c379">/xs-env.yaml&amp;#34;&lt;/span> -p linux-64 --lockfile &lt;span style="color:#e06c75">$LOCKFILE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>使用Tilelink实现缓存一致性（cache conherence）</title><link>https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/</link><pubDate>Fri, 22 Nov 2024 16:29:39 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/</guid><description>&lt;h2 id="概述">概述&lt;/h2>
&lt;p>TileLink Cached (TL-C) 协议通过为主设备提供缓存共享数据块副本的能力，完善了 TileLink 协议。这些本地缓存副本必须根据实现定义的一致性策略保持一致性。本章节定义的 TL-C 标准一致性协议规定了哪些内存访问操作可以对缓存数据的副本执行，以及哪些消息可用于传输数据块的副本。实现中叠加的一致性策略则规定了在接收到内存访问操作后，如何在特定的 TileLink 代理网络中传播副本和权限。具体一致性策略的描述超出了本文档的范围。&lt;/p>
&lt;p>总的来说，TL-C 在 TileLink 协议规范中增加了以下内容：&lt;/p>
&lt;ul>
&lt;li>三种新操作&lt;/li>
&lt;li>三个新通道&lt;/li>
&lt;li>一种新的五步消息序列模板&lt;/li>
&lt;li>十种新消息类型&lt;/li>
&lt;/ul>
&lt;p>新增的操作是用于创建或删除数据块缓存副本的传输操作。这些传输操作不会修改数据块的值，而是转移副本的读/写权限。传输操作与之前定义的 TL-UL 和 TL-UH 内存访问操作无缝协作，且二者在顺序上是串行化的。因为每个传输操作逻辑上要么发生在内存访问操作之前，要么发生在之后，并且所有代理对这种顺序一致认可，因此在 TileLink 网络中保持了一致性不变量。&lt;/p>
&lt;p>当内存访问操作通过 TileLink 网络时，中间缓存可能在其中嵌套递归传输操作。缓存通过首先使用传输操作获得数据块的足够权限，然后利用其一致的本地副本来处理内存访问操作。&lt;/p>
&lt;p>地址的“可缓存性”是一个属性，TileLink 的实现必须防止创建不可缓存地址的副本（见第 6.3 节）。相反，之前在 TL-UL 和 TL-UH 中定义的内存访问操作可以被主设备用来访问可缓存地址，而无需自行缓存它们。某些主设备可能选择缓存某个数据块，而同一内存层级中的其他主设备可能选择不缓存。&lt;/p>
&lt;p>下一节将概述可供设计者用于定义特定实现依赖一致性策略的基本操作、消息和权限。该规范并未强制使用某一种特定策略，而是定义了一个可供构建策略的协议基础。&lt;/p>
&lt;h2 id="使用-tilelink-实现缓存一致性">使用 TileLink 实现缓存一致性&lt;/h2>
&lt;p>所有基于Tilelink的一致性协议都由传输权限以读取和写入数据块的副本组成。内存访问操作需要agent获取正确的权限，然后agent才能将访问操作应用于缓存的副本。当agent想要在本地处理访问操作时，必须首先使用**传输操作(Transfer operations)**来获取必要的权限。传输操作通过网络创建或删除副本，从而修改每个副本提供的权限。&lt;/p>
&lt;p>代理的块副本拥有权限，“None&amp;quot;,&amp;ldquo;Read&amp;rdquo;,&amp;ldquo;Read+Write&amp;rdquo;。对于任何给定地址，任何给定master和拥有该地址的slave之间只有一条路径。当所有此类路径覆盖在 TileLink 网络 DAG 上时，它们会形成一棵树，其根为单个从属路径。对于每个地址，该树包含所有针对该地址的操作执行的路径。如果我们删除所有不能缓存数据的代理，我们就会留下一棵&lt;strong>缓存代理树&lt;/strong>，描述可能缓存特定地址数据的所有位置。&lt;/p>
&lt;p>在逻辑时间的任何给定时刻，这些代理的某些子集实际上包含缓存数据的副本。这些代理形成了 CoherenceTree。包容性的 TileLink 一致性协议要求&lt;strong>树根据内存访问操作而增长和收缩&lt;/strong>。图中的每个节点都属于描述其在树上位置的四个类别之一：&lt;/p>
&lt;p>Nothing: 当前不缓存数据副本的节点。既没有读权限，也没有写权限。&lt;/p>
&lt;p>Trunk :具有缓存副本的节点，位于 Tip 和 Root 之间的路径上。对副本既没有读权限，也没有写权限。对于提示处发生的写入，该副本可能已过时。&lt;/p>
&lt;p>Tip（with no Branches）:具有缓存副本的节点，用作内存访问序列化点。对其副本具有读/写权限，该副本可能包含脏数据。&lt;/p>
&lt;p>Tip（with Branches）:具有缓存副本的节点，用作写入序列化点。对其副本具有读取和写入权限，该副本可能包含过去写入的脏数据。&lt;/p>
&lt;p>Branch: 具有位于提示上方的缓存副本的节点。对其副本具有只读权限。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 421;
flex-basis: 1012px"
>
&lt;a href="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20250107233542448.png" data-size="873x207">
&lt;img src="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20250107233542448.png"
width="873"
height="207"
srcset="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20250107233542448_hu12233268822795284868.png 480w, https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20250107233542448_hu12825668928755378385.png 1024w"
loading="lazy"
alt="image-20250107233542448">
&lt;/a>
&lt;figcaption>image-20250107233542448&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 149;
flex-basis: 357px"
>
&lt;a href="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122165832557.png" data-size="480x322">
&lt;img src="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122165832557.png"
width="480"
height="322"
srcset="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122165832557_hu5086166827793620406.png 480w, https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122165832557_hu5752016001538414188.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>“TT”代 表 Trunk Tip，“T”代 表 Trunk，“B”代表Branch。&lt;/p>
&lt;p>A：根对唯一副本具有写+读权限。&lt;/p>
&lt;p>B：单个master对trunktip有写+读权限。&lt;/p>
&lt;p>C：多个master对分支有读权限。&lt;/p>
&lt;p>D：多个master对分支有读权限，部分分支被剪枝&lt;/p>
&lt;p>一致性树按照内存、L3、L2、L1的顺序自下而上生长，内存作为根节点拥有可读可写的权限，在每一层中子节点的权限都不能超过父节点的权限。其中TT代表拥有T权限的枝杈上的叶子节点，说明该节点上层只有N或B权限，相反T权限而不是TT权限的节点代表上层一定还有T/TT权限节点。&lt;/p>
&lt;h3 id="operation">operation&lt;/h3>
&lt;p>three new operations are termed transfer operations (move permissions or cached copied of data through the network)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 285;
flex-basis: 684px"
>
&lt;a href="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122170916836.png" data-size="762x267">
&lt;img src="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122170916836.png"
width="762"
height="267"
srcset="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122170916836_hu16902930323023380423.png 480w, https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122170916836_hu16357757267193371021.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>Acquire&lt;/strong>&lt;/p>
&lt;p>在请求的主设备中创建数据块的新副本（或特定权限）。&lt;/p>
&lt;p>&lt;strong>Release&lt;/strong>&lt;/p>
&lt;p>将数据块的副本（或特定权限）从请求的主设备返还给从设备。&lt;/p>
&lt;p>&lt;strong>Probe&lt;/strong>&lt;/p>
&lt;p>强制从主设备移除数据块的副本（或特定权限），并交给请求的从设备。&lt;/p>
&lt;p>获取（Acquire）操作通过延伸主干或从现有分支或末端添加新分支来扩展树结构。为了实现这一点，可能需要通过递归探测（Probe）操作修剪旧的主干或分支，才能生长新的分支。释放（Release）操作则通过自愿缩减树结构来修剪树，通常是为了响应缓存容量冲突。&lt;/p>
&lt;h3 id="channels">Channels&lt;/h3>
&lt;p>&lt;strong>通道 A&lt;/strong>
master发起获取读取或写入缓存数据块副本的权限。&lt;/p>
&lt;p>&lt;strong>通道 B&lt;/strong>
slave查询或修改master在缓存数据块上的权限，或将内存访问请求转发给master。&lt;/p>
&lt;p>&lt;strong>通道 C&lt;/strong>
master确认通道 B 消息，可能会释放数据块上的权限以及任何脏数据。也用于自愿回写脏缓存数据。&lt;/p>
&lt;p>&lt;strong>通道 D&lt;/strong>&lt;/p>
&lt;p>slave向原始请求者提供数据或权限，授予访问缓存数据块的权限。也用于确认脏数据的自愿回写。&lt;/p>
&lt;p>&lt;strong>通道 E&lt;/strong>
master提供交易完成的最终确认，用于slave进行交易序列化。&lt;/p>
&lt;h3 id="tl-c-messages">TL-C Messages&lt;/h3>
&lt;p>包含三个操作的十个消息&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 216;
flex-basis: 519px"
>
&lt;a href="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122172128627.png" data-size="758x350">
&lt;img src="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122172128627.png"
width="758"
height="350"
srcset="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122172128627_hu1586931982977865012.png 480w, https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122172128627_hu15490960147174014980.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="permissions-transitons">Permissions Transitons&lt;/h3>
&lt;p>传输在逻辑上对权限进行操作，因此包含它们的消息必须指定预期结果：&lt;strong>升级到更多权限、降级到更少权限或保持权限不变的无操作&lt;/strong>。这些变化是根据它们对特定地址的一致性树的形状的影响来指定的。我们将可能的权限转换集分为六个子集；不同的子集可用作某些消息的参数，如下小节中所定义。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 335;
flex-basis: 804px"
>
&lt;a href="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122172845164.png" data-size="758x226">
&lt;img src="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122172845164.png"
width="758"
height="226"
srcset="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122172845164_hu11380476503169813060.png 480w, https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122172845164_hu876807239002810646.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>Prune&lt;/strong> 包括权限降级操作，缩小树结构，并记录先前的权限和新的较低权限。&lt;/p>
&lt;p>&lt;strong>Grow&lt;/strong> 包括权限升级操作，扩展树结构，并记录先前的权限和新的较高权限。&lt;/p>
&lt;p>&lt;strong>Report&lt;/strong> 包括不进行操作的情况，其中权限保持不变，但报告当前的权限状态。&lt;/p>
&lt;p>&lt;strong>Cap&lt;/strong> 包括权限变更操作，不指定原始权限是什么，而是只说明它们应该变成什么&lt;/p>
&lt;h2 id="flows-and-waves">Flows and Waves&lt;/h2>
&lt;p>下图概括了3个新流程，Acquire总是触发a recursive Grant request and GrantAck response。根据块权限的状态和一致性策略，Acquire 也能触发一个或者多个Release or Probe operations.黑点的移动表明事务序列化点已受到该操作的影响。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 284;
flex-basis: 681px"
>
&lt;a href="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122182809833.png" data-size="861x303">
&lt;img src="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122182809833.png"
width="861"
height="303"
srcset="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122182809833_hu10573803865363368663.png 480w, https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122182809833_hu4050188003432519117.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>下图显示了一个消息流，该消息流更详细地说明了包含所有三个新操作的事务。在此流程中，&lt;strong>主设备通过获取在目标数据块的本地副本中读取或写入数据的许可来对存储器访问操作请求做出反应&lt;/strong>。此事务完成后，主节点已获得读取或写入缓存块以及该块数据的副本的权限。其他主机被probed，迫使他们释放对该块的权限并写回其拥有的脏数据。此外，发出 Acquire 的 master 还使用 Release 来自愿释放其对缓存块的权限。通常，&lt;strong>当高速缓存必须逐出包含脏数据的块，以便用重新填充到高速缓存中的块替换它时&lt;/strong>，就会发生这种类型的事务。此事务完成后，&lt;strong>主服务器将失去读取或写入第二个缓存块及其数据副本的权限&lt;/strong>。如果从属设备能够使用目录跟踪哪些主设备拥有该块的副本，则此元数据已更新以反映两个块的权限更改。l&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 71;
flex-basis: 170px"
>
&lt;a href="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122183427417.png" data-size="530x745">
&lt;img src="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122183427417.png"
width="530"
height="745"
srcset="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122183427417_hu2483982651560567251.png 480w, https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122183427417_hu3962498415780453785.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>把master1 看成l1,slave看成l2&lt;/p>
&lt;p>1.缓存主设备向从设备发送 Acquire&lt;/p>
&lt;p>2.为了为预期的响应腾出空间，同一个主设备发送 Release&lt;/p>
&lt;p>3.从设备与后备存储(backing memory)通信（如果需要）&lt;/p>
&lt;p>4.从设备使用 ReleaseAck 确认写回事务完成&lt;/p>
&lt;p>5.从设备还向其他主设备发送必要的 Probes。&lt;/p>
&lt;p>6.从设备等待接收每个发送的 Probe 的 ProbeAck&lt;/p>
&lt;p>7.从设备与后备存储通信（如果需要）。&lt;/p>
&lt;p>8.从设备向原始请求者发送 Grant&lt;/p>
&lt;p>9.原始主设备通过 GrantAck 响应，从而完成事务。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 261;
flex-basis: 627px"
>
&lt;a href="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122184700989.png" data-size="876x335">
&lt;img src="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122184700989.png"
width="876"
height="335"
srcset="https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122184700989_hu840340175533663251.png 480w, https://VastCircle.github.io/2024/%E4%BD%BF%E7%94%A8tilelink%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241122184700989_hu10357549498107321375.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>TileLink 协议基于三个消息流：&lt;strong>Acquire&lt;/strong>、&lt;strong>Release&lt;/strong> 和 &lt;strong>Grant&lt;/strong>（或类似的），这些流构成了所有涉及缓存块传输的事务基础。然而，当这些流在时间上交错或层次上组合时，会出现一些边界情况。接下来讨论的是 &lt;strong>主设备&lt;/strong> 和 &lt;strong>从设备&lt;/strong> 之间如&lt;strong>何分配并发管理的责任&lt;/strong>。&lt;/p>
&lt;p>TileLink 协议并不假定存在点对点的有序消息传递。实际上，高优先级的消息可以绕过低优先级的消息，即使它们的目标是同一个设备。这意味着，&lt;strong>从设备&lt;/strong> 充当了一个便利的同步点，所有与它连接的 &lt;strong>主设备&lt;/strong> 都通过它来协调消息流。&lt;/p>
&lt;p>由于每个事务必须通过向从设备发送 &lt;strong>Acquire&lt;/strong> 消息来发起，因此从设备能够方便地对事务进行排序。&lt;strong>一个非常安全的实现方式是让从设备一次只接受一个事务&lt;/strong>，但是这样做的性能影响非常严重，因此实际上我们可以通过限制代理行为，依然保持正确的事务顺序，同时提高并发性。&lt;/p>
&lt;p>通过对代理行为施加一些限制，我们能够保证即使问题是分布式的，也能够构建出事务的总顺序。图 28 提供了关于每种操作并发性限制的概述。&lt;/p>
&lt;p>TileLink 代理的并发限制最容易通过发起或阻止请求消息来理解。每个请求消息都会生成响应消息，而响应消息最终都能向前推进。但是，在某些条件下，&lt;strong>针对同一数据块的递归请求消息&lt;/strong> 在未接收到未处理的响应消息之前，不应被发出。&lt;/p>
&lt;p>&lt;strong>Acquire（获取）&lt;/strong>
主设备如果该块上有挂起的Grant（授权），则不应发起Acquire请求。发起Acquire后，主设备在收到Grant之前，不应再对该块发起其他Acquire请求。&lt;/p>
&lt;p>&lt;strong>Grant（授权）&lt;/strong>
从设备如果该块上有挂起的ProbeAck（探针确认），则不应发起Grant授权。一旦发出Grant授权，从设备在收到GrantAck（授权确认）之前，不应对该块发起进一步的Probe请求。&lt;/p>
&lt;p>&lt;strong>Release（释放）&lt;/strong>
主设备如果该块上有挂起的Grant授权，则不应发起Release请求。发出Release后，主设备在收到Slave确认完成写回的ReleaseAck之前，不应再发起ProbeAcks、Acquires或其他Release请求。&lt;/p>
&lt;p>&lt;strong>Probe（探针）&lt;/strong>
从设备如果该块上有挂起的GrantAck授权确认，则不应发起Probe请求。一旦发出Probe请求，从设备在收到ProbeAck（探针确认）之前，不应对该块发起进一步的Probe请求。&lt;/p>
&lt;p>总而言之就是如果有*ack的话，就不要发起*&lt;/p>
&lt;p>未完&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>tilelink_spec_1.8.1&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Cache缓存一致性</title><link>https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/</link><pubDate>Tue, 19 Nov 2024 20:03:48 +0800</pubDate><guid>https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/</guid><description>&lt;h2 id="多核心的一致性问题">多核心的一致性问题&lt;/h2>
&lt;p>在一个核心修改Cache数据后，如何同步给其他核心Cache&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 86;
flex-basis: 208px"
>
&lt;a href="https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119200747138.png" data-size="479x552">
&lt;img src="https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119200747138.png"
width="479"
height="552"
srcset="https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119200747138_hu8859657908439870834.png 480w, https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119200747138_hu16115704290875044832.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>1、Core 1 和 Core 2 读取了同一个内存块的数据，在两个 Core 都缓存了一份内存块的副本。此时，Cache 和内存块是一致的；&lt;/p>
&lt;p>2、Core 1 执行内存写入操作：&lt;/p>
&lt;ul>
&lt;li>2.1 在写直达策略中，新数据会直接写回内存，此时，Cache 和内存块一致。但由于之前 Core 2 已经读过这块数据，所以 Core 2 缓存的数据还是旧的。此时，Core 1 和 Core 2 不一致；&lt;/li>
&lt;li>2.2 在写回策略中，新数据会延迟写回内存，此时 Cache 和内存块不一致。不管 Core 2 之前有没有读过这块数据，Core 2 的数据都是旧的。此时，Core 1 和 Core 2 不一致。&lt;/li>
&lt;/ul>
&lt;p>3、由于 Core 2 无法感知到 Core 1 的写入操作，如果继续使用过时的数据，就会出现逻辑问题。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 109;
flex-basis: 263px"
>
&lt;a href="https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119201015873.png" data-size="966x881">
&lt;img src="https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119201015873.png"
width="966"
height="881"
srcset="https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119201015873_hu6923358146467998283.png 480w, https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119201015873_hu12186972397446442816.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>需要一种机制，将多个核心的工作联合起来，共同保证多个核心下Cache一致性&lt;/p>
&lt;h3 id="41-写传播--事务串行化">4.1 写传播 &amp;amp; 事务串行化&lt;/h3>
&lt;p>缓存一致性机制需要解决的问题就是 2 点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>特性 1 - 写传播（Write Propagation）：&lt;/strong> 每个 CPU 核心的写入操作，需要传播到其他 CPU 核心；&lt;/li>
&lt;li>&lt;strong>特性 2 - 事务串行化（Transaction Serialization）：&lt;/strong> 各个 CPU 核心所有写入操作的顺序，在所有 CPU 核心看起来是一致。&lt;/li>
&lt;/ul>
&lt;p>第 1 个特性解决了 “感知” 问题，如果一个核心修改了数据，就需要同步给其它核心，很好理解。但只做到同步还不够，如果各个核心收到的同步信号顺序不一致，那最终的同步结果也会不一致。&lt;/p>
&lt;p>举个例子：假如 CPU 有 4 个核心，Core 1 将共享数据修改为 1000，随后 Core 2 将共享数据修改为 2000。在写传播下，“修改为 1000” 和 “修改为 2000” 两个事务会同步到 Core 3 和 Core 4。但是，如果没有事务串行化，不同核心收到的事务顺序可能是不同的，最终数据还是不一致&lt;/p>
&lt;h3 id="42-总线嗅探--总线仲裁">4.2 总线嗅探 &amp;amp; 总线仲裁&lt;/h3>
&lt;p>写传播和事务串行化在 CPU 中是如何实现的呢？&lt;/p>
&lt;ul>
&lt;li>&lt;strong>写传播 - 总线嗅探：&lt;/strong> 总线除了能在一个主模块和一个从模块之间传输数据，还支持一个主模块对多个从模块写入数据，这种操作就是广播。要实现写传播，其实就是将所有的读写操作广播到所有 CPU 核心，而其它 CPU 核心时刻监听总线上的广播，再修改本地的数据；&lt;/li>
&lt;li>&lt;strong>事务串行化 - 总线仲裁：&lt;/strong> 总线的独占性要求同一时刻最多只有一个主模块占用总线，天然地会将所有核心对内存的读写操作串行化。如果多个核心同时发起总线事务，此时总线仲裁单元会对竞争做出仲裁，未获胜的事务只能等待获胜的事务处理完成后才能执行&lt;/li>
&lt;/ul>
&lt;h3 id="mesi协议">MESI协议&lt;/h3>
&lt;p>MESI 协议其实是 CPU Cache 的有限状态机，一共有 4 个状态（MESI 就是状态的首字母）：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>M（Modified，已修改）：&lt;/strong> 表明 Cache 块被修改过，但未同步回内存；&lt;/li>
&lt;li>&lt;strong>E（Exclusive，独占）：&lt;/strong> 表明 Cache 块被当前核心独占，而其它核心的同一个 Cache 块会失效；&lt;/li>
&lt;li>&lt;strong>S（Shared，共享）：&lt;/strong> 表明 Cache 块被多个核心持有且都是有效的；&lt;/li>
&lt;li>&lt;strong>I（Invalidated，已失效）：&lt;/strong> 表明 Cache 块的数据是过时的。&lt;/li>
&lt;/ul>
&lt;p>在 “独占” 和 “共享” 状态下，Cache 块的数据是 “清” 的，任何读取操作可以直接使用 Cache 数据；&lt;/p>
&lt;p>在 “已失效” 和 “已修改” 状态下，Cache 块的数据是 “脏” 的，它们和内存的数据都可能不一致。在读取或写入 “已失效” 数据时，需要先将其它核心 “已修改” 的数据写回内存，再从内存读取；&lt;/p>
&lt;p>在 “共享” 和 “已失效” 状态，核心没有获得 Cache 块的独占权（锁）。在修改数据时不能直接修改，而是要先向所有核心广播 &lt;strong>RFO（Request For Ownership）请求&lt;/strong> ，将其它核心的 Cache 置为 “已失效”，等到获得回应 ACK 后才算获得 Cache 块的独占权。这个独占权这有点类似于开发语言层面的锁概念，在修改资源之前，需要先获取资源的锁；&lt;/p>
&lt;p>在 “已修改” 和 “独占” 状态下，核心已经获得了 Cache 块的独占权（锁）。在修改数据时不需要向总线发送广播，能够减轻总线的通信压力。&lt;/p>
&lt;p>事实上，完整的 MESI 协议更复杂，但我们没必要记得这么细。我们只需要记住最关键的 2 点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>关键 1 - 阻止同时有多个核心修改的共享数据：&lt;/strong> 当一个 CPU 核心要求修改数据时，会先广播 RFO 请求获得 Cache 块的所有权，并将其它 CPU 核心中对应的 Cache 块置为已失效状态；&lt;/li>
&lt;li>&lt;strong>关键 2 - 延迟回写：&lt;/strong> 只有在需要的时候才将数据写回内存，当一个 CPU 核心要求访问已失效状态的 Cache 块时，会先要求其它核心先将数据写回内存，再从内存读取。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>提示：&lt;/strong> MESI 协议在 MSI 的基础上增加了 E（独占）状态，以减少只有一份缓存的写操作造成的总线通信。&lt;/p>
&lt;/blockquote>
&lt;p>MESI 协议有一个非常 nice 的在线体验网站，你可以对照文章内容，在网站上操作指令区，并观察内存和缓存的数据和状态变化。网站地址：&lt;a class="link" href="https://link.juejin.cn?target=https%3A%2F%2Fwww.scss.tcd.ie%2FJeremy.Jones%2FVivioJS%2Fcaches%2FMESI.htm" target="_blank" rel="noopener"
>www.scss.tcd.ie/Jeremy.Jone…&lt;/a>&lt;/p>
&lt;h3 id="44-写缓冲区--失效队列">4.4 写缓冲区 &amp;amp; 失效队列&lt;/h3>
&lt;p>MESI 协议保证了 Cache 的一致性，但完全地遵循协议会影响性能。 &lt;strong>因此，现代的 CPU 会在增加写缓冲区和失效队列将 MESI 协议的请求异步化，以提高并行度：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>写缓冲区（Store Buffer）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>由于在写入操作之前，CPU 核心 1 需要先广播 RFO 请求获得独占权，在其它核心回应 ACK 之前，当前核心只能空等待，这对 CPU 资源是一种浪费。因此，现代 CPU 会采用 “写缓冲区” 机制：写入指令放到写缓冲区后并发送 RFO 请求后，CPU 就可以去执行其它任务，等收到 ACK 后再将写入操作写到 Cache 上。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>失效队列（Invalidation Queue）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>由于其他核心在收到 RFO 请求时，需要及时回应 ACK。但如果核心很忙不能及时回复，就会造成发送 RFO 请求的核心在等待 ACK。因此，现代 CPU 会采用 “失效队列” 机制：先把其它核心发过来的 RFO 请求放到失效队列，然后直接返回 ACK，等当前核心处理完任务后再去处理失效队列中的失效请求。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 228;
flex-basis: 547px"
>
&lt;a href="https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119211246853.png" data-size="965x423">
&lt;img src="https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119211246853.png"
width="965"
height="423"
srcset="https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119211246853_hu1710129307728401682.png 480w, https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119211246853_hu14466563398141908026.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>事实上，写缓冲区和失效队列破坏了 Cache 的一致性&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Core1&lt;/span> 指令
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>; &lt;span style="color:#7f848e">// A1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>; &lt;span style="color:#7f848e">// A2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">Core2&lt;/span> 指令
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>; &lt;span style="color:#7f848e">// B1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">y&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>; &lt;span style="color:#7f848e">// B2
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为写缓存区和失效队列允许在当前指令未完成的时候CPU继续去运行，所有就可能会破坏指令的执行顺序&lt;/p>
&lt;p>就像下面A2读取的是没有写入的数据，但是这样其实只要能够从写缓存区和Cache中去读取就行了，问题不是特别大&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 87;
flex-basis: 210px"
>
&lt;a href="https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119212044637.png" data-size="674x768">
&lt;img src="https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119212044637.png"
width="674"
height="768"
srcset="https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119212044637_hu6056146283943612503.png 480w, https://VastCircle.github.io/2024/cache%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/image-20241119212044637_hu17215698839149366704.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://juejin.cn/post/7158395475362578462" target="_blank" rel="noopener"
>12图看懂CPU缓存一致性问题&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Cache</title><link>https://VastCircle.github.io/2024/cache/</link><pubDate>Sat, 16 Nov 2024 16:00:54 +0800</pubDate><guid>https://VastCircle.github.io/2024/cache/</guid><description>&lt;h2 id="cache的一般设计">Cache的一般设计&lt;/h2>
&lt;p>Cache line = Cache data block + Cache Tag ,如果一个数据可以存储在Cache中的多个地方,能够被同一个地址找到的多个Cache Line 称为Cache Set&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 124;
flex-basis: 299px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116160826859.png" data-size="641x513">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116160826859.png"
width="641"
height="513"
srcset="https://VastCircle.github.io/2024/cache/image-20241116160826859_hu1332369990589390405.png 480w, https://VastCircle.github.io/2024/cache/image-20241116160826859_hu18064085407264266732.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>Cache缺失的原因(3C定理:&lt;/p>
&lt;p>(1)Compulsory , 第一次访问的指令或数据肯定不会在Cache中,&lt;/p>
&lt;p>(2)Capcity,容量,&lt;/p>
&lt;p>(3)Conflict,冲突&lt;/p>
&lt;h3 id="cache的组成方式">Cache的组成方式&lt;/h3>
&lt;h4 id="直接相连">直接相连&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 125;
flex-basis: 300px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116161412680.png" data-size="423x338">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116161412680.png"
width="423"
height="338"
srcset="https://VastCircle.github.io/2024/cache/image-20241116161412680_hu2800656703488485149.png 480w, https://VastCircle.github.io/2024/cache/image-20241116161412680_hu12292938691630876810.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="组相联">组相联&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 432px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116161438353.png" data-size="632x351">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116161438353.png"
width="632"
height="351"
srcset="https://VastCircle.github.io/2024/cache/image-20241116161438353_hu11565796626120221971.png 480w, https://VastCircle.github.io/2024/cache/image-20241116161438353_hu7354851681176083980.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h5 id="并行访问和串行访问">并行访问和串行访问&lt;/h5>
&lt;p>&lt;strong>并行访问&lt;/strong>&lt;/p>
&lt;p>当Tag的地址被读取的同时,Data部分的所有数据也能够被读出来,送到一个多路选择器中,这个多路选择器受到Tag比较结果的控制,选出对应的Data block,然后根据Block offset的值,选择合适的字节,选择字节的过程称为数据对齐(Data Alignment)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 163;
flex-basis: 391px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116162035130.png" data-size="579x355">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116162035130.png"
width="579"
height="355"
srcset="https://VastCircle.github.io/2024/cache/image-20241116162035130_hu1245071803936278610.png 480w, https://VastCircle.github.io/2024/cache/image-20241116162035130_hu18277916102578682986.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>对于i-cache,流水线的结构不会有太大的影响,可以实现每周期读取指令,因为读取指令本身就是连续的,但是对于D-cache,会增大load的延时&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 165;
flex-basis: 397px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116162505527.png" data-size="622x376">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116162505527.png"
width="622"
height="376"
srcset="https://VastCircle.github.io/2024/cache/image-20241116162505527_hu15060017127470534791.png 480w, https://VastCircle.github.io/2024/cache/image-20241116162505527_hu14573293114003113365.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>串行访问&lt;/strong>&lt;/p>
&lt;p>首先访问Tag SRAM,根据Tag比较的结果,直接去访问对应的way ,这样就不需要多路选择器了,可以节省功耗&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 144;
flex-basis: 345px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116163105148.png" data-size="553x384">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116163105148.png"
width="553"
height="384"
srcset="https://VastCircle.github.io/2024/cache/image-20241116163105148_hu16397395133458991088.png 480w, https://VastCircle.github.io/2024/cache/image-20241116163105148_hu9558830123433454204.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>相比于并行会增加一个周期,但是它也降低了同时访问Tag SRAM和Data RAM的延迟&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 191;
flex-basis: 459px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116163140291.png" data-size="674x352">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116163140291.png"
width="674"
height="352"
srcset="https://VastCircle.github.io/2024/cache/image-20241116163140291_hu11023120944439539204.png 480w, https://VastCircle.github.io/2024/cache/image-20241116163140291_hu7334958423253631261.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="全相连">全相连&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 159;
flex-basis: 381px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116163346972.png" data-size="582x366">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116163346972.png"
width="582"
height="366"
srcset="https://VastCircle.github.io/2024/cache/image-20241116163346972_hu7828507688133854421.png 480w, https://VastCircle.github.io/2024/cache/image-20241116163346972_hu15099731169493597316.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="cache的写入">Cache的写入&lt;/h3>
&lt;p>在一般的RISC处理器中,Icache都不会被直接写入内容,即使是有自修改指令,也需要借助D-cache,将要改写的指令作为数据写到D-cache中,然后将D-cahce中的内容写到下级存储器中(例如L2-cache,这个存储器是被i-cache和d-cache共享的,这个过程称为clean),并将I-cache的所有内容置为无效,这样处理器再次执行的时候,就会去读取修改过的指令&lt;/p>
&lt;p>Write Through 和 Write Back&lt;/p>
&lt;p>Write Allocate,在发生write miss之后先把下级数据写入D-cache,再将数据写入D-cache&lt;/p>
&lt;p>Non-Write Allocate ,发生write miss 直接写入内存&lt;/p>
&lt;p>Write Through 配合 Non-Write Allocate&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 69;
flex-basis: 167px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116170905639.png" data-size="591x849">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116170905639.png"
width="591"
height="849"
srcset="https://VastCircle.github.io/2024/cache/image-20241116170905639_hu11376883461551201258.png 480w, https://VastCircle.github.io/2024/cache/image-20241116170905639_hu9755231987386440507.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 116;
flex-basis: 280px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116171153043.png" data-size="716x613">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116171153043.png"
width="716"
height="613"
srcset="https://VastCircle.github.io/2024/cache/image-20241116171153043_hu17440820691935303671.png 480w, https://VastCircle.github.io/2024/cache/image-20241116171153043_hu14108955066647394251.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="cache的替换策略">Cache的替换策略&lt;/h3>
&lt;h4 id="lruleast-recently-used">LRU(Least Recently Used)&lt;/h4>
&lt;p>选择最近被使用次数最少的Cache line,这样需要为每一个Cache Line设置一个Age部分,每当一个Cache line被访问时,对应的年龄部分会增大,进行替换时,替换年龄最少的那个,实际上,为了减少代价,会使用&amp;quot;伪LRU&amp;quot;的方法,将所有的way进行分组,每一组使用一个1位的年龄部分&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116171552581.png" data-size="760x428">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116171552581.png"
width="760"
height="428"
srcset="https://VastCircle.github.io/2024/cache/image-20241116171552581_hu1017904653173853324.png 480w, https://VastCircle.github.io/2024/cache/image-20241116171552581_hu3117118189869326289.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>类似于二分法,三级年龄位可以分8个way&lt;/p>
&lt;h4 id="随机替换">随机替换&lt;/h4>
&lt;p>可以通过时钟算法实现近似的随机&lt;/p>
&lt;h2 id="提高cache的性能">提高Cache的性能&lt;/h2>
&lt;h3 id="write-buffer">Write buffer&lt;/h3>
&lt;p>可以将dirty的数据先放到write buffer里,等到下一级存储器有空闲的时候,将write buffer的数据写到下一级存储器中&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 234;
flex-basis: 562px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116191825344.png" data-size="464x198">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116191825344.png"
width="464"
height="198"
srcset="https://VastCircle.github.io/2024/cache/image-20241116191825344_hu7889130295197604032.png 480w, https://VastCircle.github.io/2024/cache/image-20241116191825344_hu15626345929076081660.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>当读取D-cache发生缺失时,不仅需要从下级存储器中查找数据,还需要在write buffer中也查找&lt;/p>
&lt;h3 id="流水线">流水线&lt;/h3>
&lt;p>对于写D-Cache来说,读取Tag SRAM和写Data SRAM只能串行的完成.&lt;/p>
&lt;p>可以将Tag SRAM的读取和比较放在一个周期,写Data SRAM放在下一个周期&lt;/p>
&lt;p>对于store指令,需要两个周期来完成,如果连续的执行store指令,任然可以获得没周期执行一条store指令的效果&lt;/p>
&lt;p>当执行load指令时,可能出现load需要的数据正好在store指令的流水线寄存器中,因此还需要一种机制来检查load指令携带的地址和store指令的流水线寄存器&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 417px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116192239775.png" data-size="642x369">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116192239775.png"
width="642"
height="369"
srcset="https://VastCircle.github.io/2024/cache/image-20241116192239775_hu11128785969072269180.png 480w, https://VastCircle.github.io/2024/cache/image-20241116192239775_hu2248314353265831686.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="多级结构">多级结构&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 448;
flex-basis: 1075px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116192948742.png" data-size="771x172">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116192948742.png"
width="771"
height="172"
srcset="https://VastCircle.github.io/2024/cache/image-20241116192948742_hu15711754013701734057.png 480w, https://VastCircle.github.io/2024/cache/image-20241116192948742_hu14872485187820154820.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>一般在处理器中.L2 cache会使用write back的方式,但是对于L1 cache来说,write through也可以接受,可以简化流水线的设计,也便于在多核的环境中,管理存储器之间的一致性&lt;/p>
&lt;h4 id="inclusive-和-exclusive">inclusive 和 exclusive&lt;/h4>
&lt;p>Inclusive : 如果 l2包括了l1中的所有内容,称l2 cache是inclusive的&lt;/p>
&lt;p>exclusive:如果l2 cache 和l1 cache的内容互不相同,称l2 cache是exclusive的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 250;
flex-basis: 601px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116193314356.png" data-size="451x180">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116193314356.png"
width="451"
height="180"
srcset="https://VastCircle.github.io/2024/cache/image-20241116193314356_hu519990957970606505.png 480w, https://VastCircle.github.io/2024/cache/image-20241116193314356_hu14808646991832425164.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>inclusive类型的cache,在覆盖l1 cache不会存在问题;inclusive类型的cache也简化了一致性(coherence)的管理,例如在多核的处理器中,当其中一个处理器改变了存储器中一个地址的数据时,如果在其他处理器的私有Cache中也保存了地址的数据,需要置为无效,此时只需要检查最低级的存储器,因为如果l2 cache没有数据,l1 cache中必然没有数据&lt;/p>
&lt;h3 id="victim-cache">Victim Cache&lt;/h3>
&lt;p>有时候,cache中被踢出的数据在之后可能马上又要被使用,比方说对于2-way的Cache,有3个数据恰好位于同一个Cache set&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 382;
flex-basis: 918px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116194031670.png" data-size="624x163">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116194031670.png"
width="624"
height="163"
srcset="https://VastCircle.github.io/2024/cache/image-20241116194031670_hu10040534559773902139.png 480w, https://VastCircle.github.io/2024/cache/image-20241116194031670_hu11667458781686084904.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>Victim Cache可以保存最近被踢出Cache的数据,因此所有的Cache set都可以利用它来提高way的个数,通常Victim Cache采用全相连的方式,容量比较小,Victim本质就是增加了Cache中way的个数,能够避免多个数据竞争Cache中有限的位置,从而降低Cache的缺失率.一般来说Victim Cache和 Cache的数据是互斥的,可以同时去查找Victim Cache和Cache,如果Cache中没有数据的话,就使用Victim Cache的数据&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 226;
flex-basis: 543px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116194526437.png" data-size="534x236">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116194526437.png"
width="534"
height="236"
srcset="https://VastCircle.github.io/2024/cache/image-20241116194526437_hu16126775329523168523.png 480w, https://VastCircle.github.io/2024/cache/image-20241116194526437_hu4284953928355226590.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>Filter cache,当一个数据第一次被使用,会放在Filter cache中,当数据被再次使用,才放在Cache中,这样可以避免偶然使用的数据,从而提高Cache的利用效率&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 196;
flex-basis: 471px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116195003330.png" data-size="464x236">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116195003330.png"
width="464"
height="236"
srcset="https://VastCircle.github.io/2024/cache/image-20241116195003330_hu8483874276382225260.png 480w, https://VastCircle.github.io/2024/cache/image-20241116195003330_hu11577955194034125407.png 1024w"
loading="lazy"
alt="image-20241116195003330">
&lt;/a>
&lt;figcaption>image-20241116195003330&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="预取">预取&lt;/h3>
&lt;p>可以使用预取（prefetching)来猜测处理器在以后可能使用什么指令和数据，提前将其放到Cache中，可以通过硬件完成，也可以通过软件完成。&lt;/p>
&lt;h4 id="硬件预取">硬件预取&lt;/h4>
&lt;p>在访问I-cache的一个数据块的时候，可以将它后面的数据块也取出来放在I-cache,但是由于分支预测指令的存在，可能会使得不被使用的指令进入I-cache,一方面降低I-cache实际可用的容量，一方面有占用了本来可能有用的指令，称为“cache 污染” ，可以先将预取的指令放在一个单独的缓存中（stream Buffer)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 200;
flex-basis: 482px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116202635573.png" data-size="482x240">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116202635573.png"
width="482"
height="240"
srcset="https://VastCircle.github.io/2024/cache/image-20241116202635573_hu8140215996625278615.png 480w, https://VastCircle.github.io/2024/cache/image-20241116202635573_hu7370200458249293033.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="软件预取">软件预取&lt;/h4>
&lt;p>在程序的编译阶段，编译器可以对程序分析，进而知道哪些数据是需要进行预取的，在程序中设置预取指令，就可以在计算时直接从D-cache中找到需要的数据，这种预取需要把握预取的时机，&lt;/p>
&lt;p>并且使用软件预取时，在执行预取指令的时候，处理器需要继续执行，也就是继续能够从D-cache中取数据，而不能让预取指令阻碍后面指令的执行，这要求D-cache是non-blocking结构的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 423px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116203647382.png" data-size="282x160">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116203647382.png"
width="282"
height="160"
srcset="https://VastCircle.github.io/2024/cache/image-20241116203647382_hu2549777358311364986.png 480w, https://VastCircle.github.io/2024/cache/image-20241116203647382_hu6979007415998428569.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>在实现虚拟存储器器的系统中，预取指令可能会引起异常，例如发生Page Fault,虚拟地址错误（Virtual Address Falut）或者保护违例（Protection Violation),此时有两种选择，如果对异常进行处理，称这种预取指令为处理错误的预取指令（Faulting Prefetch Instruction),反之，如果不对异常处理并且抛弃掉这条预取指令，称这种预取指令为不处理错误的预取指令（NonFaulting Prefetch Instruction),此时发生异常的预取指令会变成空指令&lt;/p>
&lt;h3 id="多端口cache">多端口Cache&lt;/h3>
&lt;p>在超标量处理器中，为提高性能，处理器需要能够每周期执行多条load/store指令，这需要多端口D-Cache,需要一些特殊的方式来避免多端口对芯片的面积和速度带来很大的负面影响&lt;/p>
&lt;h4 id="true-multi-port">True Multi-port&lt;/h4>
&lt;p>真正的多端口需要所有在Cache中的控制通路和数据通路进行复制，这表示它有两套地址解码器（Address Decoder),使得两个端口可以同时寻址Tag SRAM和Data SRAM,有两个多路选择器，用来同时读取两个端口的数据，比较器的数量也需要同时增加一杯，用来判断两个端口的命中情况，同时需要两个对齐器（Aligner).&lt;/p>
&lt;p>SRAM中的每个Cell也需要同时支持两个并行的读取操作。因此需要更长的访问时间，功耗也会随之增大。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 205;
flex-basis: 493px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116205756405.png" data-size="576x280">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116205756405.png"
width="576"
height="280"
srcset="https://VastCircle.github.io/2024/cache/image-20241116205756405_hu18285717603797448149.png 480w, https://VastCircle.github.io/2024/cache/image-20241116205756405_hu13303096475044297097.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="multiple-cache-copies">Multiple Cache Copies&lt;/h4>
&lt;p>和上面类似，将Cache进行复制，SRAM将不使用多端口的结构，可以基本消除对处理器周期的影响，但是浪费了很多面积，而且需要保存两个Cache的同步，即需要保证两个Cache是完全一致的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 127;
flex-basis: 305px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116205912949.png" data-size="272x214">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116205912949.png"
width="272"
height="214"
srcset="https://VastCircle.github.io/2024/cache/image-20241116205912949_hu15815348389656329818.png 480w, https://VastCircle.github.io/2024/cache/image-20241116205912949_hu6290296688918996185.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="multi-banking">Multi-banking&lt;/h4>
&lt;p>将Cache分为很多个小bank,每个bank只有一个端口，如果一个周期之内，Cache的多个端口上的访问地址位于不同bank之中，没有任何问题，当端口的地址位于同一个bank之中时，会引起bank冲突（bank conflict)&lt;/p>
&lt;p>这种方法仍然需要两个地址解码器，有两个多路选择器，两套比较器，两个对齐器（Aligner)。此时Data SRAM不需要实现多端口结构了（一个地址只会读一次），提高了速度减少了面积。但是由于需要判断Cache的每个端口是不是命中，对于Tag SRAM来说，仍旧需要提供多个端口同时读取的功能（why?），即采用多端口SRAM,或者将单端口SRAM进行复制&lt;/p>
&lt;p>当端口冲突时，当前周期Cache只能对一个端口进行响应&lt;/p>
&lt;p>可以采用更多的bank来降低bank冲突的概率，由于每个端口都会访问所有的bank,那需要更多的布线资源&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 217;
flex-basis: 521px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116211832055.png" data-size="404x186">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116211832055.png"
width="404"
height="186"
srcset="https://VastCircle.github.io/2024/cache/image-20241116211832055_hu18083423710349595363.png 480w, https://VastCircle.github.io/2024/cache/image-20241116211832055_hu5979318066791751977.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="amd-opteron-的多端口-cache">AMD opteron 的多端口 Cache&lt;/h4>
&lt;p>40位物理地址，48位虚拟地址&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 155;
flex-basis: 373px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116214350948.png" data-size="821x528">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116214350948.png"
width="821"
height="528"
srcset="https://VastCircle.github.io/2024/cache/image-20241116214350948_hu4034912218193561823.png 480w, https://VastCircle.github.io/2024/cache/image-20241116214350948_hu9904768563727028057.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>数据块的大小是64Bits,需要6字节寻址找到其中的某一个字节，每个数据块被分为8个独立的bank,每个bank都是64位的单端口SRAM&lt;/p>
&lt;p>整个Cache的大小是64KB,采用两路组相连，每一路大小为32KB.使用“Virtually-indexed,Pyhsically-tagged&amp;quot;的实现方式，可以使用虚拟地址寻址Cache,每一路是32KB的大小，需要VA[14:0]进行寻址，前面6位寻址块内字节，所以VA[14:6]用来寻址Cache set ,&lt;/p>
&lt;p>由于每个Cache line划分为8个bank,所以使用VA[5:3]来找到某一个bank,剩下的VA[2:0]用来找到某个字节，这种方式将两个连续的64位数据放在两个相邻的不同bank中，对它访问不会存在冲突。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 471;
flex-basis: 1130px"
>
&lt;a href="https://VastCircle.github.io/2024/cache/image-20241116215448071.png" data-size="636x135">
&lt;img src="https://VastCircle.github.io/2024/cache/image-20241116215448071.png"
width="636"
height="135"
srcset="https://VastCircle.github.io/2024/cache/image-20241116215448071_hu14988285204597629743.png 480w, https://VastCircle.github.io/2024/cache/image-20241116215448071_hu8311006062730573641.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>大小为64KB,两路组相连，每一路都有8个4KB的bank,整个cache有16个4KB的bank,Cache的每一个端口访问时，都会同时访问两个way的数据，然后根据tag去选择命中了哪个，所以Cache的一个端口访问时，会同时访问到两个bank,每个way各一个，&lt;/p>
&lt;p>PA[39:12]就是tag部分，用来判断哪个way是命中的，每一个端口都有一个TLB.每个端口都要同时读取两个way的tag进行比较，理论上来说，每个way的Tag SRAM需要支持两个读端口，这个Cache采用将Tag SRAM复制的方法&lt;/p>
&lt;p>虚拟地址的[11:0]寻址page内部，[47：12]寻址TLB,对应PFN[39:12],它用来和Cache对应的Tag部分比较，来判断是否命中&lt;/p>
&lt;p>该Cache相比于单端口，需要两个TLB,两个Tag比较电路，两倍的Tag SRAM,除了Data SRAM没有被复制，其他都被复制了，所以面积大，但是速度快。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>虚拟存储器</title><link>https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/</link><pubDate>Tue, 12 Nov 2024 20:12:09 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/</guid><description>&lt;h2 id="概述">概述&lt;/h2>
&lt;p>虚拟存储器的思想是对于一个程序来说,它的程序(code),数据(data)和堆栈(stack)的总大小可以超过实际物理内存的大小,操作系统把当前使用的部分内容放在物理内存中,而把其他未使用的内容放在更下一级的存储器中&lt;/p>
&lt;p>虚拟存储器空间的大小由处理器的位数决定,对于32位处理器,地址范围就是0~0xFFFFFFFF,就是4GB ,这些地址就是虚拟地址&lt;/p>
&lt;p>和虚拟存储器相对应的就是物理存储器,是在现实世界中能够使用的存储器,其中的地址就是物理地址&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 416px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112202223891.png" data-size="580x334">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112202223891.png"
width="580"
height="334"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112202223891_hu9392279268069119721.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112202223891_hu7023267616482017088.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 424px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112202238094.png" data-size="569x322">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112202238094.png"
width="569"
height="322"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112202238094_hu14335039875351292116.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112202238094_hu7954957040857737702.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>MMU(memory manage unit,MMU)内存管理单元&lt;/p>
&lt;p>使用物理地址,运行程序时需要为每个程序分配一块地址空间,每个程序需要在地址空间中进行运行&lt;/p>
&lt;p>使用虚拟地址,每个程序会认为它独占了整个地址空间,这样在编写程序时不需要考虑地址的限制,由操作系统负责调度,将物理存储器动态分配给各个程序,将每个程序的虚拟地址转为物理地址.&lt;/p>
&lt;p>虚拟地址还可以带来保护(protect)和共享(share)&lt;/p>
&lt;h3 id="地址转化--基于分页page的虚拟存储器">地址转化 -基于分页(page)的虚拟存储器&lt;/h3>
&lt;p>典型的页大小是4KB ,物理地址中称为frame,page和frame的大小必须相等&lt;/p>
&lt;p>程序运行时会进行把程序从硬盘搬移到物理内存中,每次搬移的单位就是一个页&lt;/p>
&lt;p>VA[11:0]表示页内的位置,称为page offset ,VA剩余的部分表示哪个页,称为VPN(Virtual Page Number)&lt;/p>
&lt;p>PA[11:0]表示frame的位置,称为frame offset,剩余部分表示哪个frame,称为PFN(Physical Frame Number)&lt;/p>
&lt;p>从VPN到PFN,offset不需要变化&lt;/p>
&lt;p>比方说 page0 -&amp;gt; frame 2 ,offset = 4 , 那只需要把VPN换成PFN ,就是把0换成2,&lt;/p>
&lt;p>如果程序的内容没有存储在物理内存中,MMU就会产生Page Fault的异常给处理器,处理器通过异常处理程序(操作系统的一部分代码)找到替换的frame ,需要先解除frame 和 page的映射,然后把硬盘的内容搬移到frame,然后添加frame和page的映射,如果被替换的frame是dirty的,还需要先将内容搬移到硬盘中,处理完成之后返回发生异常的指令重新执行&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 159;
flex-basis: 383px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112203722257.png" data-size="717x449">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112203722257.png"
width="717"
height="449"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112203722257_hu844777046950357857.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112203722257_hu1495159615354411353.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="单级页表线性页表">单级页表(线性页表)&lt;/h4>
&lt;p>页表(page Table,PT)用来存储从虚拟地址到物理地址的映射关系,一般页表是放在物理内存中的,需要使用虚拟地址寻址,页表内被寻址到的内容就是这个虚拟地址对应的物理地址,处理器中会有一个页表寄存器(Page Table Register,PTR)来存放当前运行程序的页表在物理内存中的起始位置,每次操作系统将程序调入物理内存都会去将PTR设置好&lt;/p>
&lt;p>两次内存访问,先使用虚拟地址访问页表,再使用物理地址进行寻址&lt;/p>
&lt;p>使用PTR和虚拟地址共同寻址页表,相当于使用它们共同组成一个地址,用来寻址物理内存&lt;/p>
&lt;p>valid用来指示当前的page是否在物理内存中&lt;/p>
&lt;p>下图展示如何通过PTR从物理内存中定位一个页表,并且使用虚拟地址来寻址页表,从而找到物理地址,&lt;/p>
&lt;p>具体来说就是一个虚拟地址VPN[31:12],页表的起始物理地址是addr,那这个虚拟地址对应的物理地址就是addr + VPN[31:12]所对应的entry的值,就完成了相应的映射&lt;/p>
&lt;p>页表的表项数为2^32 / 4K = 2 ^20 = 1M ,需要20位来寻址,在页表中包括的所有VPN的映射关系,页表的大小是4B * 1M = 4M , 一个entry 需要32位,因为物理内存的数据位宽是32位&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 198;
flex-basis: 476px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112205713106.png" data-size="808x407">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112205713106.png"
width="808"
height="407"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112205713106_hu9820542538462257665.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112205713106_hu11134552561278830943.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>程序对应的页表,连同pc和通用寄存器,组成了程序的状态,在切换程序时,需要去保存状态,该程序称为进程,用户打开程序,操作系统会分配物理内存的空间,创建页表和堆栈等,进程的页表指定了能够在物理内存中访问的地址空间&lt;/p>
&lt;p>可以通过页表通过相同的虚拟地址访问不同的物理地址 ,通过不同的虚拟地址访问相同的物理地址,实现进程的保护和共享&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 137;
flex-basis: 329px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112213025256.png" data-size="639x465">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112213025256.png"
width="639"
height="465"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112213025256_hu4352988920381212314.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241112213025256_hu15938731263752335312.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="多级页表">多级页表&lt;/h4>
&lt;p>将4MB的线性页表划分为若干个更小的页表,称为子页表.操作系统在处理进程的时候,根据需求逐步放入子页表,并且子页表不再占用连续的物理内存空间.需要一个表格记录子页表在物理内存中存储的位置,称为第一级页表(level1 page Table),子页表称为第二级页表(level2 Page Table)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 118;
flex-basis: 285px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113005854578.png" data-size="557x469">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113005854578.png"
width="557"
height="469"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113005854578_hu13967031774116966010.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113005854578_hu15170062433743167635.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>一个2^20的entry的页表可以划分为2^10 entry的一级页表+2^10个2^10大小的二级页表,一个页表的表项称为PTE(Page Table Entry),当操作系统创建一个进程,就在物理内存找一块4KB空间存放一级页表,并将基地址放在PTR寄存器中,一个虚拟地址肯定能够对应一个一级页表的表项,用后10位寻址一级页表,获取二级页表,然后再用前10位获取二级页表的表项,&lt;/p>
&lt;p>页表的映射关系应该都是操作系统分的,是在异常那边进行处理的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 130;
flex-basis: 314px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113013352760.png" data-size="817x624">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113013352760.png"
width="817"
height="624"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113013352760_hu2940597119313810523.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113013352760_hu11773006285468692535.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>不同的虚拟地址会导致出现不同的页表,极端情况为(1)4M程序连续,会建立一个一级页表和一个二级页表=8KB ,(2)都是离散的,并且全部都在4MB的边界上,这样需要建立1024个二级页表+一个一级页表=4100kB&lt;/p>
&lt;p>增加级数,一级页表寻址二级页表,寻址3级页表&amp;hellip;&lt;/p>
&lt;p>2^64entry -&amp;gt; 4096个2^40entry&lt;/p>
&lt;p>​ -&amp;gt; 4096个4096个2^28 entry&lt;/p>
&lt;p>​ -&amp;gt; 4096 4096 4096 2^16 entry &amp;hellip;&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 425px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113103609927.png" data-size="866x489">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113103609927.png"
width="866"
height="489"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113103609927_hu8599081119763294452.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113103609927_hu8742420021551640479.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>需要多次访问物理内存,&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 131;
flex-basis: 314px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113104520228.png" data-size="669x510">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113104520228.png"
width="669"
height="510"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113104520228_hu10601366518261350491.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113104520228_hu2163039551090256012.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>处理器多个进程时,为进程分配的物理内存之和可能大于实际可用的物理内存,部分页可能临时存在在下一级的硬盘中,成为swap空间 ,需要用到这些页时才会被调入到物理内存&lt;/p>
&lt;p>把页从物理内存写入硬盘称为Page out ,从硬盘写入swap空间称为Page In&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 108;
flex-basis: 260px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113104829087.png" data-size="387x356">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113104829087.png"
width="387"
height="356"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113104829087_hu17650543691703514328.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113104829087_hu4548535786874561091.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>利用虚拟存储器,可以管理每一个页的访问权限,只需要在页表中去设置每一个页的属性就可以了,&lt;/p>
&lt;h4 id="page-fault">Page Fault&lt;/h4>
&lt;p>Page Fault是异常的一种,通过操作系统来进行完成&lt;/p>
&lt;p>(1)Page Fault需要访问硬盘,通常为毫米级别,与Page Fault对应的异常处理程序来说是微乎其微的&lt;/p>
&lt;p>(2)使用软件可以根据实现情况实现灵活的替换算法,找到最合适的页进行替换&lt;/p>
&lt;p>直接使用虚拟地址不能知道页位于硬盘的哪个位置,只能知道物理内存的,需要操作系统在开辟swap空间的同时,会使用一个表格记录每个页在硬盘中存储的位置,可以和页表进行合并&lt;/p>
&lt;p>如果valid为0,代表页在硬盘中,反之在物理内存里&lt;/p>
&lt;p>但是实际上物理上仍然是分开的,因为不管一个页是不是在物理内存中,操作系统都必须记录一个进程的所有页在硬盘中的位置&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 120;
flex-basis: 288px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113112122162.png" data-size="563x468">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113112122162.png"
width="563"
height="468"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113112122162_hu16669049199911691540.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113112122162_hu12050019672886567113.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>(1)写通(Write Through),将改变的内容马上写回到硬件中去&lt;/p>
&lt;p>(2)写回(Write Back),只有等到地址的内容在物理内存中要被替换时,才将内容写回到硬盘&lt;/p>
&lt;p>在PTE中增加一个dirty的状态位,当页内的某个地址被写入是,dirty的状态会被置1.在需要被替换时,根据dirty位去决定是否要先写回到硬盘中去&lt;/p>
&lt;p>替换算法可以在硬件上提供支持,在PTE中增加一位来记录每个页最近是否被访问过,称为&amp;quot;使用位(use)&amp;quot;,可以周期性的去将使用位清零&lt;/p>
&lt;p>为了处理Page Fault,硬件需要&lt;/p>
&lt;p>(1)在发现Page Fault,能够产生对应类型的异常,并跳转到异常处理程序&lt;/p>
&lt;p>(2)当写入物理内存时,需要将页表中对应PTE的脏状态置1.&lt;/p>
&lt;p>(3)当store/load物理内存时,将use位置1&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 227;
flex-basis: 547px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113114256875.png" data-size="677x297">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113114256875.png"
width="677"
height="297"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113114256875_hu16875898927542427658.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113114256875_hu5836178382668034331.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="小结">小结&lt;/h4>
&lt;h5 id="没有page-fault时">没有Page Fault时&lt;/h5>
&lt;ol>
&lt;li>处理器送出的VA送到MMU&lt;/li>
&lt;li>MMU使用PRT和VA[31:12]组成访问页表的地址,送到物理内存&lt;/li>
&lt;li>将寻址到的PTE返回给MMU&lt;/li>
&lt;li>MMU判断valid=1,使用PA={PFN,VA[11:0]}访问物理地址&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 169;
flex-basis: 407px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113114450566.png" data-size="615x362">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113114450566.png"
width="615"
height="362"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113114450566_hu9843346056032092035.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113114450566_hu14508332668482389946.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h5 id="发生page-fault">发生Page Fault&lt;/h5>
&lt;p>1~3一致&lt;/p>
&lt;ol start="4">
&lt;li>MMU发现valid=0,触发Page Fault,处理器会跳转到Page Fault对应的异常程序中,此时MMU还会吧发生Page Fault的虚拟地址VA保存到专业的处理器,供异常处理程序使用&lt;/li>
&lt;li>如果物理内存没有空闲空间,异常处理程序会根据替换算法,从物理内存找出未来可能不被使用的页,将其替换,页称为Victim Page,如果dirty为1,需要写入到硬盘&lt;/li>
&lt;li>Page Fault异常处理程序会使用MMU保存的虚拟地址VA寻址硬盘,找到对应的页,将其写入到Victim page所在的位置&lt;/li>
&lt;li>从异常程序返回时,引发Page Fault的指令会被重新取到流水线中,处理器会重新发送虚拟地址到MMU&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 226;
flex-basis: 542px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113114927412.png" data-size="807x357">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113114927412.png"
width="807"
height="357"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113114927412_hu6221575889162077024.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113114927412_hu8021151083403226446.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="程序保护">程序保护&lt;/h2>
&lt;p>操作系统的内容不允许被用户进程随意修改,操作系统中的有一部分允许用户进程读取.操作系统相对于普通用户进程来说,应该有足够多的权限,来保证操作系统对于系统的控制权;不同进程之间一个加以保护,一个进程不能让其他的进程随便修改自己的内容&lt;/p>
&lt;p>上述条件需要操作系统和用户进程对于不同的页有不同的访问权限,通过页表可以实现,&lt;/p>
&lt;p>操作系统一般不会使用页表,而是直接访问物理内存,物理内存中的专门一部分供操作系统来使用&lt;/p>
&lt;p>ARMv7架构,AP部分决定每个页的访问权限&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 232;
flex-basis: 558px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113133337838.png" data-size="836x359">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113133337838.png"
width="836"
height="359"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113133337838_hu16735024332026684348.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113133337838_hu8986040596683524870.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>一旦发现当前的访问不符合规定,会产生非法访问异常,使得处理器跳转到异常处理程序,由操作系统决定如何处理非法的访问&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 190;
flex-basis: 456px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113133610861.png" data-size="747x393">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113133610861.png"
width="747"
height="393"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113133610861_hu2288858152837664721.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113133610861_hu8963100368267186447.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>也可以对一级页表设置权限控制,每个一级页表可以映射4KB*1024=4MB的地址范围,可以&lt;/p>
&lt;p>00 -&amp;gt; 4MB空间不允许访问, 11 -&amp;gt; 对应的4MB空间不设限制 , 01 -&amp;gt; 需要产看第二级页表的PTE,获得页访问的权限,通过粗粒度和细粒度的组合,可以提高处理器的执行效率&lt;/p>
&lt;p>在有dcache的处理器中,在虚拟地址转化为物理地址之后先去访问dcache,需要有一部分空间是不允许缓存的&lt;/p>
&lt;p>PTE包含&lt;/p>
&lt;p>(1)PFN,表示虚拟地址对应的物理地址的页号&lt;/p>
&lt;p>(2)Valid,表示对应页当前是否在物理内存中&lt;/p>
&lt;p>(3)Dirty,表示对应页中内容是否被修改&lt;/p>
&lt;p>(4)Use,表示对应页中的内容是否被修改过&lt;/p>
&lt;p>(5)AP,访问权限控制,表示操作系统和用户程序对当前页的访问权限&lt;/p>
&lt;p>(6)Cacheable,表示对应页是否被缓存&lt;/p>
&lt;h2 id="tlb和cache">TLB和Cache&lt;/h2>
&lt;h3 id="tlb">TLB&lt;/h3>
&lt;p>TLB(Translation Lookaside Buffer)用来缓存页表中最近使用的PTE,这样就不需要每次都去访问两次物理内存&lt;/p>
&lt;p>TLB只有时间相关性,空间相关性没有明显的规律&lt;/p>
&lt;p>一般TLB使用全相连的方式来设计&lt;/p>
&lt;p>现代处理器采用两级TLB,一级TLB采用哈佛结构,分为I-TLB和D-TLB,采用全相联,二级TLB是指令和数据共用,一般采用组相连&lt;/p>
&lt;p>TLB命中,直接返回从TLB中得到的物理地址,TLB缺失,需要访问物理内存中的页表&lt;/p>
&lt;ol>
&lt;li>页表中的PTE有效,直接从页表中得到对应的物理地址&lt;/li>
&lt;li>页表中的PTE无效,需要从硬盘中去将相应的页搬移到物理内存中&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 260;
flex-basis: 624px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113140352233.png" data-size="484x186">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113140352233.png"
width="484"
height="186"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113140352233_hu8864321583826033378.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113140352233_hu16150349096023952055.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>现代处理器中都支持大小可变的页,由操作系统进行管理,根据不同应用的特点选用不同大小的页&lt;/p>
&lt;h4 id="tlb缺失">TLB缺失&lt;/h4>
&lt;p>(1)虚拟地址对应的页不再物理内存中&lt;/p>
&lt;p>(2)虚拟地址对应的页在物理内存中,但是PTE没有放在TLB中&lt;/p>
&lt;p>Page Table Walk:从页表中找到对应的映射关系,并将其写回到TLB中&lt;/p>
&lt;ol>
&lt;li>软件实现Page Table Walk.当发生TLB缺失,硬件把产生TLB缺失的虚拟地址保存到特殊寄存器中,产生TLB缺失的异常,在异常处理程序中,软件使用虚拟地址去寻址物理内存中的页表,找到对应的PTE,并且写回到TLB中 .为了防止在异常处理程序中又发生TLB缺失,这个程序会放在不需要进行地址转化的物理内存上 ,软件处理会冲说流水线&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 115;
flex-basis: 277px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113141426171.png" data-size="434x375">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113141426171.png"
width="434"
height="375"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113141426171_hu6588184095300100579.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113141426171_hu7411631538644157319.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;ol start="2">
&lt;li>硬件实现Page Table Walk. 当发生TLB缺失时,自动使用当前的虚拟地址去寻址页表.硬件进行逐级寻址是比较方便的.这种方式比较适合超标量处理器,不需要打断流水线,但是如果操作系统没有在物理内存中建立好了页表,那硬件没有办法,还是得通过操作系统&lt;/li>
&lt;/ol>
&lt;p>采用硬件处理TLB缺失需要使用硬件状态机来寻址页表,还需要将整个流水线暂停等待MMU处理缺失,但是在处理完之后就可以直接去执行.采用软件处理,需要执行异常处理程序,而且从异常处理程序退出后,将流水线恢复到TLB缺失发生之前的状态&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 189;
flex-basis: 454px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113162814186.png" data-size="720x380">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113162814186.png"
width="720"
height="380"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113162814186_hu10080609097408610238.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113162814186_hu9383525678854467250.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>发生TLB缺失,如果需要的PTE在页表中,则TLB缺失的处理时间需要十几个周期,如果发生Page Fault异常,则需要成百上千个周期&lt;/p>
&lt;p>对于TLB来说,随机替换算法是比较合适的,可以采用称为时钟算法的方法,就是通过计数器去随机取值,128的表项就可以通过7位的计数器来随机编号&lt;/p>
&lt;h4 id="tlb的写入">TLB的写入&lt;/h4>
&lt;p>在使用TLB作为页表的缓存,处理器送出的虚拟缓存会访问TLB,如果直接从TLB得到物理地址的话,会使得TLB对应的&amp;quot;use&amp;quot;set,如果是store,会使得dirty=1.但是,如果TLB采用写回,那此时不会去更新页表,所以页表的信息可能是过时的,一种方法是在Page Fault的时候,把所有TLB的表项写回到页表&lt;/p>
&lt;p>但实际上没有必要,可以认为被TLB记录的页都是要被使用的,是无法被替换的,操作系统可以记录哪些PTE被放到了TLB中,这样实际上也能够避免当物理内存中一个页被踢出了之后,还需要查找它在TLB中是否被记录了,如果有还需要置0&lt;/p>
&lt;p>操作系统也需要有能够控制dcache的能力,因为操作系统在物理内存中选择一个页进行替换的时候,如果这个页是脏的,它最新的内容不一定是在物理内存中,还有可能在dcache中.虽然说,存在在TLB的页不会被替换,那按理来说,存在在dcache的数据所对应的页也不会被替换.但是也有例外,比方说,发生TLB缺失之后,有TLB表项的会被替换,但是此时D-cache是没有发生变化的,&lt;/p>
&lt;h4 id="对tlb进行控制">对TLB进行控制&lt;/h4>
&lt;p>TLB是页表的缓存,如果一个页的映射关系在页表中不存在了,那么它在TLB中也不应该存在&lt;/p>
&lt;p>(1)当一个进程结束,进程的指令(code),数据(data)和堆栈(stack)占据的页表置为无效,此时TLB中可能还存在对应的PTE,可以通过ASID去吧I-TLB和D-TLB的内容置为无效&lt;/p>
&lt;p>(2)当一个进程占用的物理内存过大时,操作系统可能将进程中一部分不经常使用的页写回到硬盘中,也需要将TLB置为无效&lt;/p>
&lt;p>对TLB的管理需要包括,1.能够将I-TLB和D-TLB的所有表项置为无效 2. 能够将I-TLB和D-TLB中的某一个ASID对应的所有表项置为无效 3.能够将某个VPN对应的表项置为无效&lt;/p>
&lt;h5 id="arm的tlb管理">ARM的TLB管理&lt;/h5>
&lt;p>(1)用来管理I-TLB的控制寄存器&lt;/p>
&lt;ol>
&lt;li>将VPN匹配的表项(entry)置为无效的控制寄存器&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>VPN相等&lt;/li>
&lt;li>如果TLB中一个表项的Global位无效,需要ASID相等,如果Global有效,则不需要&lt;/li>
&lt;/ul>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 503;
flex-basis: 1209px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113202311975.png" data-size="635x126">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113202311975.png"
width="635"
height="126"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113202311975_hu2455770362994303047.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113202311975_hu15984741137560243802.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>进程中某些地址的映射信息被改变时,需要将TLB对应的表项置为无效&lt;/p>
&lt;ol start="2">
&lt;li>将TLB中ASID匹配的所有表项置为无效的控制寄存器&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 483;
flex-basis: 1159px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113203804169.png" data-size="657x136">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113203804169.png"
width="657"
height="136"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113203804169_hu3854128643418782147.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113203804169_hu15103547143579885177.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>​ 当一个进程退出的时候,需要将当前进程在TLB中的所有内容都置为无效&lt;/p>
&lt;ol start="3">
&lt;li>将TLB中所有未锁定(unlocker)状态的表项置为无效,锁定状态的表项不发生改变.为了加快处理器某些关键程序的执行时间,可以吧一些表项设为锁定状态&lt;/li>
&lt;/ol>
&lt;p>(2) 用来管理D-TLB的控制寄存器同理&lt;/p>
&lt;p>(3)用于将TLB的内容进行读出和写入&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 216;
flex-basis: 518px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113204427210.png" data-size="510x236">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113204427210.png"
width="510"
height="236"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113204427210_hu1808296226409048137.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113204427210_hu13257119095023359013.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>使用两个寄存器来对应一个表项,data1和data0,当读取TLB时,被读取表项的内容会放在寄存器中,&lt;/p>
&lt;p>上面的寄存器都位于系统控制协处理器中,只需要通过访问协处理器的指令(MCR和MRC)就可以了&lt;/p>
&lt;h5 id="mips风格的tlb管理">MIPS风格的TLB管理&lt;/h5>
&lt;p>MIPS,TLB缺失通过软件来解决,MIPS定义了专门操作TLB的指令,使用这些指令可以直接对TLB进行操作&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 134;
flex-basis: 321px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113205448933.png" data-size="845x630">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113205448933.png"
width="845"
height="630"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113205448933_hu14168470725230903113.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113205448933_hu6626241744745778815.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 292;
flex-basis: 701px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113210011426.png" data-size="555x190">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113210011426.png"
width="555"
height="190"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113210011426_hu14294742867446194869.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113210011426_hu3988204457967568634.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>MIPS处理器中,为了加快寻址页表的过程,硬件会自动将这两个部分(页表的基地址和偏移地址)放在context寄存器中,位于协处理器CP0.由于load指令无法直接使用CP0中的寄存器,首先要把context寄存器放在通用寄存器$k1中,在MIPS架构中,R26和R27只用在中断和异常中,也称为$k1和$k0&lt;/p>
&lt;p>TLBWR将entryHi和EntryLo寄存器的内容写到TLB内随机指定的一个表项中,在发生TLB缺失,会自动将当前未能转换的虚拟地址的VPN以及当前进程的ASID写入到EntryHi寄存器中&lt;/p>
&lt;h3 id="cache的设计">Cache的设计&lt;/h3>
&lt;p>TLB只是加速了从虚拟地址到物理地址的转换,但是没有加速从物理内存中取数据的过程,也可以使用cache来加速&lt;/p>
&lt;p>下面是物理Cache,和没有加入TLB其实是一样的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 390;
flex-basis: 937px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113211628553.png" data-size="578x148">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113211628553.png"
width="578"
height="148"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113211628553_hu15455923065170511424.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113211628553_hu1233705023164367393.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>因为要经过TLB,才能访问物理Cache,所以会增加流水线的延时,如果要获得和之前一样的运行频率,需要再加入一级流水线,但是这样增大了分支预测失败的惩罚,也增大了load指令的延迟&lt;/p>
&lt;p>可以直接使用Virtual Cache来缓存数据&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 368;
flex-basis: 884px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113212837556.png" data-size="538x146">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113212837556.png"
width="538"
height="146"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113212837556_hu1682197753071144083.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113212837556_hu6588021925935794266.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>虚拟Cache会导致两个问题&lt;/p>
&lt;p>(1)同义问题(synonyms),也称为重名(aliasing),即多个不同的名字对应相同的物理位置,会出现Cache不同虚拟地址但实际上对应着相同的物理地址,这样就会浪费Cache的空间,而且load了数据了之后需要对其他虚拟地址的Cache都进行更改,因为实际上它们对应着同一个物理地址.&lt;/p>
&lt;p>如果Cache的容量&amp;lt;4KB,寻址的地址不会&amp;gt;12位,那么对应同一个物理地址的不同虚拟地址也会放在Cache的相同地址上,反之就可能出现同义&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 218;
flex-basis: 523px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113222410617.png" data-size="587x269">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113222410617.png"
width="587"
height="269"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113222410617_hu12388999493876051402.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113222410617_hu12531450076396476628.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>要实现同时更新相同物理地址的Cache,就需要使用物理地址作为Cache的Tag部分,&lt;/p>
&lt;p>下图的结构就可以解决同义的问题,&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 141;
flex-basis: 339px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113222603874.png" data-size="434x307">
&lt;img src="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113222603874.png"
width="434"
height="307"
srcset="https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113222603874_hu12138166093619374866.png 480w, https://VastCircle.github.io/2024/%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/image-20241113222603874_hu6070767854557535341.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>未完待续&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>NBDcache</title><link>https://VastCircle.github.io/2024/nbdcache/</link><pubDate>Mon, 11 Nov 2024 16:33:27 +0800</pubDate><guid>https://VastCircle.github.io/2024/nbdcache/</guid><description>&lt;h2 id="dcache结构图">Dcache结构图&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 141;
flex-basis: 339px"
>
&lt;a href="https://VastCircle.github.io/2024/nbdcache/image-20241111163907552.png" data-size="996x705">
&lt;img src="https://VastCircle.github.io/2024/nbdcache/image-20241111163907552.png"
width="996"
height="705"
srcset="https://VastCircle.github.io/2024/nbdcache/image-20241111163907552_hu11066709581250157466.png 480w, https://VastCircle.github.io/2024/nbdcache/image-20241111163907552_hu15637605824835427283.png 1024w"
loading="lazy"
alt="image-20241111163907552">
&lt;/a>
&lt;figcaption>image-20241111163907552&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>noblockcache 中共例化了3个小模块,writebackUnit,ProbeUnit,MSHRFile&lt;/p>
&lt;p>该Cache支持主缺失和次缺失两种情况。主缺失是指某个缓存行的首次缺失，导致向主存发送回填请求；而次缺失则是指对缓存的访问也发生缺失，但目标缓存行与之前的主缺失是同一个。&lt;/p>
&lt;p>在MSHR（缺失状态保持寄存器）中，通过主缺失标签和重放队列来跟踪缺失。主缺失标签记录处于处理中的回填请求的地址，并在每次缺失时被搜索，以判断是否为次缺失。发生主缺失时，会分配一个新的主缺失标签来记录地址，发出回填请求，必要时执行驱逐（eviction），并在主缺失标签旁的链表中添加一个新的重放队列条目。重放队列条目包含关于访问的信息，包括对应的缓存行偏移量、字节宽度、用于加载的目标寄存器以及待存储的数据。&lt;/p>
&lt;p>次缺失会在对应的重放队列中添加新的条目，但不会向主存发送额外的回填请求。&lt;/p>
&lt;p>The cache supports both primary misses and secondary misses. A primary miss is the first miss to a cache line and causes a refill request to be sent to main memory, while secondary misses are accesses which miss in the cache but are for the same cache line as an earlier primary miss.&lt;/p>
&lt;p>Misses are tracked in the MSHR using primary miss tags and replay queues. Primary miss tags hold the address of an in-flight refill request and are searched on every miss to determine if it is a secondary miss. A primary miss allocates a new primary miss tag to hold the address, issues a refill request, performs an eviction if needed, and adds a new replay queue entry to a linked list next to the primary miss tag. Replay queue entries contain information about the access including the corresponding cache line offset, the byte width, the destination register for loads, and pending data for stores. A secondary miss adds a new replay queue entry to the appropriate replay queue, but does not send an additional refill request to main memory&lt;/p>
&lt;h2 id="模块介绍">模块介绍&lt;/h2>
&lt;h3 id="nonblockingdcachemodule">NonBlockingDCacheModule&lt;/h3>
&lt;p>目前配置的dcache , 16路&lt;/p>
&lt;p>​ d-cache-block-size = &amp;lt;64&amp;gt;;
​ d-cache-sets = &amp;lt;16&amp;gt;;
​ d-cache-size = &amp;lt;4096&amp;gt;&lt;/p>
&lt;p>4路组相联cache 4096/16/64=4&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">s1_req&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">HellaCacheReq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// s1主要是打了一拍,下面其实是在决定把什么数据打一拍，第一拍就是在仲裁什么数据地址该去读data和meta
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// cpu_req : cpu的请求信号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s1_req&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 写回module的请求信号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">wb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s1_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">wb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">wb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">blockOffBits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s1_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">phys&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 控制module的请求信号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">prober&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s1_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">prober&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">prober&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">blockOffBits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s1_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">phys&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">mshrs&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s1_req&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">mshrs&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_recycle&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s1_req&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s2_req&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s1_clk_en&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">metaReadArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#7f848e">//TODO: should be metaReadArb.io.out.fire, but triggers Verilog backend bug
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// metaReadArb按理有5个端口,但是生成的时候端口0貌似被优化了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">metaReadArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s2_recycle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metaReadArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s2_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">blockOffBits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metaReadArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">~&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">nWays&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metaReadArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s2_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metaReadArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">mshrs&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metaReadArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">prober&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metaReadArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">wb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metaReadArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metaReadArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">blockOffBits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metaReadArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cpu&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">untagBits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">metaReadArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">~&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">nWays&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="wbu">WBU&lt;/h3>
&lt;p>&lt;code>WritebackUnit&lt;/code> 模块实现了一个缓存的写回单元，负责通过 TL-C 的 C 通道向 L2 Cache 释放替换块 (Release)。&lt;/p>
&lt;p>&lt;code>refillCycles&lt;/code> 表示在发生缓存未命中（cache miss）时，从主存或其他缓存中读取数据并将其填充到目标缓存的过程所需的时钟周期数&lt;/p>
&lt;p>需要wbu的module只有 prober 和 mshrs , prober和wbu的数据都是通过c通道进行回复的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">wbArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">prober&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wb_req&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">wbArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">mshrs&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wb_req&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">wb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">wbArb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">active&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">r1_data_req_fired&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">r2_data_req_fired&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">r1_data_req_fired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 返回数据并且返回tag的时候
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 拉高r1_data_req_fired
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">r1_data_req_fired&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 计数器+1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">data_req_cnt&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">data_req_cnt&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">r2_data_req_fired&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 在返回后的第二拍,拉高release.valid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">release&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">release&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">r1_data_req_fired&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">r2_data_req_fired&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 一般都是减去2,除非refilllCycles &amp;lt;= 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">data_req_cnt&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">data_req_cnt&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">]((&lt;/span>&lt;span style="color:#e06c75">refillCycles&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">B&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">r1_data_req_fired&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">2.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span>&lt;span style="color:#56b6c2">(!&lt;/span>&lt;span style="color:#e06c75">r1_data_req_fired&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// We&amp;#39;re done if this is the final data request and the Release can be sent
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">active&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">data_req_cnt&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">refillCycles&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">release&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 发起请求的时候进行active 和 赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">active&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">data_req_cnt&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">fire&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">if&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">refillCycles&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">data_req_cnt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">refillCycles&lt;/span>&lt;span style="color:#56b6c2">)-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">rowOffBits&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="probe">Probe&lt;/h3>
&lt;p>实现了Cache管理模块的状态机，主要用于处理探测请求的操作，管理Cache的状态，判断命中情况，以及处理数据写回操作,主要针对的是tag,不是data&lt;/p>
&lt;p>&lt;del>prober的请求输入的数据不是cpu_req,而是auto_out_b_ , 代表这是下一级存储l2，比方说外设发起的读数据，或者在多核心的情况下，core0去读cache0,为了缓存一致性的问题，可能需要sbus去读cache1，然后再去写cache0等&lt;/del>&lt;/p>
&lt;p>prober应该就是去把dcache的内容给disabled并且写入l2 cache的&lt;/p>
&lt;p>发起auto_out_b_*的是l2 cache&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 436;
flex-basis: 1047px"
>
&lt;a href="https://VastCircle.github.io/2024/nbdcache/image-20241120205937336.png" data-size="825x189">
&lt;img src="https://VastCircle.github.io/2024/nbdcache/image-20241120205937336.png"
width="825"
height="189"
srcset="https://VastCircle.github.io/2024/nbdcache/image-20241120205937336_hu10158162628482713343.png 480w, https://VastCircle.github.io/2024/nbdcache/image-20241120205937336_hu8485362152773789671.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 9个状态
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s_invalid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">:&lt;/span> &lt;span style="color:#e5c07b">s_meta_read&lt;/span> &lt;span style="color:#e5c07b">::&lt;/span> &lt;span style="color:#e5c07b">s_meta_resp&lt;/span> &lt;span style="color:#e5c07b">::&lt;/span> &lt;span style="color:#e5c07b">s_mshr_req&lt;/span> &lt;span style="color:#e5c07b">::&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s_mshr_resp&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">:&lt;/span> &lt;span style="color:#e5c07b">s_release&lt;/span> &lt;span style="color:#e5c07b">::&lt;/span> &lt;span style="color:#e5c07b">s_writeback_req&lt;/span> &lt;span style="color:#e5c07b">::&lt;/span> &lt;span style="color:#e5c07b">s_writeback_resp&lt;/span> &lt;span style="color:#e5c07b">::&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s_meta_write&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#e5c07b">:&lt;/span> &lt;span style="color:#e5c07b">Nil&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Enum&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">9&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_meta_resp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// we need to wait one cycle for the metadata to be read from the array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_meta_resp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_mshr_req&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_mshr_req&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">old_coh&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">block_state&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">way_en&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 比较有意思,如果没有rdy,不是选择wait,而是retry
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// if the read didn&amp;#39;t go through, we need to retry
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mshr_rdy&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s_mshr_resp&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s_meta_read&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 如果是脏数据的话，就要写回到l2, 反之需要释放相应的权限（我觉得主要就是权限的改变，但是不需要伴随数据）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_mshr_resp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tag_matches&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">is_dirty&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s_writeback_req&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s_release&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_release&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rep&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tag_matches&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s_meta_write&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s_invalid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 不管怎么样，最后一步都是write_meta
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// wait for the writeback request to finish before updating the metadata
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// meta write 应该有将改变的权限写入meta
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_writeback_resp&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wb_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_meta_write&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>逻辑是比较简单的,就是当发起请求时,去meta_read,meta_read之后去读mshr,读出mshr之后,当tag_match的时候且为dirty,需要写回,所以切换到s_writeback_req ,否则到release,release之后去meta_write.写回是由wb模块控制的&lt;/p>
&lt;p>b通道找不到opcode,但和probe相关是肯定的，param代表10,和c一致&lt;/p>
&lt;p>c通道是probe_ack , c_param指示由于探测而在主代理中发生的特定类型的权限更改,&lt;/p>
&lt;p>如下代表probe_ack , BtoN ,降权限的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 325;
flex-basis: 780px"
>
&lt;a href="https://VastCircle.github.io/2024/nbdcache/image-20241122205333780.png" data-size="1369x421">
&lt;img src="https://VastCircle.github.io/2024/nbdcache/image-20241122205333780.png"
width="1369"
height="421"
srcset="https://VastCircle.github.io/2024/nbdcache/image-20241122205333780_hu6178936314293379860.png 480w, https://VastCircle.github.io/2024/nbdcache/image-20241122205333780_hu14194576438853189490.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>如果是通过wb写回的话，c通道返回就是probe_ackdata ,TtoB,权限降到可读&lt;/p>
&lt;h3 id="l1metadataarray-mata">L1MetadataArray mata&lt;/h3>
&lt;p>meta就是存储tag的地方,是一个同步ram&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// () =&amp;gt; T是函数的写法 ,无输入参数,输出参数是T类型的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">L1MetadataArray&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">L1Metadata&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">onReset&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">T&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e06c75">L1HellaCacheModule&lt;/span>&lt;span style="color:#56b6c2">()(&lt;/span>&lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">rstVal&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">onReset&lt;/span>&lt;span style="color:#56b6c2">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">io&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">IO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Bundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">read&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Flipped&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">L1MetaReadReq&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">write&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Flipped&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">L1MetaWriteReq&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">resp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">nWays&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">rstVal&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cloneType&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">rst_cnt&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">log2Up&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">nSets&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">rst&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">rst_cnt&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">nSets&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">waddr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rst&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">rst_cnt&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">wdata&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rst&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">rstVal&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// way_en是独热码的形式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">wmask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rst&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">nWays&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">(-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">S&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asSInt&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asBools&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">rmask&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rst&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">nWays&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#56b6c2">(-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">S&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asSInt&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">asBools&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rst&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">rst_cnt&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">rst_cnt&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">metabits&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">rstVal&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">getWidth&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// way 是路数 , sets是组数 , way_en 就是用来选择路的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 同步mem
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">tag_array&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">SyncReadMem&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">nSets&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">nWays&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">metabits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">rst&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">tag_array&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">write&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">waddr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">nWays&lt;/span>&lt;span style="color:#56b6c2">)(&lt;/span>&lt;span style="color:#e06c75">wdata&lt;/span>&lt;span style="color:#56b6c2">),&lt;/span> &lt;span style="color:#e06c75">wmask&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// read data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">resp&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">tag_array&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span>&lt;span style="color:#56b6c2">()).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">asTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">chiselTypeOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rstVal&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">wen&lt;/span> &lt;span style="color:#7f848e">// so really this could be a 6T RAM
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">rst&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="metareadarb-or-metawritearb">metaReadArb or metaWriteArb&lt;/h3>
&lt;p>metaReadArb仲裁输入为 mshrs , prober , wb ,&lt;strong>mata 和 data都支持多路读取&lt;/strong>&lt;/p>
&lt;h3 id="mshrfile">MSHRFile&lt;/h3>
&lt;p>缓存控制中的关键部分，用于处理多组MSHR（Miss Status Holding Register），协调多种请求（读、写、填充、写回等）在一级缓存（L1 Cache）中的操作。&lt;/p>
&lt;p>顶层输入的每一个req会发送到每一个mshr中，但是最终只有一个mshr会被选中 ，也就代表只有一个mshr会被写入本笔数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mshr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_sec_val&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">sdq_rdy&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">tag_match&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mshr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">viewAsSupertype&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">HellaCacheReqInternal&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">viewAsSupertype&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">HellaCacheReqInternal&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mshr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag_match&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag_match&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mshr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">old_meta&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">old_meta&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mshr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mshr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sdq_id&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">sdq_alloc_id&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="cacheable">cacheable&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">cacheable&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">edge&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">manager&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">supportsAcquireBFast&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">lgCacheBlockBytes&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>cacheable&lt;/code>用于检测当前请求的地址是否可以被缓存。&lt;code>edge.manager.supportsAcquireBFast&lt;/code>方法检查缓存控制器是否支持快速获取操作。&lt;/p>
&lt;h4 id="sdq">sdq&lt;/h4>
&lt;p>用于管理store data queue&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 位向量寄存器，用于跟踪SDQ中的空闲条目。每一位代表一个位置，如果为1则表示该位置已被分配，若为0则表示空闲
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">sdq_val&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">RegInit&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">nSDQ&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 通过优先编码获取其中一个空闲的sdq的id,从左往右第一个0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 比方说 priorityEncoder(0b0100) = 2 ,priorityEncoder(0b0111) = 2 ,独热转数值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">sdq_alloc_id&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">PriorityEncoder&lt;/span>&lt;span style="color:#56b6c2">(~&lt;/span>&lt;span style="color:#e06c75">sdq_val&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">nSDQ&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 如果不是全部为1代表有空闲,设为ready
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">sdq_rdy&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">sdq_val&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">andR&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 表示当前请求是否满足写入SDQ的条件 ,需要请求有效,请求能够被接受,可缓存,并且是写命令
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">sdq_enq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">cacheable&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">isWrite&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// store data queue ,存放数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">sdq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mem&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">nSDQ&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">UInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">coreDataBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 当满足条件,就写入相应数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sdq_enq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e06c75">sdq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">sdq_alloc_id&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 用于指示是否可以释放存储数据队列中的一个条目,当io.replay.fire（即重放请求有效且被接受）且当前重放指令是写操作（isWrite(io.replay.bits.cmd)）时，free_sdq为true，表示可以释放该条目。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">free_sdq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">isWrite&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">sdq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">RegEnable&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">replay_arb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sdq_id&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">free_sdq&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mask&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">replay_arb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// sdq_enq代表要去分配sdq了 io_replay.valid 代表sdq使用完了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// uIntToOH(3) = 0b0100
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// priotityEncoderOH把最靠近左边的1 set , 比方说 sdq_val = 0b0011, 则 priorityEncoderOH(~sdq_val(cfg.SDQ-1,0)) = 0b0010
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">sdq_enq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sdq_val&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">sdq_val&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">~(&lt;/span>&lt;span style="color:#e5c07b">UIntToOH&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">replay_arb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sdq_id&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">Fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">nSDQ&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">free_sdq&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// reset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">|&lt;/span> &lt;span style="color:#e5c07b">PriorityEncoderOH&lt;/span>&lt;span style="color:#56b6c2">(~&lt;/span>&lt;span style="color:#e06c75">sdq_val&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">nSDQ&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">Fill&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">nSDQ&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">sdq_enq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// set
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">replay_arb&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Module&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Arbiter&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">ReplayInternal&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">nMSHRs&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="iomshr">iomshr&lt;/h4>
&lt;p>输入是s2_req ， 回应resp，这里的resp是直接接入到MSHRfile顶层端口的，它和mshr是同一类东西，应该就是mmio,就是不经过cache的数据,但是本身mshr保存的是缓存未命中的请求以及相关状态，层次有点问题吧&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mmio_alloc_arb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">cacheable&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">io&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">IO&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">Bundle&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Flipped&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">HellaCacheReq&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// MSHRfile发起的req
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">resp&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">HellaCacheResp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// resp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mem_access&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Decoupled&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleA&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">edge&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bundle&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#7f848e">// 向mem发起的请求
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">mem_ack&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Flipped&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Valid&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">TLBundleD&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">edge&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bundle&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span> &lt;span style="color:#7f848e">// mem ack
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">replay_next&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Output&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 输入握手的时候，获取数据 req stage 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_mem_access&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 获取内存数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_access&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_mem_ack&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 内存数据响应
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_mem_ack&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_ack&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_resp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">isRead&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 获取响应的数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">grant_word&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">wordFromBeat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_ack&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 发出去了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_idle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 212;
flex-basis: 508px"
>
&lt;a href="https://VastCircle.github.io/2024/nbdcache/image-20241118210021805.png" data-size="844x398">
&lt;img src="https://VastCircle.github.io/2024/nbdcache/image-20241118210021805.png"
width="844"
height="398"
srcset="https://VastCircle.github.io/2024/nbdcache/image-20241118210021805_hu12660496501136547085.png 480w, https://VastCircle.github.io/2024/nbdcache/image-20241118210021805_hu18334060945906226560.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>其实这个仲裁器像是倒着用的，是把io.req信号去选择一个mshr去输出&lt;/p>
&lt;h4 id="mshr">mshr&lt;/h4>
&lt;p>输入是s2_req&lt;/p>
&lt;p>每个MSHR处理一个缓存块的缺失请求&lt;/p>
&lt;p>mshr应该就是其中的一个表项,这里通过状态机来判断表项是一次缺失还是二次缺失 ,是不是太奢侈了&lt;/p>
&lt;p>该模块的主要功能是管理和协调多种缓存操作，&lt;/p>
&lt;ol>
&lt;li>处理缓存未命中时的请求。&lt;/li>
&lt;li>向主存发出请求并等待响应。&lt;/li>
&lt;li>维护状态机以跟踪请求的进度。&lt;/li>
&lt;li>根据不同情况执行不同的控制流。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">idxMatch&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">nMSHRs&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Bool&lt;/span>&lt;span style="color:#56b6c2">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">tagList&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Wire&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">Vec&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">nMSHRs&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Bits&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">tagBits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// idxMatch 只有一个会拉高
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">tag_match&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux1H&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">idxMatch&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">tagList&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">untagBits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="状态转移及相应输出">状态转移及相应输出&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// state 是一个寄存器，用于跟踪 MSHR 的状态。状态机的主要状态包括：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// s_invalid：空闲状态，表示 MSHR 未被占用。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// s_wb_req 和 s_wb_resp：处理写回操作的状态。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// s_meta_clear：清理缓存元数据。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// s_refill_req 和 s_refill_resp：处理从主存中获取数据的请求。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// s_meta_write_req 和 s_meta_write_resp：更新缓存元数据。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// s_drain_rpq：处理重放队列的请求
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_drain_rpq&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">rpq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_invalid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_meta_write_resp&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// this wait state allows us to catch RAW hazards on the tags via nack_victim
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_drain_rpq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_meta_write_req&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_meta_write_resp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_refill_resp&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">refill_done&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">new_coh&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">coh_on_grant&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_meta_write_req&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_acquire&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// s_refill_req
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_refill_resp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_meta_clear&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_refill_req&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_wb_resp&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wb_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">acked&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_meta_clear&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wb_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">fire&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// s_wb_req
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_wb_resp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_sec_val&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_sec_rdy&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// s_wb_req, s_wb_resp, s_refill_req
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">//If we get a secondary miss that needs more permissions before we&amp;#39;ve sent
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// out the primary miss&amp;#39;s Acquire, we can upgrade the permissions we&amp;#39;re
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// going to ask for in s_refill_req
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">dirtier_cmd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">is_hit_again&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">new_coh&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">dirtier_coh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 首次miss的时候,赋值req, 这说明req是被保存在mshr上的,只有首次缺失才会改变
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_pri_val&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_pri_rdy&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">acked&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">old_coh&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">old_meta&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">coh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">needs_wb&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">old_coh&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">onCacheControl&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">M_FLUSH&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">_1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">is_hit&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">coh_on_hit&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">old_coh&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">onAccess&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 如果命中：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">//更新一致性状态：将new_coh设为coh_on_hit。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">//设置状态为MetaWrite：准备写回元数据。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">//如果未命中但标记匹配：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">//保持一致性状态不变。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">//状态转为Refill：准备请求新的数据。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag_match&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">when&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">is_hit&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// set dirty bit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">new_coh&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">coh_on_hit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_meta_write_req&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}.&lt;/span>&lt;span style="color:#e06c75">otherwise&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#7f848e">// upgrade permissions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">new_coh&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">old_coh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s_refill_req&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}.&lt;/span>&lt;span style="color:#e06c75">otherwise&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// writback if necessary and refill 标记不匹配：判断是否需要写回旧数据，并准备加载新数据。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">new_coh&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">ClientMetadata&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">onReset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">needs_wb&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s_wb_req&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s_meta_clear&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// state === s_meta_write_req or s_mata_clear
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">state&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isOneOf&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s_meta_write_req&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">s_meta_clear&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">req_idx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">coh&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_meta_clear&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">coh_on_clear&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">new_coh&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">data&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_write&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// state === s_wb_req
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wb_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_wb_req&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wb_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">id&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wb_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">old_meta&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wb_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">req_idx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wb_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">param&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">shrink_param&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wb_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">wb_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">voluntary&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// state === s_refill_req
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_acquire&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_refill_req&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">grantackq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_acquire&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">edge&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">AcquireBlock&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fromSource&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">id&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">toAddress&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">req_idx&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">blockOffBits&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lgSize&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">lgCacheBlockBytes&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">growPermissions&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">grow_param&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">_2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// state === s_drain_rpq
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_drain_rpq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">idx&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">req_idx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">meta_read&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">way_en&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">~(&lt;/span>&lt;span style="color:#d19a66">0.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">nWays&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">W&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 重放接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_drain_rpq&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">rpq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">rpq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">phys&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">Cat&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">req_idx&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">rpq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">blockOffBits&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 115;
flex-basis: 276px"
>
&lt;a href="https://VastCircle.github.io/2024/nbdcache/image-20241106195931879.png" data-size="680x590">
&lt;img src="https://VastCircle.github.io/2024/nbdcache/image-20241106195931879.png"
width="680"
height="590"
srcset="https://VastCircle.github.io/2024/nbdcache/image-20241106195931879_hu6446209596390823114.png 480w, https://VastCircle.github.io/2024/nbdcache/image-20241106195931879_hu13976723951433692804.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 291;
flex-basis: 698px"
>
&lt;a href="https://VastCircle.github.io/2024/nbdcache/image-20241118213723147.png" data-size="865x297">
&lt;img src="https://VastCircle.github.io/2024/nbdcache/image-20241118213723147.png"
width="865"
height="297"
srcset="https://VastCircle.github.io/2024/nbdcache/image-20241118213723147_hu9817244158531634010.png 480w, https://VastCircle.github.io/2024/nbdcache/image-20241118213723147_hu7861960807240307719.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h5 id="rpq">rpq&lt;/h5>
&lt;p>重放队列&lt;/p>
&lt;ul>
&lt;li>用于暂存未能成功处理的请求，比如因缺少权限、数据尚未准备好等原因导致的请求失败。&lt;/li>
&lt;li>这些请求将在条件满足时重新尝试（重放）。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">rpq&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Module&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">NBDcacheQueue&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">ReplayInternal&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">cfg&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">nRPQ&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 无论是一次缺失还是二次缺失，数据都会存放在rpq里
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">rpq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_pri_val&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_pri_rdy&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_sec_val&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">sec_rdy&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">isPrefetch&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rpq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">enq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rpq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">deq&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">replay&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_drain_rpq&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_invalid&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="addr的划分">addr的划分&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">req&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Reg&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">MSHRReqInternal&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">req_idx&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">untagBits&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">blockOffBits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">req_tag&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">untagBits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">req_block_addr&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">blockOffBits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">blockOffBits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">idx_match&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">Mux&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">runahead_flag&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">req_block_addr&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">blockOffBits&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e06c75">blockOffBits&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">B&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">req_idx&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">addr&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">untagBits&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>&lt;span style="color:#e06c75">blockOffBits&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">req_tag&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">idx_match&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">=/=&lt;/span> &lt;span style="color:#e06c75">s_invalid&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">idx_match&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 140;
flex-basis: 336px"
>
&lt;a href="https://VastCircle.github.io/2024/nbdcache/image-20241106201348356.png" data-size="584x416">
&lt;img src="https://VastCircle.github.io/2024/nbdcache/image-20241106201348356.png"
width="584"
height="416"
srcset="https://VastCircle.github.io/2024/nbdcache/image-20241106201348356_hu16547176067045010742.png 480w, https://VastCircle.github.io/2024/nbdcache/image-20241106201348356_hu4742350107554157333.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h5 id="pri_val和pri_rdy--首次缺失">pri_val和pri_rdy 首次缺失&lt;/h5>
&lt;p>仲裁器的逻辑是多个valid同时拉高,取优先级最高的,然后把相应的ready拉高&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">mshr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_pri_val&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">alloc_arb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_pri_rdy&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s_invalid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">alloc_arb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">in&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">mshr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req_pri_rdy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">alloc_arb&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">out&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ready&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">sdq_rdy&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">cacheable&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">idx_match&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="内存的输出与回复ack和acquire">内存的输出与回复（ack和acquire)&lt;/h4>
&lt;p>通过TLAbiter 去选择优先级最低的一个进行输出&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">TLArbiter&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">lowestFromSeq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">edge&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_acquire&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">mshrs&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_acquire&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#e06c75">mmios&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_access&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">TLArbiter&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">lowestFromSeq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">edge&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_finish&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">mshrs&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_finish&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 可以看到，主要是通过id来识别回复的数据该回复给谁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">mshr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_ack&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_grant&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mshr&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_ack&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#c678dd">:&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_grant&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">valid&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">mem_grant&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">bits&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">source&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">id&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">U&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="数据流向">数据流向&lt;/h2>
&lt;h3 id="读">读&lt;/h3>
&lt;p>从cpu发起数据起&lt;/p>
&lt;p>可以看到，cpu发起请求时，req和data是差了一拍的，后续会有一个s1来同步data&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 639;
flex-basis: 1533px"
>
&lt;a href="https://VastCircle.github.io/2024/nbdcache/image-20241118114559585.png" data-size="1355x212">
&lt;img src="https://VastCircle.github.io/2024/nbdcache/image-20241118114559585.png"
width="1355"
height="212"
srcset="https://VastCircle.github.io/2024/nbdcache/image-20241118114559585_hu12359997082363122781.png 480w, https://VastCircle.github.io/2024/nbdcache/image-20241118114559585_hu1847164824895025216.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>然后，cpu_req的信号会进入meta_read和data_read的仲裁器，就是要读tag和data ,index 为 addr [9:6],同时，vaddr会被转换为paddr,然后，再下一拍s2_req_addr被赋值&lt;/p>
&lt;p>第一拍仲裁并输入data,mata,第二拍返回数据（s1),第三拍送给mshr(s2),第四拍写回mata和data(s3)，&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// s2在第1级流水线存在有效指令 (s1_valid)，且该指令未被取消 (~io_cpu_s1_kill)，同时该指令是一个 SFENCE 操作 (s1_sfence) 时，并且没有出现任何异常的时候，就会被赋值为1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#e06c75">s2_valid&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">s2_valid_REG&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&lt;/span> {&lt;span style="color:#e06c75">_io_cpu_s2_xcpt_ma_ld_output&lt;/span>, &lt;span style="color:#e06c75">_io_cpu_s2_xcpt_ma_st_output&lt;/span>, &lt;span style="color:#e06c75">_io_cpu_s2_xcpt_pf_ld_output&lt;/span>, &lt;span style="color:#e06c75">_io_cpu_s2_xcpt_pf_st_output&lt;/span>, &lt;span style="color:#e06c75">_io_cpu_s2_xcpt_gf_ld_output&lt;/span>, &lt;span style="color:#e06c75">_io_cpu_s2_xcpt_gf_st_output&lt;/span>, &lt;span style="color:#e06c75">_io_cpu_s2_xcpt_ae_ld_output&lt;/span>, &lt;span style="color:#e06c75">_io_cpu_s2_xcpt_ae_st_output&lt;/span>} &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">8&amp;#39;h0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">s1_clk_en&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">_metaReadArb_io_out_valid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">s1_clk_en&lt;/span>) &lt;span style="color:#c678dd">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s2_req_addr&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> {&lt;span style="color:#d19a66">8&amp;#39;h0&lt;/span>,&lt;span style="color:#e06c75">_dtlb_io_resp_paddr&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">//当以下条件同时满足时，该表达式为真：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">//s2_valid_masked：当前请求在第2阶段有效且没有被屏蔽。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">//!s2_hit：该请求在缓存中未命中。 所以说发起mshr的请求首先需要没有命中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">s2_hit&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">s2_tag_match&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">s2_has_permission&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">s2_hit_state&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#e06c75">s2_new_hit_state&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">mshr_valid&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">s2_valid_masked&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">!&lt;/span>&lt;span style="color:#e06c75">s2_hit&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">isPrefetch&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">isRead&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">||&lt;/span> &lt;span style="color:#e06c75">isWrite&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s2_req&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">cmd&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 这个过程发生在stage 2,即读出来时就会进行检查，发起读是在stage 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#e06c75">wayMap&lt;/span>&lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#e5c07b">T&lt;/span> &lt;span style="color:#c678dd">&amp;lt;:&lt;/span> &lt;span style="color:#e5c07b">Data&lt;/span>&lt;span style="color:#56b6c2">](&lt;/span>&lt;span style="color:#e06c75">f&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span> &lt;span style="color:#56b6c2">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">T&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e5c07b">VecInit&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#e06c75">until&lt;/span> &lt;span style="color:#e06c75">nWays&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">f&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">s1_tag_eq_way&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">wayMap&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">meta&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">tag&lt;/span> &lt;span style="color:#56b6c2">===&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">s1_addr&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e06c75">untagBits&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">s1_tag_match_way&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">wayMap&lt;/span>&lt;span style="color:#56b6c2">((&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Int&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">=&amp;gt;&lt;/span> &lt;span style="color:#e06c75">s1_tag_eq_way&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e06c75">meta&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">io&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">resp&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">w&lt;/span>&lt;span style="color:#56b6c2">).&lt;/span>&lt;span style="color:#e06c75">coh&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isValid&lt;/span>&lt;span style="color:#56b6c2">()).&lt;/span>&lt;span style="color:#e06c75">asUInt&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/JACKLJ1998/article/details/124907527" target="_blank" rel="noopener"
>rocket-chip学习基础篇&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.xiangshan.cc/zh-cn/latest/memory/dcache/writeback_queue/" target="_blank" rel="noopener"
>香山手册&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://jia.je/hardware/2022/05/09/tilelink/" target="_blank" rel="noopener"
>TileLink介绍&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>CPU路径查找</title><link>https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/</link><pubDate>Thu, 07 Nov 2024 20:15:39 +0800</pubDate><guid>https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/</guid><description>&lt;h2 id="rocket-chip">Rocket chip&lt;/h2>
&lt;h3 id="fronted-frontend-tileprcidomain_3sv">Fronted frontend TilePRCIDomain_3.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 229;
flex-basis: 550px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108104913843.png" data-size="1084x473">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108104913843.png"
width="1084"
height="473"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108104913843_hu14349559803779590629.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108104913843_hu3287867411019239527.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="icache_3-icache-frontendsv">ICache_3 icache frontend.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 416px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108105132751.png" data-size="1040x599">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108105132751.png"
width="1040"
height="599"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108105132751_hu3808893905549217750.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108105132751_hu1492137510679196975.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="shiftqueue-fq-frontendsv">ShiftQueue fq frontend.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 122;
flex-basis: 293px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108202808587.png" data-size="711x581">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108202808587.png"
width="711"
height="581"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108202808587_hu513558571854330789.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108202808587_hu12987515772162186454.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="fronted-frontend-tileprcidomain_3sv-1">Fronted frontend TilePRCIDomain_3.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 190;
flex-basis: 457px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108204659652.png" data-size="1228x644">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108204659652.png"
width="1228"
height="644"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108204659652_hu5985934486798114724.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108204659652_hu17841243896445509685.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="rocket-core-tockettilesv">Rocket core TocketTile.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 255;
flex-basis: 612px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108204834283.png" data-size="1169x458">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108204834283.png"
width="1169"
height="458"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108204834283_hu14996134971470249806.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108204834283_hu10214860344796493209.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="ibuf-ibuf-rocketsv">IBuf ibuf Rocket.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 116;
flex-basis: 279px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108205159959.png" data-size="1031x884">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108205159959.png"
width="1031"
height="884"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108205159959_hu3759903210282004687.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108205159959_hu13366077453679616817.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="ex">ex&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 2397;
flex-basis: 5754px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211542867.png" data-size="983x41">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211542867.png"
width="983"
height="41"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211542867_hu14339384708395461656.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211542867_hu3540331024596521768.png 1024w"
loading="lazy"
alt="image-20241108211542867">
&lt;/a>
&lt;figcaption>image-20241108211542867&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 218;
flex-basis: 523px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211144708.png" data-size="921x422">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211144708.png"
width="921"
height="422"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211144708_hu6202380733267426743.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211144708_hu8761679022481420618.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="mem">mem&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 1021;
flex-basis: 2450px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211632083.png" data-size="388x38">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211632083.png"
width="388"
height="38"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211632083_hu17307897966553544629.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211632083_hu13539341254218040853.png 1024w"
loading="lazy"
alt="image-20241108211632083">
&lt;/a>
&lt;figcaption>image-20241108211632083&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 2990;
flex-basis: 7178px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211601921.png" data-size="987x33">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211601921.png"
width="987"
height="33"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211601921_hu18111737323352843393.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211601921_hu6438319314320234714.png 1024w"
loading="lazy"
alt="image-20241108211601921">
&lt;/a>
&lt;figcaption>image-20241108211601921&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 196;
flex-basis: 471px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211304265.png" data-size="959x488">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211304265.png"
width="959"
height="488"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211304265_hu15403985173756409354.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211304265_hu7971441811045492083.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="wb">wb&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 228;
flex-basis: 547px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211340591.png" data-size="764x335">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211340591.png"
width="764"
height="335"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211340591_hu18344354897185255550.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108211340591_hu1034902917194609187.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 595;
flex-basis: 1430px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108231547615.png" data-size="733x123">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108231547615.png"
width="733"
height="123"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108231547615_hu15759811981115158062.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108231547615_hu17846227601883584320.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 184;
flex-basis: 443px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108231941051.png" data-size="634x343">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108231941051.png"
width="634"
height="343"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108231941051_hu4135732964752938484.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241108231941051_hu1643998207803390268.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="dcache">dcache&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 480;
flex-basis: 1153px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109003838160.png" data-size="740x154">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109003838160.png"
width="740"
height="154"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109003838160_hu12429423599258332429.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109003838160_hu8295382219566744840.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 2569;
flex-basis: 6166px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109003912379.png" data-size="591x23">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109003912379.png"
width="591"
height="23"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109003912379_hu7323887026170601464.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109003912379_hu9603836019243100006.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="rocket-core-tockettilesv-1">Rocket core TocketTile.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 415px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004039636.png" data-size="912x527">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004039636.png"
width="912"
height="527"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004039636_hu2784142330751999404.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004039636_hu10720367498505083357.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="hellacachearbiter_3-dcachearb-rockettilesv">HellaCacheArbiter_3 dcacheArb RocketTile.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 256;
flex-basis: 615px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004426330.png" data-size="905x353">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004426330.png"
width="905"
height="353"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004426330_hu1359324853660240157.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004426330_hu9207067885292737744.png 1024w"
loading="lazy"
alt="image-20241109004426330">
&lt;/a>
&lt;figcaption>image-20241109004426330&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 210;
flex-basis: 504px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004355614.png" data-size="956x455">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004355614.png"
width="956"
height="455"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004355614_hu17144604750392189171.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004355614_hu14861537260138690430.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="nonblockingdcache-dcache-rockettilesv">NonBlockingDcache dcache RocketTile.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 191;
flex-basis: 458px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004552516.png" data-size="892x467">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004552516.png"
width="892"
height="467"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004552516_hu14173927082951209843.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004552516_hu4669464637936122028.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 142;
flex-basis: 342px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109005300769.png" data-size="885x620">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109005300769.png"
width="885"
height="620"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109005300769_hu13045579091895120762.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109005300769_hu12283695045688537668.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="hellacachearbiter_3-dcachearb-rockettilesv-1">HellaCacheArbiter_3 dcacheArb RocketTile.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 186;
flex-basis: 447px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109005355471.png" data-size="978x525">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109005355471.png"
width="978"
height="525"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109005355471_hu199804206045985022.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109005355471_hu2676843441091233923.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 205;
flex-basis: 493px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109005444805.png" data-size="1018x495">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109005444805.png"
width="1018"
height="495"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109005444805_hu829563224719690987.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109005444805_hu5690625155070373547.png 1024w"
loading="lazy"
alt="image-20241109005444805">
&lt;/a>
&lt;figcaption>image-20241109005444805&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="rocket-core-tockettilesv-2">Rocket core TocketTile.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 199;
flex-basis: 479px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004129640.png" data-size="1257x629">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004129640.png"
width="1257"
height="629"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004129640_hu6503813824269994709.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109004129640_hu8201521590196748229.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="boom">Boom&lt;/h2>
&lt;h3 id="boomfronted-frontend-tileprcidomainsv">BoomFronted frontend TilePRCIDomain.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 248;
flex-basis: 597px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107210802374.png" data-size="1212x487">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107210802374.png"
width="1212"
height="487"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107210802374_hu8124157532190127058.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107210802374_hu10926378619108615829.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="icache-icache-boomfrontendsv">ICache icache BoomFrontend.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 198;
flex-basis: 477px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107211007890.png" data-size="1026x516">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107211007890.png"
width="1026"
height="516"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107211007890_hu12743351659580378863.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107211007890_hu11232573669276227398.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 213;
flex-basis: 512px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107211954075.png" data-size="1085x508">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107211954075.png"
width="1085"
height="508"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107211954075_hu2647368183426488806.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107211954075_hu1322618529820894187.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="queue_66-f3-boomfrontendsv">Queue_66 f3 BoomFrontend.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 197;
flex-basis: 473px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107212114562.png" data-size="1285x652">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107212114562.png"
width="1285"
height="652"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107212114562_hu17691459690145034948.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107212114562_hu9433234162199653207.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 232;
flex-basis: 557px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107213632956.png" data-size="1348x580">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107213632956.png"
width="1348"
height="580"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107213632956_hu16113017456054408637.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241107213632956_hu15821295644890650218.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="queue_69-f4-boomfrontendsv">Queue_69 f4 BoomFrontend.sv&lt;/h4>
&lt;p>8条指令,io_enq_bits_insts_ 是单纯的截位,io_enq_bits_exp_insts_ 是做了rvc的判断&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 1570;
flex-basis: 3770px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109103010659.png" data-size="487x31">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109103010659.png"
width="487"
height="31"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109103010659_hu5951583150755631302.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109103010659_hu3473756485690163054.png 1024w"
loading="lazy"
alt="image-20241109103010659">
&lt;/a>
&lt;figcaption>image-20241109103010659&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 1307;
flex-basis: 3138px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109103033295.png" data-size="497x38">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109103033295.png"
width="497"
height="38"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109103033295_hu6908723815852712798.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109103033295_hu5621075333682278741.png 1024w"
loading="lazy"
alt="image-20241109103033295">
&lt;/a>
&lt;figcaption>image-20241109103033295&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 279;
flex-basis: 670px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104521482.png" data-size="626x224">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104521482.png"
width="626"
height="224"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104521482_hu13668299054319362810.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104521482_hu473945337481523508.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 2431;
flex-basis: 5835px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104405554.png" data-size="1313x54">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104405554.png"
width="1313"
height="54"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104405554_hu7097474170041832971.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104405554_hu16843539331689123825.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 210;
flex-basis: 505px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104205267.png" data-size="1249x593">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104205267.png"
width="1249"
height="593"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104205267_hu9148221427469936805.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104205267_hu6706071712276065359.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 207;
flex-basis: 498px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104617208.png" data-size="1232x593">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104617208.png"
width="1232"
height="593"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104617208_hu12854826774788874125.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104617208_hu2693818227387067685.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="fetchbuffer-fb-boomfrontendsv">FetchBuffer fb BoomFrontend.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 187;
flex-basis: 450px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104702043.png" data-size="1067x568">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104702043.png"
width="1067"
height="568"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104702043_hu12792520567011280099.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104702043_hu6586511409438130782.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 159;
flex-basis: 381px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104807924.png" data-size="1204x757">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104807924.png"
width="1204"
height="757"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104807924_hu8914910778328599144.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109104807924_hu4003191959123110435.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="boomfrontend-frontend-boomtilesv">BoomFrontend frontend BoomTile.sv&lt;/h3>
&lt;p>io_cpu_fetchpacket_bits_uops_0_&lt;/p>
&lt;p>io_cpu_fetchpacket_bits_uops_1_&lt;/p>
&lt;p>io_cpu_fetchpacket_bits_uops_2_&lt;/p>
&lt;p>io_cpu_fetchpacket_bits_uops_3_&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 165;
flex-basis: 397px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109101138570.png" data-size="1397x844">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109101138570.png"
width="1397"
height="844"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109101138570_hu1246486129446085080.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109101138570_hu410650136068419754.png 1024w"
loading="lazy"
alt="image-20241109101138570">
&lt;/a>
&lt;figcaption>image-20241109101138570&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="boomcore-core-boomtilesv">BoomCore core BoomTile.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 440px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105055188.png" data-size="1378x750">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105055188.png"
width="1378"
height="750"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105055188_hu13208145581452871035.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105055188_hu11233789284209721795.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="decodeunit-decode_units_0">DecodeUnit decode_units_0&lt;/h4>
&lt;p>有四个0-3&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 119;
flex-basis: 286px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105511186.png" data-size="982x822">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105511186.png"
width="982"
height="822"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105511186_hu4690906208511837126.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105511186_hu3795239866747434098.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 184;
flex-basis: 441px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105617481.png" data-size="878x477">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105617481.png"
width="878"
height="477"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105617481_hu3566629161398775991.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105617481_hu1170947271359572286.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="renamestage-rename_stage">RenameStage rename_stage&lt;/h4>
&lt;p>还有一个 RenameStage_1 fp_rename_stage,路径也是类似的&lt;/p>
&lt;p>0-3 四个&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 130;
flex-basis: 312px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105732640.png" data-size="1125x863">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105732640.png"
width="1125"
height="863"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105732640_hu6701258219543442722.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109105732640_hu3383822999881280409.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 120;
flex-basis: 288px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109124925068.png" data-size="1051x875">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109124925068.png"
width="1051"
height="875"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109124925068_hu7472471987826751948.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109124925068_hu6162648488386192514.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="basicdispatcher-dispatcher">BasicDispatcher dispatcher&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 185;
flex-basis: 445px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109123625288.png" data-size="1072x577">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109123625288.png"
width="1072"
height="577"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109123625288_hu1005127347685009220.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109123625288_hu9992304637603904959.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>分发有 0_0-3 to mem_issue_unit&lt;/p>
&lt;p>1_0-3 to int_issue_unit&lt;/p>
&lt;p>2_0-3 to fp_pipline&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 132;
flex-basis: 319px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109124116287.png" data-size="1145x861">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109124116287.png"
width="1145"
height="861"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109124116287_hu2302608763164529896.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109124116287_hu2466545148985078565.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="issueunitcollapsing_2-int_issue_unit">IssueUnitCollapsing_2 int_issue_unit&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 168;
flex-basis: 403px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109134122796.png" data-size="1092x649">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109134122796.png"
width="1092"
height="649"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109134122796_hu1942619670432513016.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109134122796_hu16532767809806540250.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 132;
flex-basis: 318px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109134037314.png" data-size="919x692">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109134037314.png"
width="919"
height="692"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109134037314_hu12345869928355474807.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109134037314_hu10410368469663258361.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="registerread_1-iregister_read">RegisterRead_1 iregister_read&lt;/h4>
&lt;p>mem_issue int_issue都一样&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 132;
flex-basis: 318px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109125903180.png" data-size="1063x801">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109125903180.png"
width="1063"
height="801"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109125903180_hu5025679811135702471.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109125903180_hu6665662834117967768.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>_iregister_read_io_exe_reqs_5_ alu_exe_unit_1&lt;/p>
&lt;p>_iregister_read_io_exe_reqs_4_ alu_exe_unit&lt;/p>
&lt;p>_iregister_read_io_exe_reqs_3_ csr_exe_unit&lt;/p>
&lt;p>_iregister_read_io_exe_reqs_2_ jmp_unit&lt;/p>
&lt;p>_iregister_read_io_exe_reqs_1_ mem_units_1&lt;/p>
&lt;p>_iregister_read_io_exe_reqs_0_ mem_units_0&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 167;
flex-basis: 401px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130000628.png" data-size="1117x667">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130000628.png"
width="1117"
height="667"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130000628_hu15411012171401665733.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130000628_hu5319994541911725384.png 1024w"
loading="lazy"
alt="image-20241109130000628">
&lt;/a>
&lt;figcaption>image-20241109130000628&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="boomcore-core-boomtilesv-1">BoomCore core BoomTile.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 130;
flex-basis: 312px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130128445.png" data-size="1141x877">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130128445.png"
width="1141"
height="877"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130128445_hu1758224827039273006.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130128445_hu12208499545330447122.png 1024w"
loading="lazy"
alt="image-20241109130128445">
&lt;/a>
&lt;figcaption>image-20241109130128445&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="lsu-lsu">LSU lsu&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 201;
flex-basis: 483px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130318130.png" data-size="1280x636">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130318130.png"
width="1280"
height="636"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130318130_hu12221615042060531444.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130318130_hu12352088154573499082.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 130;
flex-basis: 313px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130605813.png" data-size="1074x821">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130605813.png"
width="1074"
height="821"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130605813_hu15260783431844737919.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109130605813_hu13965397915383728557.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>然后就是lsu到dcache,dcache又返回相应的数据到lsu,lsu再返回到core&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 214;
flex-basis: 514px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131001573.png" data-size="1037x484">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131001573.png"
width="1037"
height="484"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131001573_hu18066360943462275031.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131001573_hu11039348808397819913.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 116;
flex-basis: 280px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131048743.png" data-size="1001x856">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131048743.png"
width="1001"
height="856"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131048743_hu14824231925546166624.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131048743_hu3851967468262644325.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 157;
flex-basis: 376px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131127891.png" data-size="1173x747">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131127891.png"
width="1173"
height="747"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131127891_hu8784843170774739462.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131127891_hu10317076730263536326.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 433px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131256339.png" data-size="1269x702">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131256339.png"
width="1269"
height="702"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131256339_hu6307592418389489485.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131256339_hu18062049520677131996.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 239;
flex-basis: 574px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131326286.png" data-size="1460x610">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131326286.png"
width="1460"
height="610"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131326286_hu5337436626393385559.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109131326286_hu8028557597829778329.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>如果不是访存肯定就不走lsu那条路径&lt;/p>
&lt;p>下面就是unit完成执行之后给rob valid信号,rob应该会相应restore指令,然后给rename_stage commit的一些信息&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 206;
flex-basis: 495px"
>
&lt;a href="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109135135557.png" data-size="1401x679">
&lt;img src="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109135135557.png"
width="1401"
height="679"
srcset="https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109135135557_hu8439613037524709407.png 480w, https://VastCircle.github.io/2024/cpu%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241109135135557_hu14250129126697904379.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="file:////home/wzy/.config/QQ/nt_qq_95f270aa33a78f2188856503295283bb/nt_data/Pic/2024-11/Thumb/59a7d36b70a63511388f26b4bafaf34c_720.jpg" >
&lt;img src="file:////home/wzy/.config/QQ/nt_qq_95f270aa33a78f2188856503295283bb/nt_data/Pic/2024-11/Thumb/59a7d36b70a63511388f26b4bafaf34c_720.jpg"
loading="lazy"
alt="img">
&lt;/a>
&lt;figcaption>img&lt;/figcaption>
&lt;/figure>&lt;/p></description></item><item><title>Scalar_runahead_execution</title><link>https://VastCircle.github.io/2024/scalar_runahead_execution/</link><pubDate>Thu, 31 Oct 2024 20:13:06 +0800</pubDate><guid>https://VastCircle.github.io/2024/scalar_runahead_execution/</guid><description>&lt;h3 id="introduction">introduction&lt;/h3>
&lt;p>(i) 一种适用于顺序执行核心的高性能、低开销的硬件预取技术，称为标量前推执行（𝑆𝑅𝐸）。𝑆𝑅𝐸在寄存器传输级有效预取复杂的内存访问模式，并实现了硬件优化策略，以尽量减少能量和面积的开销（如图1所示）。&lt;/p>
&lt;p>(ii) 为解决前推执行和缓存替换对有效预取的掩盖问题，我们引入了一种新的工作负载分析方法。该方法通过探索独特的工作负载特性，增强了前推技术在隐藏内存延迟方面的能力，从而缩短总执行时间。&lt;/p>
&lt;p>(iii) 利用自定义指令，我们提出了三种不同的模式，以解决前推技术的安全漏洞，并进一步提升性能。&lt;/p>
&lt;h3 id="background">background&lt;/h3>
&lt;p>A.标量核心中的长延迟内存访问&lt;/p>
&lt;p>顺序执行核心在面积和功耗方面相比乱序执行核心具有显著优势，使其本质上更适合需要长时间运行的场景。然而，在访问稀疏数据结构时，乱序核心可以通过诸如ROB（重排序缓冲区）、保留站、加载缓冲区和存储缓冲区等组件缓解由末级缓存未命中引起的内存访问延迟。相比之下，顺序执行核心缺乏应对内存延迟的有效策略，甚至L1缓存未命中也会显著影响性能。在严重情况下，执行时间的大部分都花费在等待内存上，导致顺序核心的平均每指令周期（CPI）可能达到数十。因此，解决内存延迟问题对于提升顺序执行核心的性能至关重要。&lt;/p>
&lt;p>B. runahead technique
然而，由于高开销，它们并不适合在顺序处理器上实现。以原始的runahead execute为例，当一条长延迟内存访问指令位于指令窗口的头部，导致指令窗口已满并阻塞流水线时，处理器会对架构寄存器文件和分支历史寄存器的状态进行检查点操作，促使处理器进入runahead mode。阻塞指令窗口的内存访问指令的目标寄存器将被标记为INV（无效），并在后续指令流中传播，以防止错误的内存请求。当内存请求返回时，处理器退出前推模式并恢复相关的架构状态。&lt;/p>
&lt;h3 id="overview">overview&lt;/h3>
&lt;p>目前处理器中的推测预取技术能够有效管理复杂的间接内存访问模式，但在微架构设计中带来了显著的硬件开销，使其不适用于小型核心。在周期精确的仿真器中实现这些技术会导致设计侵入性，并需开发专门的拦截电路。𝑆𝑅𝐸在寄存器传输级开发，通过一系列优化策略来减轻开销，从而确保在低成本的情况下实现高性能。&lt;strong>在runahead execute进入条件中集成了一种间接内存访问检测机制&lt;/strong>，提升了预取的准确性和覆盖范围。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 200;
flex-basis: 480px"
>
&lt;a href="https://VastCircle.github.io/2024/scalar_runahead_execution/image-20241031202810483.png" data-size="1296x648">
&lt;img src="https://VastCircle.github.io/2024/scalar_runahead_execution/image-20241031202810483.png"
width="1296"
height="648"
srcset="https://VastCircle.github.io/2024/scalar_runahead_execution/image-20241031202810483_hu7108600535510953162.png 480w, https://VastCircle.github.io/2024/scalar_runahead_execution/image-20241031202810483_hu7882577258176118585.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>在RCU中，为拦截正常执行模式下预取数据的回写，MSHR追踪每个&lt;strong>缓存未命中请求的详细信息，包括回写位置、请求地址和顺序&lt;/strong>。在寄存器文件中构建了拦截电路（图2a）。在寄存器文件中还建立了一个CP提取和回写电路，并包含多端口的CP（图2b），通过与级联控制电路集成，利用多个周期提取和回写处理器的状态信息。&lt;/p>
&lt;p>对于在runahead阶段的内存未命中请求以及瞬态执行(transient execution)期间识别的&lt;strong>无效内存未命中&lt;/strong>请求，会检测随后使用缺失数据的寄存器编号，并在scoreboard上重置相应位置（图2c）。开发了一个无效检测和传播机制，用于追踪负责流水线释放的寄存器编号和内存未命中地址，从而防止错误的预取请求。此外，构建了一个紧凑的dual-way cache，用于在runahead 阶段收集存储指令的存储值，确保内存指令的正确执行（图2d）。&lt;/p>
&lt;p>我们还开发了一个自定义ISA接口以增强灵活性，包括（图2e）：(i) Safe Mode，解决在前推推测执行期间因分支预测错误导致的机密数据泄漏风险；(ii) Miss Counter Table,，一个双入口表，用于自定义前推过程的终止点，以优化不同硬件和工作负载的性能；(iii) Aggressive Mode，提供禁用前推期间的FPU选项，防止在浮点运算密集型工作负载中长指令阻塞，并允许发出更多预取请求。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 124;
flex-basis: 297px"
>
&lt;a href="https://VastCircle.github.io/2024/scalar_runahead_execution/image-20241105214333838.png" data-size="1021x823">
&lt;img src="https://VastCircle.github.io/2024/scalar_runahead_execution/image-20241105214333838.png"
width="1021"
height="823"
srcset="https://VastCircle.github.io/2024/scalar_runahead_execution/image-20241105214333838_hu3909055623410473370.png 480w, https://VastCircle.github.io/2024/scalar_runahead_execution/image-20241105214333838_hu5376785459573156400.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="微架构">微架构&lt;/h2>
&lt;p>选择了开源的Rocket Chip SoC作为𝑆𝑅𝐸微架构的基础。Rocket Chip包含一个低功耗的Rocket核心，支持开源的RV64GC RISC-V指令集，并使用Chisel硬件描述语言编写。它具备支持基于页面的虚拟内存的内存管理单元（MMU）、一个非阻塞数据缓存，以及带有分支预测功能的前端。&lt;/p>
&lt;p>A. The Runahead Control Unit
进入 pseudo-enter 阶段的条件通过处理来自L2缓存MSHR的未命中请求信息（回写位置）来确定。对于non-blocking cache的stall-on-use机制，在&lt;strong>解码&lt;/strong>阶段检测数据使用的时机，使处理器能够在该周期进入pseudo-enter阶段（图3a）。在pseudo-enter阶段，处理器检查是否存在&lt;strong>间接内存访问&lt;/strong>。如果检测到这种访问，处理器将转入runahead execution phase，通常持续十个周期（图3b）。在runahead execution phase，为了便于后续释放流水线并有效管理数据回写寄存器，必须跟踪来自L1缓存MSHR的Load-Miss和Gain-Miss信息，其中包括回写寄存器编号、请求地址和读/写指针等详细信息（图3c）。同时，为防止Load-Miss和Gain-Miss阻塞流水线，通过识别未命中回写寄存器编号来释放流水线并使对应的寄存器和地址无效（图3d）。在进入伪退出阶段时，目标是拦截与Gain-miss相关的数据回写。通过基于L1缓存MSHR中的请求回写寄存器编号、地址和读/写指针，精确拦截相同或不同块的回写请求来实现。此外，同一块内的Gain-miss会触发MSHR重放机制，可能会中断前推过程。拦截电路的扩展设计通过检测并拦截重复请求来解决此问题，以防止此类中断（图3f）。&lt;/p>
&lt;p>B. The Runahead Control FSM
为了实现对预取架构的精确控制，我们将有限状态机（FSM）机制与前推执行模式紧密集成，以增强处理器在处理长延迟内存访问时的效率。FSM通过在各状态间切换动态管理预取操作，确保处理器在内存延迟期间仍保持高效。FSM从伪进入状态开始，在该状态下，它处理来自L2缓存的未命中状态保持寄存器（MSHR）的未命中请求信息（回写位置）。此时，由于数据缓存的“stall on use”机制，处理器不仅不会完全停顿，还会继续执行指令。在这里，处理器检查流水线指令，识别出间接内存访问后，进入前推进入状态。此状态下处理器保存当前状态和寄存器，为后续从前推模式无缝恢复正常操作做好准备，以维护系统完整性（图3a）。完成前推进入状态的相关处理后，处理器直接进入前推执行状态。在前推执行状态下，处理器继续执行指令而不将结果提交至寄存器文件，通过在Load-Miss解决前预取数据来有效减少空闲时间。&lt;/p>
&lt;p>为实现此目的，FSM从L1缓存的MSHR中跟踪Load-Miss和Gain-Miss的详细信息，包括回写寄存器编号、请求地址和读/写指针。流水线被释放，对应的寄存器和地址被无效化，以防止阻塞。一旦Load-Miss数据返回，FSM便切换至前推通过状态，该状态作为中介，决定处理器应进入伪退出状态还是直接进入正常退出状态。FSM在两种情况下会进入伪退出状态：(i) 在数据回写前达到效益点，通过比较请求地址和读/写指针；或(ii) Gain-Miss计数器在数据回写后达到指定值，表明已达到效益点。在伪退出状态，FSM通过准确检测相同和不同块的重复请求来拦截与Gain-Miss相关的回写请求。此拦截机制防止了因相同块中的Gain-Miss触发重放机制而中断前推过程。FSM随后完成操作，确保所有前推执行的指令已完成或安全丢弃。&lt;/p>
&lt;p>如果前推过程中没有未解决的依赖关系，FSM将进入前推退出状态，允许处理器恢复正常处理。然而，若前推执行期间存在无法解决的依赖关系或执行异常，FSM可能会暂时切换至前推无效状态，并通过控制流水线停顿、等待Load-Miss正常返回后再退出前推模式。&lt;/p>
&lt;p>C. 多周期检查点和释放电路&lt;/p>
&lt;p>处理器状态的checkpoint and restore，包括 GHR（全局历史寄存器）、RAS（返回地址堆栈）和架构寄存器文件，对于确保超前运行中的正确操作至关重要。模式和普通模式。 GHR 和 RAS 处理分支历史记录和返回地址跟踪。当处理器进入超前运行模式时，这些结构在单个周期内设置检查点，保留分支预测和返回地址计算所需的信息。退出超前运行模式后，先前保存的分支历史记录和返回地址将被恢复，从而保持准确的控制流，而不会增加显着的性能开销。相比之下，存储处理器架构状态的架构寄存器文件涉及更多数据和复杂性。为了管理这一点，使用了多周期检查点和释放机制，这减少了对扩展模块接口的需求并降低了处理器之间的通信压力。尽管对架构寄存器文件进行检查点需要多个周期，但它与在超前运行模式和正常模式之间转换时清除和重新填充管道所需的五个周期过程相一致，从而避免了任何额外的性能损失。&lt;/p>
&lt;p>D. 预取管理单元
我们设计了预取管理单元（PMU）以检测和拦截错误的预取请求，从而使推测执行能够有效处理内存访问指令。PMU由两个主要结构组成：无效集合单元（ISU），用于拦截错误的预取地址，以及前推缓存（RC），用于在前推过程中存储存储指令的值。&lt;/p>
&lt;p>&lt;strong>ISU（无效集合单元）&lt;/strong>：Invfile用于存储无效寄存器编号和地址信息，类似于记分板。每个寄存器编号或前推缓存条目都有一个指示其有效性的位（图4 a）。Load-miss和Gain-miss的写回寄存器编号以及在前推过程中存储的无效地址，通常是Invfile的来源，相关机制检测到时，Invfile被激活。我们将来自执行阶段的RS与内存请求地址进行比较，并与Invfile中的相应位进行比对，产生三种情况（图4 b）：&lt;/p>
&lt;ol>
&lt;li>当源寄存器编号存在于Invfile中时，启动无效传播机制，设置相应的目标寄存器编号。&lt;/li>
&lt;li>如果加载指令的地址有效或所有源寄存器有效，则触发无效重置机制，重置相应寄存器编号的无效位。&lt;/li>
&lt;li>如果发现存储地址有效，则激活无效重置机制，重置相应地址位。&lt;/li>
&lt;/ol>
&lt;p>基于这些操作的结果，无效寄存器信号转变为内存访问阻塞信号和在写回阶段对处理器的流水线释放信号。无效地址信号被转发到前推缓存模块，以确定加载块是否有效命中前推缓存。&lt;/p>
&lt;p>&lt;strong>RC（前推缓存）&lt;/strong>：前推缓存被设计为紧凑的二路关联存储结构，每个条目包含标签和数据信息，每个数据条目的大小为两个字（具体为16B）（图4 c）。在前推过程中，加载地址同时访问该缓存和L1缓存。它根据内存访问地址的索引信息选择行，匹配适当的集合，然后根据偏移信息选择字节，最后根据方式命中检索匹配的数据。命中机制涉及将内存访问地址的标签信息与前推缓存的标签信息进行比较。如果匹配，则进一步验证数据的有效性。如果有效，则生成命中信号，并用作数据选择的控制信号（图4 d）。在退出前推时，前推缓存中的所有值都被置为无效，以防止访问过时的值，直到新的前推过程重置存储的地址。对于数据替换机制，我们采用伪LRU替换策略选择最不常用的方式进行替换。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>处理器成功运行的标志</title><link>https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/</link><pubDate>Thu, 31 Oct 2024 13:11:58 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/</guid><description>&lt;h2 id="处理器运行">处理器运行&lt;/h2>
&lt;p>总共的过程应该是在exit之后,处理器(core0)会循环执行下面的代码,主要是要向0x80001ec0写入数据1,会写入到dcache那边&lt;/p>
&lt;p>而serdesser会去l2读取0x80001ec0的数据,中间通过fbus,sbus到l2,如果读取到数据为1的话,就会相应的去发送相关exit信号&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 279;
flex-basis: 670px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112094843063.png" data-size="802x287">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112094843063.png"
width="802"
height="287"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112094843063_hu10834925242811752114.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112094843063_hu15820108949805341374.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>对于fbus_serdesser那边什么时候发送的a_valid ,粗略的看了一下是它和SerialRAM里的serdesser有相互依赖的关系,最后估计会追溯到c代码那边去,从波形图看的话,发送是较为规律的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 366;
flex-basis: 878px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112101917914.png" data-size="1380x377">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112101917914.png"
width="1380"
height="377"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112101917914_hu11155479995035520656.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112101917914_hu15662451549408405609.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="路径">路径&lt;/h2>
&lt;h5 id="tileprcidomain-tile_prici_domain-digitaltopsv">TilePRCIDomain tile_prici_domain DigitalTop.sv&lt;/h5>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 248;
flex-basis: 595px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112095854692.png" data-size="1176x474">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112095854692.png"
width="1176"
height="474"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112095854692_hu14349239179337440927.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112095854692_hu3909130621525587775.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h5 id="systembus-subsystem_sbus-digitaltopsv">SystemBus subsystem_sbus DigitalTop.sv&lt;/h5>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 360;
flex-basis: 865px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112095656683.png" data-size="1424x395">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112095656683.png"
width="1424"
height="395"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112095656683_hu4604888188722323693.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112095656683_hu16983584808876366820.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 339;
flex-basis: 815px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112095407141.png" data-size="1608x473">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112095407141.png"
width="1608"
height="473"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112095407141_hu17372420628291058920.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112095407141_hu8216488962024402803.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h5 id="coherencemanagerwrapper-subsystem_l2_wrapper-digitaltopsv">CoherenceManagerWrapper subsystem_l2_wrapper DigitalTop.sv&lt;/h5>
&lt;p>已经从l2读取数据&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 417;
flex-basis: 1001px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112094514289.png" data-size="1594x382">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112094514289.png"
width="1594"
height="382"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112094514289_hu6759119080851267310.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112094514289_hu6581819576431925325.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 254;
flex-basis: 611px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112005435034.png" data-size="1434x563">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112005435034.png"
width="1434"
height="563"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112005435034_hu3657893311516738575.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112005435034_hu17225638964003990272.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h5 id="systembus-subsystem_sbus-digitaltopsv-1">SystemBus subsystem_sbus DigitalTop.sv&lt;/h5>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 359;
flex-basis: 863px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112005336223.png" data-size="1453x404">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112005336223.png"
width="1453"
height="404"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112005336223_hu5300597055102052288.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112005336223_hu10407911388166034952.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 355;
flex-basis: 854px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112004328753.png" data-size="1644x462">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112004328753.png"
width="1644"
height="462"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112004328753_hu9126771300717696823.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112004328753_hu8868113206527878079.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h5 id="tlbuffer_2-subsystem_fbus_buffer-digitaltopsv">TLBuffer_2 subsystem_fbus_buffer Digitaltop.sv&lt;/h5>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 290;
flex-basis: 696px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112004109412.png" data-size="1479x510">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112004109412.png"
width="1479"
height="510"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112004109412_hu4526944589407405904.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112004109412_hu16418225234376789943.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 149;
flex-basis: 357px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112003733355.png" data-size="1100x738">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112003733355.png"
width="1100"
height="738"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112003733355_hu11001060511033817350.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112003733355_hu2657521878439941150.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h5 id="tlinterconnectcoupler_16-subsystem_fbus_coupler_from_port_named_serial_tl_ctrl-digitaltopsv">TLInterconnectCoupler_16 subsystem_fbus_coupler_from_port_named_serial_tl_ctrl Digitaltop.sv&lt;/h5>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 283;
flex-basis: 680px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112003617281.png" data-size="1344x474">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112003617281.png"
width="1344"
height="474"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112003617281_hu16922644344907968853.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112003617281_hu17719202674284953709.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 203;
flex-basis: 487px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112002846883.png" data-size="1553x764">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112002846883.png"
width="1553"
height="764"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112002846883_hu14592278883094086627.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112002846883_hu4833152105054023305.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h5 id="tlserdesser-subsystem_fbus_serdesser-digitaltopsv">TLSerdesser subsystem_fbus_serdesser Digitaltop.sv&lt;/h5>
&lt;p>serdesser应该在定时发送请求&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 363;
flex-basis: 872px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112002506790.png" data-size="1635x450">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112002506790.png"
width="1635"
height="450"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112002506790_hu12038551549462248417.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112002506790_hu443204763364450633.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 563;
flex-basis: 1351px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112002039647.png" data-size="1408x250">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112002039647.png"
width="1408"
height="250"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112002039647_hu8643445582540208317.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112002039647_hu11892537281396842399.png 1024w"
loading="lazy"
alt="image-20241112002039647">
&lt;/a>
&lt;figcaption>image-20241112002039647&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h5 id="asyncqueue-subsystem_fbus_out_async--digitaltopsv">AsyncQueue subsystem_fbus_out_async Digitaltop.sv&lt;/h5>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 381;
flex-basis: 914px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112001843957.png" data-size="1441x378">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112001843957.png"
width="1441"
height="378"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112001843957_hu8581469363293127232.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112001843957_hu9406776523032479155.png 1024w"
loading="lazy"
alt="image-20241112001843957">
&lt;/a>
&lt;figcaption>image-20241112001843957&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="digitaltop-system-chiptopsv">DigitalTop system ChipTop.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 597;
flex-basis: 1434px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112001700816.png" data-size="1452x243">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112001700816.png"
width="1452"
height="243"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112001700816_hu13870121274252969278.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112001700816_hu10613041319749448004.png 1024w"
loading="lazy"
alt="image-20241112001700816">
&lt;/a>
&lt;figcaption>image-20241112001700816&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="chiptop-chiptop0-testharnesssv">ChipTop chiptop0 TestHarness.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 265;
flex-basis: 636px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112001324352.png" data-size="1121x423">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112001324352.png"
width="1121"
height="423"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112001324352_hu9204217543704736704.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241112001324352_hu124251101865932250.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="serialram-ram-testharnesssv">SerialRAM ram TestHarness.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 223;
flex-basis: 536px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241111235459860.png" data-size="1020x456">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241111235459860.png"
width="1020"
height="456"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241111235459860_hu301635820281566860.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241111235459860_hu7170903320587178141.png 1024w"
loading="lazy"
alt="image-20241111235459860">
&lt;/a>
&lt;figcaption>image-20241111235459860&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 223;
flex-basis: 537px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241111234654487.png" data-size="732x327">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241111234654487.png"
width="732"
height="327"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241111234654487_hu3335290317010757017.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241111234654487_hu11996125452438590909.png 1024w"
loading="lazy"
alt="image-20241111234654487">
&lt;/a>
&lt;figcaption>image-20241111234654487&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="simtsi-success_exit_sim-testharnesssv">SimTSI success_exit_sim TestHarness.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 238;
flex-basis: 573px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241031135417464.png" data-size="803x336">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241031135417464.png"
width="803"
height="336"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241031135417464_hu13613305115897699263.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241031135417464_hu11887304916702126665.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">input&lt;/span> &lt;span style="color:#e06c75">clock&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">input&lt;/span> &lt;span style="color:#e06c75">reset&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">input&lt;/span> &lt;span style="color:#e06c75">tsi_out_valid&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">output&lt;/span> &lt;span style="color:#e06c75">tsi_out_ready&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">input&lt;/span> [&lt;span style="color:#d19a66">31&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>] &lt;span style="color:#e06c75">tsi_out_bits&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">output&lt;/span> &lt;span style="color:#e06c75">tsi_in_valid&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">input&lt;/span> &lt;span style="color:#e06c75">tsi_in_ready&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">output&lt;/span> [&lt;span style="color:#d19a66">31&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>] &lt;span style="color:#e06c75">tsi_in_bits&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">output&lt;/span> [&lt;span style="color:#d19a66">31&lt;/span>&lt;span style="color:#56b6c2">:&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>] &lt;span style="color:#e06c75">exit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 115;
flex-basis: 276px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241031132938852.png" data-size="801x696">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241031132938852.png"
width="801"
height="696"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241031132938852_hu1086351026104805095.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241031132938852_hu16573299286926149045.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 108;
flex-basis: 260px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241031142422181.png" data-size="810x747">
&lt;img src="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241031142422181.png"
width="810"
height="747"
srcset="https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241031142422181_hu9005692429509185126.png 480w, https://VastCircle.github.io/2024/%E5%A4%84%E7%90%86%E5%99%A8%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A0%87%E5%BF%97/image-20241031142422181_hu2502667652843423368.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p></description></item><item><title>Big_soc_路径查找</title><link>https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/</link><pubDate>Wed, 30 Oct 2024 16:25:09 +0800</pubDate><guid>https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/</guid><description>&lt;h2 id="路径查找">路径查找&lt;/h2>
&lt;h3 id="bootrom-clocksinkdomain_1sv">Bootrom ClockSinkDomain_1.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 158;
flex-basis: 381px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030164859345.png" data-size="567x357">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030164859345.png"
width="567"
height="357"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030164859345_hu13999121753685267221.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030164859345_hu10622608143385405980.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="clocksinkdomain_1-bootromdomainwrapper-digitaltopsv">ClockSinkDomain_1 bootROMDomainWrapper DigitalTop.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 265;
flex-basis: 638px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030164741290.png" data-size="907x341">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030164741290.png"
width="907"
height="341"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030164741290_hu102353570205705049.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030164741290_hu2590073761771574827.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="peripherybus_1-subsystem_cbus--digitaltopsv">PeripheryBus_1 subsystem_cbus DigitalTop.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 306;
flex-basis: 735px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030165640444.png" data-size="923x301">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030165640444.png"
width="923"
height="301"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030165640444_hu10383002120596061510.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030165640444_hu18402210719830523042.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="tlinterconnectcoupler_33-coupler_to_bootrom-tlinterconnectcoupler_33sv">TLInterconnectCoupler_33 coupler_to_bootrom TLInterconnectCoupler_33.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 133;
flex-basis: 321px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031010752745.png" data-size="870x650">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031010752745.png"
width="870"
height="650"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031010752745_hu3992272573636306381.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031010752745_hu9979219063896286076.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="tlxbar_5-out_xbar--peripherybus_1sv">TLXbar_5 out_xbar PeripheryBus_1.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 166;
flex-basis: 398px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030185219084.png" data-size="793x477">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030185219084.png"
width="793"
height="477"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030185219084_hu10448680742370513107.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030185219084_hu17420875698955200549.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 435px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202332950.png" data-size="713x393">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202332950.png"
width="713"
height="393"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202332950_hu9250519818328254813.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202332950_hu8645570273136880355.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="tlfifofixer_2-fixer-peripherybus_1sv">TLFIFOFixer_2 fixer PeripheryBus_1.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202242426.png" data-size="776x510">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202242426.png"
width="776"
height="510"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202242426_hu1671350503351295985.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202242426_hu2891245334902017403.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 110;
flex-basis: 265px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202200430.png" data-size="679x613">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202200430.png"
width="679"
height="613"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202200430_hu4279736998364245208.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202200430_hu6367668441550391184.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="tlbuffer_4-buffer-peripherybus_1sv">TLBuffer_4 buffer PeripheryBus_1.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 117;
flex-basis: 281px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202115325.png" data-size="703x599">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202115325.png"
width="703"
height="599"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202115325_hu2093073729786551643.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104202115325_hu9788218670477972827.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 130;
flex-basis: 312px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201933229.png" data-size="681x523">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201933229.png"
width="681"
height="523"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201933229_hu14151955852051181800.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201933229_hu10350937311788669531.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="tlatomicautomata_1-atomics-peripherybus_1sv">TLAtomicAutomata_1 atomics PeripheryBus_1.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 139;
flex-basis: 333px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201838520.png" data-size="740x532">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201838520.png"
width="740"
height="532"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201838520_hu15474228921633105648.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201838520_hu18177123055238767923.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 121;
flex-basis: 291px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201741377.png" data-size="715x589">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201741377.png"
width="715"
height="589"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201741377_hu12807145140930188950.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201741377_hu16454610261658107867.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="tlxbar_4-in_xbar-peripherybus_1sv">TLXbar_4 in_xbar PeripheryBus_1.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 196;
flex-basis: 471px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201652036.png" data-size="721x367">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201652036.png"
width="721"
height="367"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201652036_hu15463308738735522326.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201652036_hu11076147321959160063.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 128;
flex-basis: 308px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201454888.png" data-size="760x591">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201454888.png"
width="760"
height="591"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201454888_hu1648661250605773999.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104201454888_hu9220552418403513128.png 1024w"
loading="lazy"
alt="image-20241104201454888">
&lt;/a>
&lt;figcaption>image-20241104201454888&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="peripyherybus_1-subsystem_cbus-digitaltopsv">PeripyheryBus_1 subsystem_cbus DigitalTop.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 247;
flex-basis: 594px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104200308864.png" data-size="1196x483">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104200308864.png"
width="1196"
height="483"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104200308864_hu2987058579385441560.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104200308864_hu8238927459530301682.png 1024w"
loading="lazy"
alt="image-20241104200308864">
&lt;/a>
&lt;figcaption>image-20241104200308864&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="systembus-subsystem_sbus-digitaltopsv">SystemBus subsystem_sbus DigitalTop.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 390;
flex-basis: 937px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104200104409.png" data-size="1051x269">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104200104409.png"
width="1051"
height="269"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104200104409_hu3587345545705323987.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104200104409_hu7002349993959100018.png 1024w"
loading="lazy"
alt="image-20241104200104409">
&lt;/a>
&lt;figcaption>image-20241104200104409&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="tlinterconnectcoupler-aoupler_to_bus_named_subsystem_cbus-systembussv">TLInterconnectCoupler aoupler_to_bus_named_subsystem_cbus SystemBus.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 124;
flex-basis: 299px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104203908777.png" data-size="957x768">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104203908777.png"
width="957"
height="768"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104203908777_hu6125513517208744189.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104203908777_hu17150586439581193941.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="tlxbar-system_bus_xbar-systembussv">TLXbar system_bus_xbar SystemBus.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 196;
flex-basis: 472px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204100508.png" data-size="850x432">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204100508.png"
width="850"
height="432"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204100508_hu4689703313920921600.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204100508_hu3866374991973846319.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 157;
flex-basis: 377px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204343965.png" data-size="885x562">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204343965.png"
width="885"
height="562"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204343965_hu5442870221149858326.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204343965_hu15635827722560487754.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="tlfifofixer-fixer-systembussv">TLFIFOFixer fixer SystemBus.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 209;
flex-basis: 503px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204454714.png" data-size="898x428">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204454714.png"
width="898"
height="428"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204454714_hu17321549004515328782.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204454714_hu3268317837269684717.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 269;
flex-basis: 647px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204645357.png" data-size="1111x412">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204645357.png"
width="1111"
height="412"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204645357_hu14169484330165946716.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104204645357_hu1129588965761359889.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="systembus-subsystem_sbus-digitaltopsv-1">SystemBus subsystem_sbus DigitalTop.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 338;
flex-basis: 812px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205256635.png" data-size="1138x336">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205256635.png"
width="1138"
height="336"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205256635_hu7523165942051679694.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205256635_hu15364917323929948535.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="tileprcidomain-tile_prci_domain-digitaltopsv">TilePRCIDomain tile_prci_domain DigitalTop.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 318;
flex-basis: 763px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205613883.png" data-size="1168x367">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205613883.png"
width="1168"
height="367"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205613883_hu5550151832250196451.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205613883_hu16612706730424766286.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="tlbuffer_15-buffer-tileprcidomainsv">TLBuffer_15 buffer TilePRCIDomain.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 154;
flex-basis: 370px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205853472.png" data-size="770x499">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205853472.png"
width="770"
height="499"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205853472_hu264810291881296659.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205853472_hu13279160373168244277.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 173;
flex-basis: 416px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205948237.png" data-size="668x385">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205948237.png"
width="668"
height="385"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205948237_hu18143089294266212219.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104205948237_hu3551002334042921988.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="toomtile-tile_reset_domain_boom_tile-tileprcidomainsv">ToomTile tile_reset_domain_boom_tile TilePRCIDomain.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 129;
flex-basis: 310px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104210127393.png" data-size="716x554">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104210127393.png"
width="716"
height="554"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104210127393_hu18425995802566615571.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104210127393_hu3630265501328523238.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h5 id="tlxbar_8-tlmasterxbar-boomtilesv">TLXbar_8 tlMasterXbar BoomTile.sv&lt;/h5>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 169;
flex-basis: 406px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104214423660.png" data-size="725x428">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104214423660.png"
width="725"
height="428"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104214423660_hu6573180292948110858.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104214423660_hu2808990919005740674.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 96;
flex-basis: 230px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104215304702.png" data-size="681x708">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104215304702.png"
width="681"
height="708"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104215304702_hu285788930342095181.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241104215304702_hu11573631366708722688.png 1024w"
loading="lazy"
alt="image-20241104215304702">
&lt;/a>
&lt;figcaption>image-20241104215304702&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 422px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241105144018651.png" data-size="1394x792">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241105144018651.png"
width="1394"
height="792"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241105144018651_hu16716922515995658433.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241105144018651_hu12977846780869885404.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;hr>
&lt;hr>
&lt;p>后面可以不看了&lt;/p>
&lt;h3 id="coherencemanagerwrapper-subsystem_l2_wrapper-digitaltopsv">CoherenceManagerWrapper subsystem_l2_wrapper DigitalTop.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 174;
flex-basis: 419px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031013341985.png" data-size="1192x682">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031013341985.png"
width="1192"
height="682"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031013341985_hu4239901299354339721.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031013341985_hu17551902722383602852.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="inclusivecache-l2--coherencemanagerwrappersv">InclusiveCache l2 CoherenceManagerWrapper.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 117;
flex-basis: 283px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031112634641.png" data-size="717x608">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031112634641.png"
width="717"
height="608"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031112634641_hu2709144765505328249.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031112634641_hu17114887769523885667.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 95;
flex-basis: 229px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113153384.png" data-size="746x780">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113153384.png"
width="746"
height="780"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113153384_hu10994807932654197116.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113153384_hu9974981150287781469.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="tlcachecork-cork--coherencemanagerwrappersv">TLCacheCork cork &lt;strong>CoherenceManagerWrapper.sv&lt;/strong>&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 244px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113807118.png" data-size="816x802">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113807118.png"
width="816"
height="802"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113807118_hu9076489822654885813.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113807118_hu17825230885535812463.png 1024w"
loading="lazy"
alt="image-20241031113807118">
&lt;/a>
&lt;figcaption>image-20241031113807118&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 131;
flex-basis: 315px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113912098.png" data-size="795x604">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113912098.png"
width="795"
height="604"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113912098_hu13582625459371530707.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113912098_hu14921006148919335977.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="bankbinder-binder-coherencemanagerwrappersv">BankBinder binder CoherenceManagerWrapper.sv&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 106;
flex-basis: 254px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113951757.png" data-size="835x787">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113951757.png"
width="835"
height="787"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113951757_hu4867654425878897104.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031113951757_hu416188532021133310.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="coherencemanagerwrapper-subsystem_l2_wrapper--digitaltopsv">CoherenceManagerWrapper subsystem_l2_wrapper DigitalTop.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 192;
flex-basis: 463px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031095210458.png" data-size="1258x652">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031095210458.png"
width="1258"
height="652"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031095210458_hu1991859796095460662.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031095210458_hu12504717475907084572.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="memorybus-subsystem_mbus-digitaltopsv">memorybus subsystem_mbus DigitalTop.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 223;
flex-basis: 536px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031095313158.png" data-size="1290x577">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031095313158.png"
width="1290"
height="577"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031095313158_hu10547067537806860942.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241031095313158_hu8519425387056163879.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 129;
flex-basis: 310px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030204624185.png" data-size="721x558">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030204624185.png"
width="721"
height="558"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030204624185_hu4951593277296956299.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030204624185_hu17132605656731841606.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="digitaltop-system-chiptopsv">DigitalTop system chiptop.sv&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 353;
flex-basis: 849px"
>
&lt;a href="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030204011379.png" data-size="1012x286">
&lt;img src="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030204011379.png"
width="1012"
height="286"
srcset="https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030204011379_hu8900226278681400073.png 480w, https://VastCircle.github.io/2024/big_soc_%E8%B7%AF%E5%BE%84%E6%9F%A5%E6%89%BE/image-20241030204011379_hu973512857469762760.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="dram">Dram&lt;/h3>
&lt;p>略&lt;/p></description></item><item><title>Chipyard的三个highest_level</title><link>https://VastCircle.github.io/2024/chipyard%E7%9A%84%E4%B8%89%E4%B8%AAhighest_level/</link><pubDate>Tue, 29 Oct 2024 21:56:38 +0800</pubDate><guid>https://VastCircle.github.io/2024/chipyard%E7%9A%84%E4%B8%89%E4%B8%AAhighest_level/</guid><description>&lt;p>Chipyard SoC 中三个最高层次是&lt;code>ChipTop&lt;/code>(DUT)、&lt;code>TestHarness&lt;/code>和&lt;code>TestDriver&lt;/code>。&lt;code>ChipTop&lt;/code>和&lt;code>TestHarness&lt;/code>均由 Chisel 生成器发出。&lt;code>TestDriver&lt;/code>用作我们的测试平台，是 Rocket Chip 中的 Verilog 文件。&lt;/p>
&lt;h2 id="chiptopdut">ChipTop(DUT)&lt;/h2>
&lt;p>ChipTop 是顶层模块，负责实例化 System 子模块，通常是 DigitalTop 的具体实例。设计的大部分内容位于 System 中。ChipTop 层中存在的其他组件通常是 IO 单元、时钟接收器和多路复用器、重置同步器以及其他需要存在于 System 之外的模拟 IP。IOBinders 负责实例化与 System 的 IO 相对应的 ChipTop IO 的 IO 单元。HarnessBinders 负责实例化测试夹具，以连接到 ChipTop 端口。大多数类型的设备和测试夹具都可以使用自定义的 IOBinders 和 HarnessBinders 进行实例化。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">DigitalTop&lt;/span> &lt;span style="color:#e06c75">system&lt;/span> ( &lt;span style="color:#7f848e">// @[ChipTop.scala:28:35]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> .&lt;span style="color:#e06c75">clock&lt;/span> (&lt;span style="color:#e06c75">_system_auto_implicitClockGrouper_out_clock&lt;/span>), &lt;span style="color:#7f848e">// @[ChipTop.scala:28:35]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> .&lt;span style="color:#e06c75">reset&lt;/span> (&lt;span style="color:#e06c75">_system_auto_implicitClockGrouper_out_reset&lt;/span>), &lt;span style="color:#7f848e">// @[ChipTop.scala:28:35]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> .&lt;span style="color:#e06c75">auto_prci_ctrl_domain_reset_setter_clock_in_member_allClocks_uncore_clock&lt;/span> (&lt;span style="color:#e06c75">clock_uncore_clock&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#e06c75">auto_prci_ctrl_domain_reset_setter_clock_in_member_allClocks_uncore_reset&lt;/span> (&lt;span style="color:#e06c75">reset_io&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#e06c75">resetctrl_hartIsInReset_0&lt;/span> (&lt;span style="color:#e06c75">_system_auto_subsystem_cbus_fixedClockNode_out_reset&lt;/span>), &lt;span style="color:#7f848e">// @[ChipTop.scala:28:35]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> .&lt;span style="color:#e06c75">resetctrl_hartIsInReset_1&lt;/span> (&lt;span style="color:#e06c75">_system_auto_subsystem_cbus_fixedClockNode_out_reset&lt;/span>), &lt;span style="color:#7f848e">// @[ChipTop.scala:28:35]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#56b6c2">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="自定义-chiptop">自定义 ChipTop&lt;/h2>
&lt;p>默认的标准 ChipTop 提供了一个最小的、基本的模板，以便 IOBinders 在 DigitalTop 特性周围生成 IO 单元。对于 tapeout、集成模拟 IP 或其他非标准用例，Chipyard 支持使用 BuildTop 键指定自定义 ChipTop。一个使用非标准 IO 单元的自定义 ChipTop 示例位于 &lt;code>generators/chipyard/src/main/scala/example/CustomChipTop.scala&lt;/code>。&lt;/p>
&lt;p>您还可以指定一个完全自定义的 ChipTop，该 ChipTop 不使用任何 RocketChip 或 Chipyard SoC 组件。示例位于 &lt;code>generators/chipyard/src/main/scala/example/EmptyChipTop.scala&lt;/code>。可以使用以下命令构建 EmptyChipTop 示例：&lt;code>make CONFIG=EmptyChipTopConfig TOP=EmptyChipTop&lt;/code>。&lt;/p>
&lt;h2 id="systemdigitaltop">System/DigitalTop&lt;/h2>
&lt;p>Rocket Chip SoC 的系统模块是通过 cake-pattern 组合而成的。具体而言，DigitalTop 扩展了 System，System 扩展了 Subsystem，Subsystem 又扩展了 BaseSubsystem。&lt;/p>
&lt;h3 id="basesubsystem">BaseSubsystem&lt;/h3>
&lt;p>BaseSubsystem 在 &lt;code>generators/rocketchip/src/main/scala/subsystem/BaseSubsystem.scala&lt;/code> 中定义。查看 BaseSubsystem 抽象类，我们看到该类实例化了顶层总线（frontbus、systembus、peripherybus 等），但没有指定拓扑结构。该类还定义了多个 ElaborationArtefacts，这些文件是在 Chisel 细化后生成的（例如，设备树字符串和外交图可视化 GraphML 文件）。&lt;/p>
&lt;h3 id="subsystem">Subsystem&lt;/h3>
&lt;p>在 &lt;code>generators/chipyard/src/main/scala/Subsystem.scala&lt;/code> 中，我们可以看到 Chipyard 的 Subsystem 是如何扩展 BaseSubsystem 抽象类的。Subsystem 混入了 HasBoomAndRocketTiles 特性，该特性根据指定的参数定义并实例化 BOOM 或 Rocket 瓦片。我们在这里为每个瓦片连接一些基本的 IO，特别是 hartids 和复位向量。&lt;/p>
&lt;h3 id="system">System&lt;/h3>
&lt;p>&lt;code>generators/chipyard/src/main/scala/System.scala&lt;/code> 完成了 System 的定义。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>HasHierarchicalBusTopology&lt;/strong> 在 Rocket Chip 中定义，指定顶层总线之间的连接。&lt;/li>
&lt;li>&lt;strong>HasAsyncExtInterrupts&lt;/strong> 和 &lt;strong>HasExtInterruptsModuleImp&lt;/strong> 添加外部中断的 IO，并将其适当地连接到瓦片。&lt;/li>
&lt;li>&lt;strong>CanHave&amp;hellip;AXI4Port&lt;/strong> 添加各种主从 AXI4 端口，添加 TL-to-AXI4 转换器，并将其连接到适当的总线。&lt;/li>
&lt;li>&lt;strong>HasPeripheryBootROM&lt;/strong> 添加 BootROM 设备。&lt;/li>
&lt;/ul>
&lt;h2 id="tops">Tops&lt;/h2>
&lt;p>SoC Top 继承 System 类，并包含自定义组件的特性。在 Chipyard 中，这包括添加 NIC、UART 和 GPIO，以及为引导方法设置硬件。&lt;/p>
&lt;h2 id="testharness">TestHarness&lt;/h2>
&lt;p>TestHarness 与 Top 之间的连接是在添加到 Top 的特性中定义的方法中执行的。当这些方法从 TestHarness 中调用时，它们可以在scope of the harness内实例化模块，然后将其连接到 DUT。例如，从 CanHaveMasterAXI4MemPortModuleImp 特性定义的 &lt;code>connectSimAXIMem&lt;/code> 方法，在 TestHarness 中调用时，会实例化 SimAXIMems，并将其连接到顶层的正确 IO。&lt;/p>
&lt;p>尽管这种间接方式连接顶层 IO 可能看起来不必要地复杂，但它允许设计师组合自定义特性，而无需担心任何特定特性的实现细节。&lt;/p>
&lt;h2 id="testdriver">TestDriver&lt;/h2>
&lt;p>TestDriver 在 &lt;code>generators/rocketchip/src/main/resources/vsrc/TestDriver.v&lt;/code> 中定义。该 Verilog 文件通过实例化 TestHarness、驱动时钟和复位信号以及解释成功输出来执行仿真。该文件与为 TestHarness 和 Top 生成的 Verilog 一起编译，以生成仿真器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">`MODEL&lt;/span> &lt;span style="color:#e06c75">testHarness&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#e06c75">clock&lt;/span>(&lt;span style="color:#e06c75">clock&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#e06c75">reset&lt;/span>(&lt;span style="color:#e06c75">reset&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#e06c75">io_success&lt;/span>(&lt;span style="color:#e06c75">success&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>TestDriver就是完全的仿真文件&lt;/p>
&lt;p>TestHarness 中包含simdram等仿真组件&lt;/p>
&lt;p>ChipTop 是顶层模块，负责实例化 System 子模块，通常是 DigitalTop 的具体实例&lt;/p>
&lt;p>整个system就是一个soc,包含core和外设&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 174;
flex-basis: 419px"
>
&lt;a href="https://VastCircle.github.io/2024/chipyard%E7%9A%84%E4%B8%89%E4%B8%AAhighest_level/image-20241105165859293.png" data-size="1533x878">
&lt;img src="https://VastCircle.github.io/2024/chipyard%E7%9A%84%E4%B8%89%E4%B8%AAhighest_level/image-20241105165859293.png"
width="1533"
height="878"
srcset="https://VastCircle.github.io/2024/chipyard%E7%9A%84%E4%B8%89%E4%B8%AAhighest_level/image-20241105165859293_hu3616408519887204638.png 480w, https://VastCircle.github.io/2024/chipyard%E7%9A%84%E4%B8%89%E4%B8%AAhighest_level/image-20241105165859293_hu8294092583105720998.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/ucb-bar/chipyard/blob/main/docs/Advanced-Concepts/Top-Testharness.rst" target="_blank" rel="noopener"
>Tops,Test-Harnesses,and the Test-Driver&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Rocket Chip学习</title><link>https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/</link><pubDate>Tue, 29 Oct 2024 17:12:22 +0800</pubDate><guid>https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/</guid><description>&lt;h2 id="rocket-chip-框图">rocket-chip 框图&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 93;
flex-basis: 224px"
>
&lt;a href="https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/image-20241029185840013.png" data-size="685x733">
&lt;img src="https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/image-20241029185840013.png"
width="685"
height="733"
srcset="https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/image-20241029185840013_hu14119112562339422234.png 480w, https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/image-20241029185840013_hu6804879921133493359.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/1b76004cd81da403ee6061bc5f28c8a4.png" data-size="920x574">
&lt;img src="https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/1b76004cd81da403ee6061bc5f28c8a4.png"
width="920"
height="574"
srcset="https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/1b76004cd81da403ee6061bc5f28c8a4_hu10081888447368840699.png 480w, https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/1b76004cd81da403ee6061bc5f28c8a4_hu7103377815266656506.png 1024w"
loading="lazy"
alt="rocket-chip流水线">
&lt;/a>
&lt;figcaption>rocket-chip流水线&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 151;
flex-basis: 362px"
>
&lt;a href="https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/606757a6f155fc39d830d2669766510d.png" data-size="812x537">
&lt;img src="https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/606757a6f155fc39d830d2669766510d.png"
width="812"
height="537"
srcset="https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/606757a6f155fc39d830d2669766510d_hu2470859002471598808.png 480w, https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/606757a6f155fc39d830d2669766510d_hu17716410241867253808.png 1024w"
loading="lazy"
alt="rocket-chip Icache">
&lt;/a>
&lt;figcaption>rocket-chip Icache&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 140;
flex-basis: 337px"
>
&lt;a href="https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/d5b43f3a013f1952dcc43774d22b5d37.png" data-size="1042x742">
&lt;img src="https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/d5b43f3a013f1952dcc43774d22b5d37.png"
width="1042"
height="742"
srcset="https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/d5b43f3a013f1952dcc43774d22b5d37_hu12111035731917621890.png 480w, https://VastCircle.github.io/2024/rocket-chip%E5%AD%A6%E4%B9%A0/d5b43f3a013f1952dcc43774d22b5d37_hu6353591107662034634.png 1024w"
loading="lazy"
alt="rocket-chip Dcache">
&lt;/a>
&lt;figcaption>rocket-chip Dcache&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="rocket-chip-代码结构">rocket-chip 代码结构&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## rocket-chip generator的一级目录结构&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　bootrom : 在BootROM的bootloader第一阶段所使用的代码
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> csrc Verilator: 仿真用的C代码
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　emulator Verilator :用来编译和跑仿真的工作目录
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　project Scala: 构建工具sbt用来构建Scala的工作目录
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　regression: 定义的持续的整合和一套nightly regression
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　scripts: 用来分析仿真的输出或者处理代码文件的内容
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　vsim VCS: 用来编译和跑仿真的工作目录
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　vsrc Verilog: 代码，包含接口、测试框架和Verilog过程接口VPI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　chisel3 :包含Chisel自定义的各种类和规则，用来生成RTL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　firrtl: 存放Chisel编译器处理代码而生成的一种中间表示，由中间表示能生成Verilog代码或C++代码
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　hardfloat: 用chisel写成的浮点单元
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　riscv-tools: 支持RISC-V的一套软件，与生成RTL有关
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　torture: 用来生成压力测试所需的一些随机指令
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## src/main/scala: 构筑rocket-chip的代码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> amba: 协议的实现代码，包括AXI4，AHB-lite，APB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config: 提供能配置Generator的Scala的接口
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　coreplex: 包含Rocket核、系统总线、coherence agents、debug设备、中断处理、面向外部的外设、时钟同步处理和TileLink到外设总线转换
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　devices: 一些外设，包括debug模块和各种挂在TileLink的从设备
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　diplomacy: 用来扩展Chisel，通过允许对硬件进行两个阶段的阐述，可以让参数在模块之间协调传递
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　groundtest: 生成可综合的硬件测试平台，通过发出随机的访问存储器指令流，进行对核外的存储器系统进行压力测试
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　jtag: 用来生成JTAG总线接口
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　regmapper: 用来生成带有能访问内存映射寄存器的标准接口的从设备
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　rocket: 用来生成顺序核Rocket、L1指令cache和L1数据cache
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　tile: 包含可以与Rocket核组成tile的组件，如FPU和RoCC协处理器
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　tilelink: 用来生成TileLink总线（协议），包含一些适配器和转其他总线（协议）的转换器
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　system:Rocket Chip的顶层代码包，同时也是用作测试的硬件平台的顶层代码包
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　unittest: 用作生成硬件测试平台来测试单独的一个个模块
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　util: 提供一些能被其他代码包调用的通用的Scala和Chisel结构
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="srcmainscalasystem">/src/main/scala/system&lt;/h3>
&lt;h4 id="testharnessscala">TestHarness.scala&lt;/h4>
&lt;p>TestHarness 模块通过模拟配置、接口连接和调试信号设置，构建了一个测试环境，用于验证 ExampleRocketSystem的功能&lt;/p>
&lt;h4 id="testgenerationscala">TestGeneration.scala&lt;/h4>
&lt;p>这段代码定义了RISC-V处理器的测试框架，它主要由一些抽象和具体的测试套件类组成，用于生成用于RISC-V测试的Makefile脚本片段。以下是代码的主要结构与功能：&lt;/p>
&lt;p>RocketTestSuite 抽象类：
这个抽象类定义了一个通用的测试套件结构，包含测试目录、目标名称、测试用例集合等关键参数。postScript属性生成用于链接目标文件的Makefile命令模板。&lt;/p>
&lt;p>AssemblyTestSuite 类：&lt;/p>
&lt;p>这是RocketTestSuite的子类，用于定义汇编语言的测试套件。每个实例表示特定环境（如rv32ui）下的测试集合，并生成包含测试文件的Makefile片段。
BenchmarkTestSuite 类：&lt;/p>
&lt;p>用于定义基准测试套件，支持特定目录中的多个基准测试，例如性能评估用的程序。
RegressionTestSuite 类：&lt;/p>
&lt;p>包含一组用于回归测试的测试文件，通过简单定义makeTargetName来统一生成Makefile片段。
TestGeneration 对象：&lt;/p>
&lt;p>该对象定义了添加测试套件并生成Makefile片段的逻辑。通过gen方法根据测试类型和环境生成目标名称和Perl脚本，用于捕获和处理测试结果。
DefaultTestSuites 对象：&lt;/p>
&lt;p>包含多个默认测试套件的实例，这些测试套件涵盖了不同类型的RISC-V指令集扩展，例如rv32ui、rv64ui、rv32ua、rv64ua等。还包括了一些性能基准和单一回归测试的示例。&lt;/p>
&lt;h4 id="configsscala">Configs.scala&lt;/h4>
&lt;p>TestHarness.scala 就是testbench，而 ExampleRocketSystem.scala 就是SOC的层次，包括Core以外的其他外设&amp;amp;总线，Configs.scala 就是核心Core的配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">BaseConfig&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">Config&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">WithDefaultMemPort&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">WithDefaultMMIOPort&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">WithDefaultSlavePort&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">WithTimebase&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">BigInt&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1000000&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#7f848e">// 1 MHz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">WithDTS&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;freechips,rocketchip-unknown&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">Nil&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">WithNExtTopInterrupts&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">BaseSubsystemConfig&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="examplerocketsystemscala">ExampleRocketSystem.scala&lt;/h4>
&lt;p>对于SOC层面的设计&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">/** Example Top with periphery devices and ports, and a Rocket subsystem */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">ExampleRocketSystem&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">implicit&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#c678dd">:&lt;/span> &lt;span style="color:#e5c07b">Parameters&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">RocketSubsystem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">HasAsyncExtInterrupts&lt;/span> &lt;span style="color:#7f848e">// 提供异步外部中断接口，允许系统处理来自外部设备的异步中断信号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">CanHaveMasterAXI4MemPort&lt;/span> &lt;span style="color:#7f848e">// 添加 AXI4 主接口，用于连接存储器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">CanHaveMasterAXI4MMIOPort&lt;/span> &lt;span style="color:#7f848e">// 添加 AXI4 主接口，用于连接内存映射的 I/O 端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">CanHaveSlaveAXI4Port&lt;/span> &lt;span style="color:#7f848e">// 添加 AXI4 从接口，支持与其他主设备的交互
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// optionally add ROM devices
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 可选地添加 ROM 设备
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// Note that setting BootROMLocated will override the reset_vector for all tiles
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#7f848e">// 设置 BootROMLocated 将覆盖所有核心的重置向量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">bootROM&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">BootROMLocated&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">location&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e5c07b">BootROM&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">attach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">CBUS&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#7f848e">// 连接 BootROM 到 CBUS，以配置系统启动入口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">maskROMs&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">MaskROMLocated&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">location&lt;/span>&lt;span style="color:#56b6c2">)).&lt;/span>&lt;span style="color:#e06c75">map&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span> &lt;span style="color:#e5c07b">MaskROM&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">attach&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">_&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e5c07b">CBUS&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span> &lt;span style="color:#7f848e">// 将 MaskROMs 连接到 CBUS，作为只读存储器使用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">override&lt;/span> &lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">module&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e5c07b">ExampleRocketSystemModuleImp&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#c678dd">this&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#7f848e">// 延迟加载模块实现
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="simaximemscala">simAXIMem.scala&lt;/h4>
&lt;p>Memory with AXI port for use in elaboratable test harnesses(一个mem的仿真模型)&lt;/p>
&lt;h3 id="srcmainscalarocket">/src/main/scala/rocket&lt;/h3>
&lt;p>此 RTL 包生成 Rocket 顺序流水线核心以及 L1 指令和数据缓存。此库旨在供芯片生成器使用，该生成器在内存系统中实例化核心并将其连接到外部世界。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/a_weiming/article/details/84594781" target="_blank" rel="noopener"
>rocket-chip目录&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/meton-robean/ResearchNote/issues/23" target="_blank" rel="noopener"
>rocketchip学习笔记&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/gujiangtaoFuture/articles/11766114.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/gujiangtaoFuture/articles/11766114.html&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>rocket-src微架构代码解读</title><link>https://VastCircle.github.io/2024/%E5%BE%AE%E6%9E%B6%E6%9E%84%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB/</link><pubDate>Sun, 27 Oct 2024 21:23:02 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E5%BE%AE%E6%9E%B6%E6%9E%84%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB/</guid><description>&lt;h2 id="差异文件">差异文件&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">### 新加入的&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocket/RCU.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocket/rh_cache.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocket/RH_Cache.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocket/rh_data.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocket/rh_tag.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocket/Runahead_cache.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">### 修改过的 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocket/BTB.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocket/Frontend.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocket/HellaCacheArbiter.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocket/HellaCache.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocket/NBDcache.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocket/RocketCore.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>subsystem/Configs.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>subsystem/SystemBus.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tile/Core.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tilelink/Bundles.scala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tilelink/Edges.scala
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>提交</title><link>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B09/</link><pubDate>Sat, 26 Oct 2024 15:23:09 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B09/</guid><description>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>提交</title><link>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/</link><pubDate>Sat, 26 Oct 2024 15:06:32 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/</guid><description>&lt;h2 id="概述">概述&lt;/h2>
&lt;p>无&lt;/p>
&lt;h2 id="重排序缓存">重排序缓存&lt;/h2>
&lt;h3 id="一般结构">一般结构&lt;/h3>
&lt;p>ROB是一个FIFO&lt;/p>
&lt;p>(1)Complete:表示一条指令是否执行完毕&lt;/p>
&lt;p>(2)Areg:指令在原始程序中指定的目的寄存器,逻辑寄存器&lt;/p>
&lt;p>(3)Preg:指令的Areg经过寄存器重命名之后,对应的物理寄存器编号&lt;/p>
&lt;p>(4)OPreg:指令的Areg被重命名为新的Preg之前,对应的旧的Preg,当指令发生异常(exception)进行恢复,会用到&lt;/p>
&lt;p>(5)PC:指令对应的PC值,当发生中断或异常之后,需要保存指令的PC值&lt;/p>
&lt;p>(6)Exception:指令发生异常的异常类型&lt;/p>
&lt;p>(7)Type:指令的类型会被记录到这里,当指令retire时,不同类型的指令会有不同的动作,例如store指令写D-cache(那执行在干嘛)&lt;/p>
&lt;p>在流水线的分发阶段,指令会按照进入流水线的顺序写入ROB,ROB中对应的complete会被置0,执行完成之后会被置1.指令的计算结果可以放在ROB中,也可以放在物理寄存器堆(PRF)中.&lt;/p>
&lt;p>异常的处理统一放在提交阶段&lt;/p>
&lt;p>指令表项的编号会一直随着指令在流水线中流动&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 229;
flex-basis: 551px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241018201606114.png" data-size="699x304">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241018201606114.png"
width="699"
height="304"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241018201606114_hu3029882811398972242.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241018201606114_hu11810229668060151238.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>i1是除法指令,i2使用i1的结果,所以i1,i2执行时间很长&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 143;
flex-basis: 345px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026160416090.png" data-size="535x372">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026160416090.png"
width="535"
height="372"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026160416090_hu526346446613648332.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026160416090_hu11969902543979219059.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 361px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026160430956.png" data-size="843x559">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026160430956.png"
width="843"
height="559"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026160430956_hu15166723323535760280.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026160430956_hu17217095718010947724.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="端口需求">端口需求&lt;/h3>
&lt;p>对于一个4-way的超标量处理器来说,在ROB中每周期可以退休的指令不少于4条,ROB选择那些Complete的指令进行退休,但是由于是顺序的,如果连续4条中出现一条not ready ,后续的就无法retire&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 146;
flex-basis: 352px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026160826543.png" data-size="413x281">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026160826543.png"
width="413"
height="281"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026160826543_hu2060967638341698444.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026160826543_hu6471094479480740589.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>(1)4个读端口:retire时检测指令是否complete&lt;/p>
&lt;p>(2)8个读端口 : 在流水线的寄存器重命名阶段,需要从ROB读取4条指令的源操作数 ????&lt;/p>
&lt;p>(3)4个写端口:分发阶段需要向ROB写入4条指令 ????&lt;/p>
&lt;p>(4)最少4个写端口:在write back 阶段,需要写入最小4条指令的结果 (最少是由于很多处理器的issue width &amp;gt; machine width)&lt;/p>
&lt;h2 id="管理处理器的状态">管理处理器的状态&lt;/h2>
&lt;ol>
&lt;li>Architecture State , 通用寄存器的值,PC的值,存储器的值&lt;/li>
&lt;li>Speculative State,超标量处理器内部的状态,例如重命名使用的物理寄存器,重排序缓存(ROB),发射队列(Issue Queue)和store buffer 等,这些状态超前于指令集定义的状态&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 196;
flex-basis: 472px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026162140931.png" data-size="663x337">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026162140931.png"
width="663"
height="337"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026162140931_hu18410339645903847302.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026162140931_hu15498842930549422733.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>对于采用将通用寄存器扩展进行寄存器重命名的架构,需要将目的寄存器的值从物理寄存器搬移到通用寄存器中&lt;/p>
&lt;p>对于采用通用的物理寄存器进行重命名的架构,需要将目的寄存器在物理寄存器堆中标记为外界可见的状态???&lt;/p>
&lt;p>如果退休的指令是store, 需要把store buffer对应的值写到D-cache去(难道不是写完了再退休的吗)&lt;/p>
&lt;p>如果退休的指令是分支指令,需要进行状态恢复,并且冲刷错误指令,从正确地址取地址 ,&lt;/p>
&lt;p>在提交阶段还需要对异常进行统一处理&lt;/p>
&lt;p>两种方法&lt;/p>
&lt;p>(1)使用ROB管理指令集定义的状态&lt;/p>
&lt;p>(2)使用物理寄存器管理指令集定义的状态&lt;/p>
&lt;h3 id="使用rob管理指令集定义的状态-retire-register-file">使用ROB管理指令集定义的状态 (Retire Register File)&lt;/h3>
&lt;p>当指令退休的时候,指令的结果可以对指令集定义的状态进行更新,此时会将指令的结果从ROB中搬移到指令集中定义的逻辑寄存器中.逻辑寄存器存储了所有退休指令对应的目的寄存器的值&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 191;
flex-basis: 459px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026192854827.png" data-size="584x305">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026192854827.png"
width="584"
height="305"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026192854827_hu6872805367257657893.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026192854827_hu6988686517471031140.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>一般情况下,使用ROB管理指令集定义的状态,都对应着使用数据捕捉的结构来进行发射(issue),因为指令的内容会存在在ROB和通用寄存器当中,通过数据捕捉可以在执行阶段把数据送到payload RAM ,可以直接从payload RAM去获取所有数据&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 207;
flex-basis: 497px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026193358686.png" data-size="729x352">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026193358686.png"
width="729"
height="352"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026193358686_hu14794657159944181992.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026193358686_hu17778871549113846091.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>对于非捕获队列,没有payload RAM,相应的数据是直接从ROB或者通用寄存器获取,所有需要发射队列支持额外的写端口(通知操作数的位置变动),和额外的旁路网络来&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 224;
flex-basis: 539px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026195235072.png" data-size="690x307">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026195235072.png"
width="690"
height="307"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026195235072_hu12509796414499110516.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026195235072_hu13364150662557934682.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="使用物理寄存器管理指令集定义的状态">使用物理寄存器管理指令集定义的状态&lt;/h3>
&lt;p>当物理寄存器的结果被计算出来之后,指令的状态变成了complete,当它退休的时候,直接把相应的状态标记为 Architecture state ,直到另一条指令写入同样的目标寄存器并且退休了,就相当于直接把指令集定义的逻辑寄存器融入到物理寄存器中&lt;/p>
&lt;p>(1)当指令从ROB中退休之后,不需要把指令的结果进行搬移,便于实现低功耗&lt;/p>
&lt;p>(2)在基于ROB进行状态管理时,需要ROB开辟空间存放指令的结果,但例如store,比较指令,分支指令是没有目的寄存器的,ROB会有一部分空间浪费掉了,但是这种方法只会对于存在目的寄存器的指令分配空间&lt;/p>
&lt;p>(3)ROB是集中管理方式,指令需要从其中读取操作数,同时指令也需要把结果写入其中,需要大量的读写端口,但是使用物理寄存器可以采用cluster结构等方式来避免多端口的负面影响&lt;/p>
&lt;p>但是这样会造成寄存器重命名比较复杂 ,使用ROB管理时,只需要写入ROB就完成了重命名,但是使用物理寄存器管理,需要额外的表格存放哪些物理寄存器是空闲的,并且重映射关系的建立和释放都比较困难,并且需要一个额外的表格来存放那些物理寄存器是Architecture state (这不是加一个标志位就可以了)&lt;/p>
&lt;h2 id="特殊情况的处理">特殊情况的处理&lt;/h2>
&lt;p>分支预测错误,或者异常&lt;/p>
&lt;p>store指令只有在retire阶段才能够真正改变处理器的状态(写D-cache),如果发射了D-cache缺失,会阻碍流水线中所以后面指令继续退休&lt;/p>
&lt;h3 id="分支预测失败">分支预测失败&lt;/h3>
&lt;p>以流水线的寄存器重命名为分界&lt;/p>
&lt;p>前端的状态回复(front-end recovery):将流水线中重命名阶段之前的所有指令都抹掉,将分支预测器中的历史状态标进行恢复,并使用正确的地址取指令&lt;/p>
&lt;p>后端的状态恢复(back-end recovery time):把处理器中所有内部组件(Issue Queue,Store Buffer 和 ROB)错误的指令都抹掉,恢复重命名映射表(RAT),以便那些错误指令对RAT的修改进行改正,同时被错误的指令占据的物理寄存器和ROB的空间需要被释放&lt;/p>
&lt;p>满足后端恢复的时间小于前端恢复的时间+取指和寄存器重命名的时间,不需要暂停流水线&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 917;
flex-basis: 2202px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026201405204.png" data-size="514x56">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026201405204.png"
width="514"
height="56"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026201405204_hu16380282229336755602.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026201405204_hu13274219510865086437.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 265;
flex-basis: 636px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026201634076.png" data-size="873x329">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026201634076.png"
width="873"
height="329"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026201634076_hu12408654504628570787.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026201634076_hu13341318665468000535.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="基于rob重命名的架构基于扩展的arf进行寄存器重命名同理">基于ROB重命名的架构(基于扩展的ARF进行寄存器重命名同理)&lt;/h4>
&lt;p>当寄存器位于ROB时,在RAT中存储在ROB的位置,位于ARF,直接进行寻址 , RAT的地址是逻辑寄存器的值,数据是存储类型及对应具体位置&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 135;
flex-basis: 324px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026202221475.png" data-size="550x407">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026202221475.png"
width="550"
height="407"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026202221475_hu14505643750566939328.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026202221475_hu15297449480776893135.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>一条退休的指令将目的寄存器从ROB搬移到ARF中后,并不一定表示以后指令需要从ARF读取寄存器的值&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">A :ADD R1,R2,R3
B :ADD R1,R1,R4
C :ADD R1,R1,R5
&lt;/code>&lt;/pre>&lt;p>只有指令C的映射关系会写入到RAT中, 即使指令A从流水线中退休了,后续的指令也只使用指令C的结果(why???).为了实现能够在指令实现搬移之后从ARF读取寄存器的值,在ROB中的每条指令都会检查自身是否是最新的映射关系,只有当一条指令从ROB中退休的时候,发现自身也是最新的映射关系,才能够将RAT中对应的内容改为ARF状态&lt;/p>
&lt;p>从ROB中退休的指令检查自身是不是最新的映射关系:在指令退休的时候,使用目的寄存器读取RAT,读出逻辑寄存器此时对应的ROB pointer,如果发现它和当前退休指令在ROB中占据的地址是一样的,表面这条退休的指令是最新的映射关系&lt;/p>
&lt;p>在流水线中发现分支预测失败时(一般是在执行阶段),此时流水线中有一部分指令是在分支指令之前进人到流水线的，它们可以被继续执行，因此当发现分支指令预测失败时，并不马上进行状态修复，而是停止取新的指令，让流水线继续执行，这个过程称为将&lt;strong>流水线抽干(drain out)&lt;/strong>,直到分支指令之前的所有指令(包括分支指令本身)都退休。此时 ARF 中所有寄存器的内容都是正确的，同时在流水线中的所有指令都是处于错误的路径上，可以将流水线中的指令全部抹掉，然后将 RAT 中所有的内容都标记为 ARF 状态，这样处理器就从分支预测失败的状态恢复过来了，此时可以从正确的地址开始取指.&lt;/p>
&lt;p>优点:重命名易于实现,状态恢复容易&lt;/p>
&lt;h4 id="基于统一的prf进行重命名的架构">基于统一的PRF进行重命名的架构&lt;/h4>
&lt;p>两个RAT (前端RAT(Speculative RAT)和后端RAT(Architecture RAT)),可以使用后端RAT对处理器进行状态恢复&lt;/p>
&lt;p>和前面类似,当发现分支指令预测失败时，并不马上进行状态修复，而是停止取新的指令，让流水线继续执行，这个过程称为将&lt;strong>流水线抽干(drain out)&lt;/strong>,直到分支指令之前的所有指令(包括分支指令本身)都退休,之后可以将流水线中的指令全部抹掉，然后将后端RAT 中所有的内容都复制到前端RAT，这样处理器就从分支预测失败的状态恢复过来了，此时可以从正确的地址开始取指.这种方法就是&lt;strong>Recovery at Retire&lt;/strong>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 153;
flex-basis: 368px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026214726040.png" data-size="609x397">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026214726040.png"
width="609"
height="397"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026214726040_hu6396325282664157643.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026214726040_hu7500078327809743159.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>还是会遇到问题,就是分支指令之前存在D-cache缺失的指令,会等待时间过程导致分支预测失败时的惩罚(mis-prediction penalty)过大&lt;/p>
&lt;p>为了解决上述问题,可以使用checkpoint,即在每条分支指令改变处理器状态之前,把处理器的状态保存起来,然后通过分支指令编号选择性去抹除流水线错误路径的指令,然后使用checkpoint去恢复RAT,基于SRAM的RAT需要保存整个表格,基于CAM的RAT只需要保存映射表中的状态位&lt;/p>
&lt;p>还可以去选择性的分配checkpoint的资源,对于分支预测错误率比较高的才分配checkpoint,但是如果分支预测失败,还是需要采用Recovery at Retire恢复,也可以使用ROB进行恢复,因为ROB中还是保存着旧的映射关系,即记录着每条指令对于重命名映射表的修改&lt;/p>
&lt;h3 id="异常的处理">异常的处理&lt;/h3>
&lt;p>使用ROB去顺序的执行所有的异常&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 393;
flex-basis: 945px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026220112144.png" data-size="831x211">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026220112144.png"
width="831"
height="211"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026220112144_hu16578964903247613817.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026220112144_hu7093890399153564677.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>在指令即将要退休的时候,如果发生了异常就不能退休,而是要去转而处理异常&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 330;
flex-basis: 794px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026220145671.png" data-size="791x239">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026220145671.png"
width="791"
height="239"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026220145671_hu12721806047334324940.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241026220145671_hu12980922077329163659.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>精确异常:处理器能够知道哪条指令发生了异常,并且这条发生异常的指令之后所有的指令都不允许改变处理器的状态,这样在处理完异常之后,可以精确的进行返回,返回地方有两种,(1)返回到发生异常指令本身,重新执行指令(TLB缺失),(2)不重新执行指令,而是返回到它的下一条指令(系统调用) ,精确异常需要抹去产生异常的指令后面的所有指令,并回复处理器修改的状态&lt;/p>
&lt;p>可以采用前面所说的Recovery ai Retire来恢复异常&lt;/p>
&lt;p>还有一种方法就是WALK,通过ROB保存的旧数据来恢复&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 234;
flex-basis: 562px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027150107021.png" data-size="727x310">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027150107021.png"
width="727"
height="310"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027150107021_hu11962430676454193348.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027150107021_hu7737992814455827596.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>在使用统一的PRF进行寄存器重命名的方式中,和RAT相关的还有两个表格,一个存储那些物理寄存器是空闲的,Free Register ,一个存储物理寄存器的值是否被计算出来,Busy Table&lt;/p>
&lt;p>对于Free Register Pool ,因为刚刚读取的内容不会消失,不会被退休的指令覆盖,所以只需要恢复读指针,可以利用ROB的旧映射关系来进行恢复(如果是顺序读取Free Register Pool的话其实感觉只需要回退读指针就可以了)&lt;/p>
&lt;p>对于Busy Table,由于指令运算完成之后,就可以在写回阶段写入对应的物理寄存器,所以在发生异常时,Busy Table已经进行了多次修改.还是可以通过ROB,在从ROB读取指令时,每读取一条指令,就将指令的目的寄存器在Busy Table对应的内容置为无效 ,这样后续的指令也不会使用到错误的值了&lt;/p>
&lt;p>对于统一的PRF进行重命名的架构,使用WALK的方法是合适的,因为涉及到对Free Register Pool和Busy Table的恢复&lt;/p>
&lt;h3 id="中断的处理">中断的处理&lt;/h3>
&lt;p>中断是处理器外部发生的 ,是异步的&lt;/p>
&lt;p>(1)马上处理,当中断发生时,就将流水线中的指令全部抹掉,按照异常处理的方式进行恢复,并将流水线中最旧的指令PC值(还有其他状态寄存器)保存起来,然后跳转到对应的中断处理程序,返回时,使用保存的PC值重新取指令 .这种方式实时性最强,但是相当于之前的那些指令需要重新执行&lt;/p>
&lt;p>(2)延迟处理 .当中断发生时，流水线停止取指令，但是要等到流水线中所有的指令都退休(retire)之后才对这个中断进行处理，这样能够保证流水线中这些已有的指令不被“浪费”,而且当流水线中所有的指令都退休之后，此时流水线的状态肯定是正确的，也就不需要进行状态恢复了。&lt;/p>
&lt;p>(1)如果在流水线中的这些指令发生了 D-Cache 缺失，那么需要很长的时间才能够解决，这样导致了过长的中断响应时间。
(2)如果在流水线中发现了一条预测失败的分支指令，那么首先需要对这个情况进行处理，将处理器的状态进行恢复，这需要消耗一定的时间，也造成了中断响应时间的增大。&lt;/p>
&lt;p>(3)如果流水线中的这些指令中发生了异常(exception),那么是先对异常进行处理，还是先对中断进行处理？这需要仔细地进行权衡，但是一般来说，应该是先对中断进行处理， 因为很多类型的异常处理需要耗费很长的时间，如 D-Cache 缺失、TLB 缺失或者 Page Fault等，这样会导致中断的响应时间讨长而无法忍受。&lt;/p>
&lt;h3 id="store指令的处理">store指令的处理&lt;/h3>
&lt;p>store指令通常在retire之前都是不写入D-cache的,它会写入store buffer,这样load指令就会从store buffer 或者D-cache去获取数据.这种方法最安全,但是一旦store指令D-cache缺失,需要等待很长的时间,会造成ROB的堵塞&lt;/p>
&lt;p>可以在store buffer中增加一个状态位,标记store指令是否具备退休的条件,这样store在缓存中有3个状态&lt;/p>
&lt;p>un-complete(未执行完毕),当store指令在分发阶段占据一个store buffer的时候标记为un-complete&lt;/p>
&lt;p>complete(已经执行完毕),当store指令已经得到地址和数据,但是没有变成最旧的指令,标记为complete&lt;/p>
&lt;p>(retire)离开流水线,当store指令成为最旧的指令并退休是,在store buffer标记该状态,这样store指令可以离开ROB,就不会阻碍后面的指令离开流水线,而硬件会自动将store buffer中处于retire状态的store指令写到D-cache中,并且此时store buffer中的retire的内容也会成为Architecture state的一部分&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 222;
flex-basis: 532px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027154045976.png" data-size="715x322">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027154045976.png"
width="715"
height="322"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027154045976_hu1744290998666272899.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027154045976_hu16397971302973277069.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>store buffer中的指令只有在完成写D-cache的任务之后才会释放空间,这样会造成分发之前的流水线发生阻塞,可以把已经退休的store指令存储在一个叫做write back buffer的地方,硬件会自动将write back buffer的store指令写到D-cache中&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 277;
flex-basis: 665px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027154430488.png" data-size="721x260">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027154430488.png"
width="721"
height="260"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027154430488_hu13023071255000305450.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027154430488_hu3884197430323085139.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>这样write back buffer也会成为Architecture state的一部分,load指令需要在store buffer和write back buffer中查找.一旦write back buffer没有空间了,就不能再将store指令退休&lt;/p>
&lt;p>store 指令也是顺序进入write back buffer的,但是在进入的同时需要查找有没有写入相同地址的store指令,有的话需要把前面的store指令置为无效 ,保证load能够查找罪行的数据&lt;/p>
&lt;p>对于软件处理TLB缺失的处理器,在store指令需要退休时,如果ROB中记录了TLB缺失的异常,那么store指令不能够进入write back buffer,而是需要异常的处理,需要将流水线清空,进行处理器的状态恢复.然后跳转到对应的异常处理程序中去,处理完之后重新执行store,这样可以保证所有进入write back buffer中的store指令不会产生TLB缺失&lt;/p>
&lt;h3 id="指令离开流水线的限制">指令离开流水线的限制&lt;/h3>
&lt;p>在4-way的超标量处理器中,如果ROB中最旧的四条指令都处于complete状态,理论上四条指令都能够退休&lt;/p>
&lt;p>但是
(1)每周期有四条store指令退休,意味着D-Cache或者Write Back Buffer需要支持四个写端口&lt;/p>
&lt;p>(2)每周期有四条分支指令退休,意味着没周期需要将四条分支指令的信息写回分支预测器,这需要分支预测器中是偶有部件需要支持四个写端口,同时需要能够将Checkpoint资源在每周期释放四个&lt;/p>
&lt;p>(3)如果在处理器中对 store/load 指令之间的相关性实现了预测，即预测一条 load 指令是否会和它之前的 store 指令存在相关性，在这种情况下，如果每周期有四条 load 指令退休，意味着每周期需要将四条 load 指令的信息写回到相关的预测器中，这也导致了四个写端口的需求。&lt;/p>
&lt;p>但是上述情况出现的概率很小,所以增加硬件结构不如对指令进行限制,比方说限制每次退休的分支指令只能有1条之类的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 251;
flex-basis: 604px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027205917686.png" data-size="735x292">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027205917686.png"
width="735"
height="292"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027205917686_hu8938038301564095761.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B05/image-20241027205917686_hu5547790577299267913.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>br_mask = 1110 (如果假设分支指令是1,那对分支指令进行异或应该能够得到1110这一串数字), st_mask = 1111 , ld_mask = 1111 ,那么代表第四条指令是第二条分支指令,再把3个结果相与,得到1110,代表只有前三条指令有资格退休&lt;/p>
&lt;p>同理,对于异常指令,也只能退休一条,所以在检测到异常指令之后,需要对后续的指令进行屏蔽&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>执行</title><link>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/</link><pubDate>Tue, 22 Oct 2024 13:17:32 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/</guid><description>&lt;h2 id="概述">概述&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 135;
flex-basis: 326px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023143017468.png" data-size="560x412">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023143017468.png"
width="560"
height="412"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023143017468_hu15249404520933549812.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023143017468_hu12474515009045795584.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>旁路网络:负责将FU的运算结果送到需要的地方&lt;/p>
&lt;p>每个FU都和一个1-of-M的仲裁电路一一对应,被选择的指令去读取物理寄存器堆(或者payload RAM),从而得到对应的操作数,每个仲裁电路和物理寄存器也数一一对应的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 130;
flex-basis: 312px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023143442602.png" data-size="596x458">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023143442602.png"
width="596"
height="458"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023143442602_hu14086456258735412881.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023143442602_hu12825982916654345585.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="fu的类型">FU的类型&lt;/h2>
&lt;h3 id="alu">ALU&lt;/h3>
&lt;h3 id="aguaddress-generate-unit">AGU(address generate unit)&lt;/h3>
&lt;p>用于计算访问存储器类型的指令在指令中携带的地址&lt;/p>
&lt;h3 id="brubranch-unit">BRU(Branch Unit)&lt;/h3>
&lt;p>负责处理程序控制流(control flow)类型的指令&lt;/p>
&lt;p>负责将分支指令携带的目标地址计算出来,并且根据一定的情况来决定是否使用地址,同时对进行分支预测正确与否的判断&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 137;
flex-basis: 330px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023145819993.png" data-size="361x262">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023145819993.png"
width="361"
height="262"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023145819993_hu14722048187769645653.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023145819993_hu16491768975060659322.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>对于ARM和PowerPC在每一条指令都加入的条件码,不局限于分支指令,相当于吧程序中的控制相关性使用数据相关性代替了,这样可以降低分支指令使用的频率,但是条件执行会占据指令编码的位数,减少指令中分配给通用寄存器的部分,并且可能会出现很多条无效的指令,反而可能会降低效率&lt;/p>
&lt;p>而且,如果跳转指令的条件不成立,比方说下面的ADD指令,可能就会使用错误的数据,可以通过暂停流水线或者预测的方式来解决&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 239;
flex-basis: 575px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023145959666.png" data-size="571x238">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023145959666.png"
width="571"
height="238"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023145959666_hu13405921241260827723.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023145959666_hu16403348829444298644.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 369;
flex-basis: 887px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023151843118.png" data-size="551x149">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023151843118.png"
width="551"
height="149"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023151843118_hu7430235981767082100.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023151843118_hu13488875576436232187.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="select-uop指令">select-uOP指令&lt;/h4>
&lt;p>对于Intel,通过硬件插入额外的指令来选择正确的结果&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 296;
flex-basis: 711px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023152400515.png" data-size="516x174">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023152400515.png"
width="516"
height="174"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023152400515_hu5632629170899648535.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023152400515_hu18321081067909416502.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>通过加入uOP来选择结果,但是这要求条件执行的指令必须成对出现,但是这样对编译器存在一定的制约,可以采取对于每一条条件指令都加入select-uOP的方法来解决,就相当于在执行完成条件指令之后,又对执行条件指令之后的值和执行条件指令之前的值进行了一次选择,将选择的值用于后续的寄存器重命名&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 324;
flex-basis: 777px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023153031814.png" data-size="713x220">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023153031814.png"
width="713"
height="220"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023153031814_hu12476907188911963936.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023153031814_hu4524719064748493901.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>对于ARM指令,有一个条件寄存器CPSR,对于每一条条件指令例如ADDEQ,都需要先去判断条件寄存器的值,再决定执行不执行&lt;/p>
&lt;p>BRU还负责对于分支指令结果的检查,通过分支缓存和BRU单元的结果进行对比来实现,因为分支缓存中是保存了所有预测跳转的指令&lt;/p>
&lt;h2 id="旁路网络">旁路网络&lt;/h2>
&lt;p>从FU的输出端到输入端架起一个通路,可以将FU的结果送到所有FU的输入端,物理寄存器堆,payload RAM,即旁路网络&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 560;
flex-basis: 1345px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023155021269.png" data-size="740x132">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023155021269.png"
width="740"
height="132"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023155021269_hu5668004785509550045.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023155021269_hu11767405952031318563.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 379;
flex-basis: 910px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023155047254.png" data-size="789x208">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023155047254.png"
width="789"
height="208"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023155047254_hu1657959911695311649.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023155047254_hu13703149774171246216.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>在更为现实的处理器中,在Regfile read 之后还会加入一个流水段称为 source Drive,因为对于一条指令从源操作数从物理寄存器读出来之后,还需要经过很长的一段布线,才能达到输入端,而且FU的输入端有大量的多路选择器,用来从不同的旁路网路或者物理寄存器堆选择合适的操作数,同理 FU的输出段也需要经过复杂的网路到达输入端,也需要一级,即Result drive&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 521;
flex-basis: 1251px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023155120596.png" data-size="845x162">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023155120596.png"
width="845"
height="162"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023155120596_hu17500992777549816955.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023155120596_hu14460900288832725067.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="简单的旁路网络">简单的旁路网络&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 223;
flex-basis: 536px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023160723616.png" data-size="827x370">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023160723616.png"
width="827"
height="370"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023160723616_hu18169707612863153657.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023160723616_hu13065555197707174522.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>一个FU中也会有多个计算单元,一个周期只能送一条指令进FU,如果计算单元需要的周期数(latency)相等,那无所谓,但是如果不能,就可能出现在不同周期被送进来,但是在相同周期计算出结果,都想通过旁路网络进行传送&lt;/p>
&lt;p>一种解决方法就是对于一条指令正常进行唤醒和仲裁,在FU中被执行前,首先检查当前FU是否可以被自己使用(通过周期数,上周期接收了一条latency=2的指令,当周期就不要接收latency=1的指令),如果不行,放回发射队列,重新进行仲裁.&lt;/p>
&lt;p>但是这样会造成一些本来可以仲裁成功的指令被耽搁了,因此可以直接让latency作为某个值的指令就不参与仲裁的过程&lt;/p>
&lt;p>在设计发射队列时,也需要考虑是否当前的FU是能够被使用的&lt;/p>
&lt;p>对每个仲裁电路设计一个位宽为2位的控制寄存器,高位用来拦截所有latency=2的指令,低位拦截latency=1的指令,并且在发射队列的表项中增加两个信号,指示latency=1 or 2&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 153;
flex-basis: 367px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023162500495.png" data-size="852x556">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023162500495.png"
width="852"
height="556"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023162500495_hu14593910934300950979.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023162500495_hu16586514541434976942.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>每个周期都需要对两位寄存器进行赋值,也要进行移位,比方说 latency = 3,就将两位寄存器赋值为10,latency = 2 ,就将两位寄存器赋值为01&lt;/p>
&lt;p>如果第一个周期选中了latency = 3的指令 , 第二个周期选中了latency = 3的指令 ,cycle 1 , a = 10 , cycle 2 , a = 11 = (10 &amp;raquo; 1 )| 10&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 209;
flex-basis: 502px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023164412302.png" data-size="519x248">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023164412302.png"
width="519"
height="248"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023164412302_hu2180771558406431873.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023164412302_hu18316455888187908961.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="复杂设计的旁路网络">复杂设计的旁路网络&lt;/h3>
&lt;p>(1)指令 B 只能在流水线的 Execute 阶段，从指令 A 的 Result drive 阶段获得操作数。&lt;/p>
&lt;p>(2)指令 C 可以在流水线的 Source drive 阶段，从指令 A 的 Result drive 阶段获得操作数；或者指令 C 也可以在流水线的 Execute 阶段，从指令 A 的 Write back 阶段获得操作数。
(3)指令 D可以在流水线的 Source drive 阶段，从指令 A 的 Write back 阶段获得操作数。
(4)指令 E 在流水线的 RF Read 阶段读取物理寄存器堆(PRF)时，就可以得到指令 A 的结果了，因此它不需要从旁路网络中获得操作数，这里假设物理寄存器堆可以在前半个周期写人，后半个周期读取。&lt;/p>
&lt;p>&lt;strong>对于每一个指令,不一定是在执行阶段得到旁路网络的结果&lt;/strong>&lt;/p>
&lt;p>execute阶段的操作数除了来自于上一级流水线,还可以来自于两个FU计算的结果 ,来自于流水线的 Result Drive (B相对于A)&lt;/p>
&lt;p>Source Drive 阶段,操作数除了来自于上一级流水线,还可以来自于以前流水线的结果,分布在Result Drive(C相对A)和Write Back(D相对于A)&lt;/p>
&lt;p>A和E是不需要旁路网络的 ,即某一条指令处在RF Read 里,另一条指令处在Write back 里,就不需要进行旁路&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 432px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023164621687.png" data-size="754x418">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023164621687.png"
width="754"
height="418"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023164621687_hu11888635452023152137.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023164621687_hu11255700068533527627.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 94;
flex-basis: 226px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023193442904.png" data-size="666x706">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023193442904.png"
width="666"
height="706"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023193442904_hu13004870574175724935.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023193442904_hu2537975837088478881.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>(1)当两条指令处在相邻周期,旁路路径只能发生在Execute 和 Result Drive&lt;/p>
&lt;p>(2)当两条指令相差一个周期,旁路路径能够发生在Source Drive和Result Drive, Execute 和Write Back 之间&lt;/p>
&lt;p>(3)当两条指令相差两个周期,旁路路径只能发生在Source Drive 和 Write Back 之间&lt;/p>
&lt;p>提供数据的指令一定得在Execute后,接受数据的指令一定要在RF read后&lt;/p>
&lt;h3 id="操作数的选择">操作数的选择&lt;/h3>
&lt;p>ScoreBoard&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 199;
flex-basis: 478px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023195557026.png" data-size="477x239">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023195557026.png"
width="477"
height="239"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023195557026_hu224179638028002947.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023195557026_hu16682950285114137150.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>FU#:记录物理寄存器从哪个FU中被计算出来,当一条指令被仲裁电路选中的时候,如果指令存在目的寄存器,就将这条指令在哪个FU中执行的信息写到表格中&lt;/p>
&lt;p>R:表示物理寄存器的值已经从FU中计算出来了,并且已经被写到物理寄存器堆中了(在写回的时候更新)&lt;/p>
&lt;p>指令B通过读取scoreBoard可以得知需要从FU中取数据&lt;/p>
&lt;p>指令C可以得知可以从PRF中取数据&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 381;
flex-basis: 916px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023200505179.png" data-size="737x193">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023200505179.png"
width="737"
height="193"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023200505179_hu13854645784151382880.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241023200505179_hu11359890069373188788.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>可以把读取scoreboard的过程放到流水线的RF Read阶段,使得ScoreBoard和PRF同时读取,但是这样会出现问题就是比方说指令A和指令C,如果移动到了Regfile Read阶段,指令C无法获知指令A修改的ScordBoard的值,需要加入比较逻辑,当ScoreBoard写入和读取的编号一致的话,就设置为从PRF取得操作数&lt;/p>
&lt;p>对于能够并行执行N条指令的处理器,需要2N个读端口,2N个写端口&lt;/p>
&lt;p>用最简单的方法,就是因为每个FU会把一条指令的计算结果广播送到FU输入和物理寄存器堆,同时也会送出对应的寄存器编号,所以可以直接和源寄存器进行比较就行,需要选择操作数的两个周期Source Drive 和 Execute阶段(为什么是两个阶段????)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 183;
flex-basis: 439px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024203513613.png" data-size="713x389">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024203513613.png"
width="713"
height="389"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024203513613_hu8458801169996393152.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024203513613_hu9604523862459205188.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="cluster">Cluster&lt;/h2>
&lt;h3 id="cluster-iq">Cluster IQ&lt;/h3>
&lt;p>通过将一个集中式的发射队列分成几个小的分布式发射队列,每个发射队列只对应一个仲裁电路和FU,这样每个分布式发射队列只需要存储对应的FU能够执行的指令&lt;/p>
&lt;p>(1)可以减少每个分布式发射队列的端口个数&lt;/p>
&lt;p>(2)每个分布式发射队列的仲裁电路只需要从少量的指令进行选择,可以加快每个仲裁电路的速度&lt;/p>
&lt;p>(3)分布式发射队列的容量比较小,指令被唤醒的速度也比较快&lt;/p>
&lt;p>缺点就是一个发射队列的指令对其他发射队列指令进行唤醒时,需要经历很长的走线,可能需要增加一级流水线,这样当两条存在相关性的相邻指令属于两个不同Cluster事,不能背靠背执行&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 191;
flex-basis: 460px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024205608529.png" data-size="836x436">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024205608529.png"
width="836"
height="436"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024205608529_hu8384213802176442674.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024205608529_hu1594713213561487067.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>但是通过对指令进行合理的算法分配cluster,也可以做到周期的合理使用&lt;/p>
&lt;p>对于普通的集中式发射队列,需要3个周期,如果A,B,E在同一个cluster,C,D在另一个cluster那需要5个周期,但是如果A,C分到一个cluster,B,D,E分到另一个cluster中,那就只需要3个周期&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 228;
flex-basis: 547px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024210359607.png" data-size="438x192">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024210359607.png"
width="438"
height="192"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024210359607_hu2303037202705240120.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024210359607_hu9192380050617067700.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 209;
flex-basis: 502px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024210424365.png" data-size="526x251">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024210424365.png"
width="526"
height="251"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024210424365_hu6627521120969527641.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024210424365_hu7444645623256956563.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 211;
flex-basis: 507px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024210535873.png" data-size="535x253">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024210535873.png"
width="535"
height="253"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024210535873_hu8861715288620074021.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024210535873_hu2374024891856620924.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>对于非数据捕捉结果的处理器,指令会先读取物理寄存器堆,需要PRF支持多个读端口,所以可以对寄存器堆也采用cluster结构,对每一个采用cluster结构的发射队列使用同一个物理寄存器堆&lt;/p>
&lt;p>原来4个FU有8个读端口,4个写端口,可以变成4个读端口,4个写端口,不过需要让两个PRF保持一致,还需要去更新另一个寄存器(那不是会影响并u行性)&lt;/p>
&lt;p>当两个存在相关性的连续指令属于两个不同的cluster时,后续的指令需要等到前面的指令更新完寄存器堆之后,才能够从寄存器堆读取操作数????? 因为旁路网络最好不好跨越两个cluster&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 198;
flex-basis: 477px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024212016007.png" data-size="829x417">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024212016007.png"
width="829"
height="417"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024212016007_hu12563989265596371535.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024212016007_hu7321058393778903345.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="cluster-bypass">cluster bypass&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024212557051.png" data-size="854x481">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024212557051.png"
width="854"
height="481"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024212557051_hu4965631951152540929.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024212557051_hu12953251598118112777.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>采用cluster结构的可以直接去除流水线的Source Drive 和 Result Drive流水段&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 322;
flex-basis: 774px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024213929124.png" data-size="858x266">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024213929124.png"
width="858"
height="266"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024213929124_hu207480023195120802.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024213929124_hu15840521158928439603.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>在顺序执行的处理器,由于硬件无法调度不相关的指令,非完全的旁路网络会带来很大的负面影响,会产生大量的气泡,显然降低了处理器的性能,因此尽量会采用完全的旁路网络&lt;/p>
&lt;p>可以类比发射队列,在相邻的cluster加入一级流水线来降低路径延时,形成完全的旁路网络&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 279;
flex-basis: 670px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024214301619.png" data-size="765x274">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024214301619.png"
width="765"
height="274"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024214301619_hu735835723770192725.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024214301619_hu17445429456382917378.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>发射队列的流水和旁路网络的流水导致的延时不会叠加&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 207;
flex-basis: 497px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024214434028.png" data-size="531x256">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024214434028.png"
width="531"
height="256"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024214434028_hu13183690665095587033.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241024214434028_hu9770905204137056385.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="存储器指令的加速">存储器指令的加速&lt;/h2>
&lt;h3 id="memory-diambiguation">memory diambiguation&lt;/h3>
&lt;p>访存地址也会存在相关性,但是这个相关性是在执行阶段计算出访存的指令之后才能够被发现 ,在解码阶段是无法被发现的&lt;/p>
&lt;p>大部分的store是按照顺序执行的(in-order),可以避免WAW相关性(why?)&lt;/p>
&lt;p>load指令可以分为&lt;/p>
&lt;p>(1)完全的顺序执行,没有WAW和WAR相关性&lt;/p>
&lt;p>(2)部分的乱序执行,顺序执行的store将程序分成不同的块,每当一条指令store的地址被计算出来,store指令和后续的store指令之间的所有load指令可以乱序执行,可以避免WAR相关性的发生&lt;/p>
&lt;p>当一条store指令地址被计算出来后,load指令就具备判断RAW相关性的条件了,每条load指令把它携带的地址计算出来之后,需要和前面所有已经执行的store指令携带的地址进行比较.通过 store buffer保存已经被仲裁电路选择倒是没有离开流水线的指令&lt;/p>
&lt;p>当store被选中时,其实就可以去允许后面的load指令参与仲裁,因为store指令地址计算的结果肯定先于load地址
存在的问题就是,如果在BCD没有被选中完毕之后,指令E被选择了,此时如果指令E和指令D的地址一致,指令D也不应该获取指令E的内容,所有需要判断出那些store指令在load的前面,哪些在后面&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 118;
flex-basis: 285px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241025213624613.png" data-size="301x253">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241025213624613.png"
width="301"
height="253"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241025213624613_hu14399999219861116549.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241025213624613_hu16921245988269030946.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;ol>
&lt;li>PC值,但是存在向前跳转的指令&lt;/li>
&lt;li>ROB,ROB是顺序的,但是由于访存指令还是少数,所以会比较稀疏&lt;/li>
&lt;li>解码阶段为load/store指令分配编号&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 359;
flex-basis: 862px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241025214623161.png" data-size="611x170">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241025214623161.png"
width="611"
height="170"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241025214623161_hu12201052963255340503.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241025214623161_hu8831078567315548889.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>对于上述指令,部分的乱序也是会浪费很多性能&lt;/p>
&lt;p>(3)完全的乱序执行,WAR和RAW都需要在流水线中执行&lt;/p>
&lt;p>只要load指令的操作数准备好了,就可以直接发起仲裁请求了&lt;/p>
&lt;p>可以让load/store共用发射队列,但还是需要独立的仲裁电路,store指令的仲裁电路需要根据年龄,找到最旧的指令(in-order),load指令,只需要选择准备好的最老的一条指令就行了(out-of-order)&lt;/p>
&lt;p>如果分开发射队列的话,store的发射队列只需要使用FIFO结构&lt;/p>
&lt;p>需要精确的预测机制来避免RAW的相关性,例如如果发现一条LOAD指令和之前的STORE指令存在RAW相关性,就先进行记录,在后续从store buffer 中获取数据 ,这样其实也可以去减少store buffer需要的端口和比较电路&lt;/p>
&lt;h3 id="非阻塞cache">非阻塞cache&lt;/h3>
&lt;p>阻塞cache:在发生cache缺失的时候,就锁定D-Cache与数据内存之间的数据通路,处理器无法执行其他的load/store指令&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 387;
flex-basis: 930px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026141835829.png" data-size="659x170">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026141835829.png"
width="659"
height="170"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026141835829_hu8881803643920320762.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026141835829_hu2616120719687539429.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>非阻塞cache:在发生缺失时还是可以执行其它的load/store指令,所以需要去保存load/store相应的一些数据,比方说store的数据 ,load的目的寄存器,但是实际上访问存储器还是通过一条数据通路&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 332;
flex-basis: 798px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026142115052.png" data-size="692x208">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026142115052.png"
width="692"
height="208"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026142115052_hu16210908296073923288.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026142115052_hu14757556971080052922.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>为了支持非阻塞cache,需要将那些已经产生D-cache缺失的load/store指令保存起来(MSHR(Miss Status/infornmation Holding Register))&lt;/p>
&lt;p>(1)首次缺失 ,对于一个给定的地址,访问D-Cache时第一次产生的缺失&lt;/p>
&lt;p>(2)再次缺失,首次缺失但是没有被解决,后续访问存储器的指令再次访问发生缺失的cache line ,再次缺失针对的是cache line 不是相同的地址,&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 201;
flex-basis: 482px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026142859357.png" data-size="674x335">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026142859357.png"
width="674"
height="335"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026142859357_hu551379707438212741.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026142859357_hu12241835318558202936.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>MSHR:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>V:valid ,指示当前的表项(entry)是否被占用 ,首次缺失MSHR本体的一个表项会被占用,Valid置一,直到Cache line从下级存储器被取回来.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Block Address : Cache line 数据块的公共地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Issued: 表示发生首次缺失的load/store指令是否已经开始处理,即是否向一级存储器发送读数据的请求&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>LOAD/STORE Table&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Valid : 表示一个表项是否被占用,无论是首次缺失还是再次缺失&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MSHR entry : 表示发生缺失的指令属于MSHR本体的哪个表项,产生缺失的指令可能会对应同一个cache line , 为了避免重复占用下一级存储器的带宽,只会占据同一个MSHR entry ,但是占据多个LOAD/STORE Table&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dest.register : 对于load指令,记录目的寄存器的编号, 对于store指令,这部分记录store指令在store buffer中的编号,一是可以找到store指令所携带的数据,以便和下级存储器中取出的数据块合并,二是能够释放store指令占据的store buffer中的空间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Type :记录访问存储器指令的类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Offset:访问存储器的指令所需要的数据在数据块中的位置&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>当发生缺失是,首先查找MSHR的本体,如果有相同的表项,代表再次缺失,只需要写到LOAD/STORE Table ,如果没有,需要写入MSHR和LOAD/SOTRE Table&lt;/p>
&lt;p>如果满了,就无法去处理新的访问存储器指令,就阻塞了&lt;/p>
&lt;p>对于load指令,需要把数据送到对应目的寄存器,并写到D-cache里 ,&lt;/p>
&lt;p>对于store指令,需要从Store buffer中找到对应的数据,和数据块合并,然后写到D-cache 里,然后释放store buffer&lt;/p>
&lt;p>(in-cache MSHR )&lt;/p>
&lt;p>在分支预测失败之后,需要去删除LOAD/SOTRE Table正在执行的load/store指令 ,并且如果针对于一个数据块的所有load/store指令都处于分支预测的路径上,那这个数据块也不能去更新到D-cache上去&lt;/p>
&lt;h3 id="关键字优先">关键字优先&lt;/h3>
&lt;p>就是去改进读取cache块数据的顺序 ,本来是0,1,2,3,4,5,6,7,8,可以修改为 &amp;mdash; 之类的 ,可以去把访存需要的数据提前&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 296;
flex-basis: 712px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151114817.png" data-size="591x199">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151114817.png"
width="591"
height="199"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151114817_hu396055995009789009.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151114817_hu14091866778141281238.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 264;
flex-basis: 633px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151122926.png" data-size="536x203">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151122926.png"
width="536"
height="203"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151122926_hu17293496163497610529.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151122926_hu13979690035990851764.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="提前开始">提前开始&lt;/h3>
&lt;p>在Cache line读取到指令需要的数据之后,就可以让CPU去继续执行了 ,相比于关键字优先不需要额外的硬件,但是如果数据处在数据块比较后面的位置,那就没有太大的用处&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 226;
flex-basis: 544px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151237967.png" data-size="490x216">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151237967.png"
width="490"
height="216"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151237967_hu3679352889834253705.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151237967_hu13572565010743933473.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>对于I-cache ,虽然指令需要做到顺序取出,但是由于存在分支跳转,也可以通过非阻塞的操作来加快取指,不同于D-cahce的是取出的指令必须是顺序的,如果前面的指令没有被取出来也必须进行等待直到数据被取出&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 200;
flex-basis: 480px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151523608.png" data-size="521x260">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151523608.png"
width="521"
height="260"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151523608_hu5704554154872303021.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151523608_hu14489172107682820978.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 298;
flex-basis: 716px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151504187.png" data-size="660x221">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151504187.png"
width="660"
height="221"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151504187_hu6937163011637089782.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B08/image-20241026151504187_hu5649834906388973804.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>超标量处理器&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>发射</title><link>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/</link><pubDate>Sat, 19 Oct 2024 20:25:19 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/</guid><description>&lt;h2 id="概述">概述&lt;/h2>
&lt;p>只要发射队列中的一条指令的草做书都准备好了,且满足了发射的条件,就可以送到相应的FU中执行.发射队列的作用就是使用硬件保存一定数量的指令,然后从指令中找出可以执行的指令&lt;/p>
&lt;p>发射时序一般处在处理器的关键路径上,直接影响处理器的周期时间&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 164;
flex-basis: 394px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019211023251.png" data-size="596x363">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019211023251.png"
width="596"
height="363"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019211023251_hu10933506266918888330.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019211023251_hu6047188780366288377.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>(1)发射队列(Issue Queue),用来存储已经被寄存器重命名,但是没有被送到FU执行的指令,也称为保留站(Reservation station)&lt;/p>
&lt;p>(2)分配(allocation)电路,用来从发射队列中找到空闲的空间,将寄存器重命名之后的指令存储在其中&lt;/p>
&lt;p>(3)选择电路(仲裁电路),发射队列中多条指令的操作数都准备好了,电路会按照一定规律,从其中找到最合适的指令,送到Fu中去&lt;/p>
&lt;p>(4)唤醒电路,当一条指令经过FU执行而得到结果数据时,会将其通知给发射队列中所有等待数据的指令,指令对应的源寄存器就会被设置为有效的状态,即为唤醒.&lt;/p>
&lt;h3 id="集中式-or-分布式发射队列">集中式 or 分布式发射队列&lt;/h3>
&lt;p>如果所有FU共用一个发射队列,即为集中式发射队列(centralized issue queue,CIQ)&lt;/p>
&lt;p>如果每一个FU都有单独的发射队列,称为分布式发射队列(Distributed issue queue,DIQ)&lt;/p>
&lt;p>CIQ容量大,选择电路和唤醒电路复杂,电路利用率高&lt;/p>
&lt;p>DIQ会出现一个发射队列满了,其他发射队列没有满,但是最终数据被阻塞的情况,就会出现效率低下的问题&lt;/p>
&lt;h3 id="数据捕捉-or-非数据捕捉">数据捕捉 or 非数据捕捉&lt;/h3>
&lt;p>寄存器的数据读取时间&lt;/p>
&lt;h4 id="数据捕捉">数据捕捉&lt;/h4>
&lt;p>流水线的发射阶段之前读取寄存器,被寄存器重命名的指令会先读取物理寄存器堆,然后将读取到的值一起写入到发射队列,没有被计算出来的数据会以编号的形式写入,供唤醒时使用,会被标记为无法获得状态(non-available),这些值会通过旁路网络获取.在发射队列中,存储指令操作数的地方称为payload RAM&lt;/p>
&lt;p>一条指令被仲裁电路选中发射到FU中去,它会将目标寄存器进行广播,其他在发射队列的指令就会去对比,有相等的情况时就会在payload RAM进行标记,在FU计算完成之后会写入到payload RAM 对应的位置 .&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 249;
flex-basis: 598px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019212613505.png" data-size="776x311">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019212613505.png"
width="776"
height="311"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019212613505_hu17079656071217617578.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019212613505_hu4889682781684174770.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>machine width : 每周期实际解码和重命名的指令个数&lt;/p>
&lt;p>issue width : 每周期最多可以在FU中并行执行的指令个数&lt;/p>
&lt;p>在RISC 里 machine width &amp;lt;= issue width&lt;/p>
&lt;p>物理寄存器的端口数 = machine width * 2&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 109;
flex-basis: 262px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019214007857.png" data-size="482x441">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019214007857.png"
width="482"
height="441"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019214007857_hu9745096111898785255.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019214007857_hu6496583278703640029.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>大多数源操作数会经历两读1写,从寄存器读取出来,送到发射队列,从发射队列中读取送到FU ,功耗高 ,面积大&lt;/p>
&lt;p>寄存器重命名方便 ,指令在顺利离开流水线的时候,需要将结果从重排序缓存中搬移到ARF中,采用数据捕捉的方式可以不用惯性指令结果的变化??????&lt;/p>
&lt;h4 id="非数据捕捉">非数据捕捉&lt;/h4>
&lt;p>在发射阶段之后读取物理寄存器堆,被重命名之后的指令不去读取物理寄存器堆,而是直接将源寄存器堆的编号放到发射队列中去.当指令被选中时,通过编号读取物理寄存器堆,将读取值送到FU中&lt;/p>
&lt;p>寄存器堆的读端口 = issue width ,比较大&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 116;
flex-basis: 278px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019214531455.png" data-size="543x468">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019214531455.png"
width="543"
height="468"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019214531455_hu17049688566279640447.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019214531455_hu12853474364071027865.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="压缩-or-非压缩">压缩 or 非压缩&lt;/h3>
&lt;h4 id="压缩">压缩&lt;/h4>
&lt;p>当一条指令被选中离开发射队列之后,指令上面所有的指令都会下移一格&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 425px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019215435572.png" data-size="620x350">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019215435572.png"
width="620"
height="350"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019215435572_hu11413087233639779848.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019215435572_hu6794216728322161169.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>通过多路选择器进行压缩&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 230;
flex-basis: 554px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019215543440.png" data-size="702x304">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019215543440.png"
width="702"
height="304"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019215543440_hu14122326088059142316.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019215543440_hu10310402141209563975.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>这种方式选择电路比较简单,通过优先编码选择最旧的就行了,oldest-first方法 ,但是选择电路的延时很长&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 162;
flex-basis: 390px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019215909085.png" data-size="512x315">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019215909085.png"
width="512"
height="315"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019215909085_hu10969826154039478454.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241019215909085_hu1981833134611443612.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>优点如下:&lt;/p>
&lt;p>1.分配电路简单,发射队列中的空闲空间总是处于上层,只需要使用发射队列的写指针,指向第一个空闲空间&lt;/p>
&lt;p>2.选择电路简单.最旧的指令存在的RAW相关性也越多,先执行可以最大程度释放和它存在RAW相关性的指令&lt;/p>
&lt;p>但是&lt;/p>
&lt;p>1.实现起来浪费面积&lt;/p>
&lt;p>2.功耗大&lt;/p>
&lt;h4 id="非压缩">非压缩&lt;/h4>
&lt;p>没有移动&lt;/p>
&lt;h2 id="发射过程中的流水线">发射过程中的流水线&lt;/h2>
&lt;h3 id="非数据捕捉结构的流水线">非数据捕捉结构的流水线&lt;/h3>
&lt;p>要被FU执行&lt;/p>
&lt;p>(1)指令所有的源操作数准备好了&lt;/p>
&lt;p>(2)指令被发射队列选中&lt;/p>
&lt;p>(3)能够从寄存器,payload RAM或者旁路网络获得源操作数&lt;/p>
&lt;p>下图发射过程被分为了唤醒(wake-up)和仲裁(Select)两个流水线阶段&lt;/p>
&lt;p>唤醒阶段,发射队列中的所有相关寄存器会被置为准备好的状态&lt;/p>
&lt;p>仲裁阶段,会使用仲裁电路选择一条最合适的指令送到FU中&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 357;
flex-basis: 857px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020130427036.png" data-size="836x234">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020130427036.png"
width="836"
height="234"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020130427036_hu13578928480996287574.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020130427036_hu15483047359496982778.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>tomasulo算法:在指令执行完才对相关指令进行唤醒&lt;/p>
&lt;p>可以通过将唤醒过程提前来获得更高性能&lt;/p>
&lt;p>即在指令A被仲裁电路选中后就对其他寄存器进行唤醒,这样指令B在下一个周期就能够被仲裁&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 267;
flex-basis: 643px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020131005465.png" data-size="611x228">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020131005465.png"
width="611"
height="228"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020131005465_hu12261158574036134191.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020131005465_hu15538349812895092404.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>意思是 Select 和 wake-up应该是在同一个周期的串行,A被唤醒才能够去selectB&lt;/p>
&lt;p>这种操作称为&amp;quot;原子的&amp;quot;&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 210;
flex-basis: 504px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020131410841.png" data-size="818x389">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020131410841.png"
width="818"
height="389"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020131410841_hu14381474285825173627.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020131410841_hu7271168370352068712.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>拆分流水线可以使得主频升高,但是&lt;/p>
&lt;p>(1)分支预测失败,惩罚增加&lt;/p>
&lt;p>(2)cache访问的周期数增加&lt;/p>
&lt;p>(3)功耗增大&lt;/p>
&lt;p>以上是假设执行是一个周期,实际上并不止&lt;/p>
&lt;h3 id="数据捕捉结构的流水线">数据捕捉结构的流水线&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 237;
flex-basis: 568px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020132530404.png" data-size="858x362">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020132530404.png"
width="858"
height="362"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020132530404_hu7642558332426759119.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020132530404_hu738880975121771762.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>可以把select和payload放在同一个流水段 ,在指令被仲裁电路选中之后,在同一个周期对发射队列其他的指令进行唤醒,同时去读取payload RAM,这两个操作是并行进行的,在这个流水段还会负责payload RAM的读取和写入,会导致处理器的周期时间变得过大.&lt;/p>
&lt;p>旁路网络这样是啥意思????&lt;/p>
&lt;p>另一种设计方式是把payload单独放成一个流水段,旁路和执行分成两个流水段,在旁路阶段,FU的结果会被送到payload RAM和FU的输入端&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 241;
flex-basis: 579px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020134351478.png" data-size="799x331">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020134351478.png"
width="799"
height="331"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020134351478_hu15363317278529565932.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020134351478_hu3440636031536888040.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="分配">分配&lt;/h2>
&lt;p>对于非压缩的方式设计的发射队列,需要分配电路扫描整个发射队列,找到四个空闲的表项并将四条指令写入&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 111;
flex-basis: 268px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020140342425.png" data-size="478x427">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020140342425.png"
width="478"
height="427"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020140342425_hu915797298984400432.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020140342425_hu13892753167635664755.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>
可以使用一个表格来记录所有空闲表项的编号,按照FIFO的方式管理,也可以简单把发射队列分为多个部分,每个段选一个空闲编号,但是会出现问题就是如果有一个表项非空的话,会阻碍其他指令的放入,甚至由于在寄存器重命名阶段是in-order状态A的无法放入会导致后续指令都无法放入&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 117;
flex-basis: 282px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020140649280.png" data-size="529x450">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020140649280.png"
width="529"
height="450"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020140649280_hu16173649002378560098.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020140649280_hu10959566968097053341.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="仲裁">仲裁&lt;/h2>
&lt;p>最好实现oldest-first功能的仲裁&lt;/p>
&lt;h3 id="1-of-m仲裁">1-of-M仲裁&lt;/h3>
&lt;p>可以通过指令在ROB中的位置作为指令的年龄信息,但是由于ROB是一个循环队列,所有单纯的地址是无法表征年龄的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 387;
flex-basis: 930px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020143224470.png" data-size="834x215">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020143224470.png"
width="834"
height="215"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020143224470_hu11734813543713119581.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020143224470_hu2948785691697860533.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>其实我觉得,直接比较读写地址可以的吧,读指针 &amp;gt; 写指针 , 下新上旧 , 读指针 &amp;lt; 写指针 , 上新下旧 ,其实读指针 &amp;gt; 写的时候,也代表两者不是一面的&lt;/p>
&lt;p>可以在ROB中地址前面再加入一位,称为位置值.想当于对于读写地址又加了一位&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 83;
flex-basis: 199px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020143555564.png" data-size="333x400">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020143555564.png"
width="333"
height="400"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020143555564_hu8819546655997073234.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020143555564_hu10037926471509499272.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 121;
flex-basis: 292px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020201905180.png" data-size="550x451">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020201905180.png"
width="550"
height="451"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020201905180_hu12240918921388596847.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020201905180_hu6071650023988884185.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>(1)位置值相同时,ROB地址越小,对应的指令越旧&lt;/p>
&lt;p>(2)位置值不同时,ROB地址越大,对应的指令越旧,比方说情况2的 0 10 与 1 01 比较,明显是0 10 旧&lt;/p>
&lt;p>先根据是否rdy选出指令,再根据年龄进行筛选&lt;/p>
&lt;p>二分&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 385px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020202810467.png" data-size="472x294">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020202810467.png"
width="472"
height="294"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020202810467_hu15299360207959238160.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020202810467_hu12909387690140829006.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 128;
flex-basis: 307px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020203048042.png" data-size="806x629">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020203048042.png"
width="806"
height="629"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020203048042_hu1482760444792659261.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020203048042_hu4089846200509570806.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>该电路能够得到最小的年龄值,但是还需要得到最小年龄值对应的指令,最方便的是将指令信息也一同附上去&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 145;
flex-basis: 350px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020203340063.png" data-size="496x340">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020203340063.png"
width="496"
height="340"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020203340063_hu10454207305702131865.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020203340063_hu4651879014994689033.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="n-of-m-仲裁电路">N of M 仲裁电路&lt;/h3>
&lt;p>几个FU共用一个发射队列,发射队列需要在一个周期内为没一个FU选择出一条指令,就要求有一个N of M的仲裁电路&lt;/p>
&lt;p>可以通过两级仲裁电路实现,第一级选择一条指令后对第二级进行标记,但是这样延时极大&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 172;
flex-basis: 414px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020204057330.png" data-size="601x348">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020204057330.png"
width="601"
height="348"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020204057330_hu14705004795844087432.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020204057330_hu18352542851947980875.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>对每一个FU使用一个1 of M的仲裁器, 根据指令类型进行分类,这样就会存在相同类型的指令会阻塞或者一部分FU处在空闲状态的问题&lt;/p>
&lt;p>可以通过增加FU的数量解决上述问题,但是比方数两个ALU,指令该分配给哪个ALU又是一个问题,可以通过轮换分配法实现,但是这样是无法保证严格的oldest-first原则的,而且有可能会浪费FU资源&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 268;
flex-basis: 645px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020204725711.png" data-size="828x308">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020204725711.png"
width="828"
height="308"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020204725711_hu5869953476708852689.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020204725711_hu13988473186677534807.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>一般来说,加减法,逻辑运算,移位运算合成一个FU,&lt;/p>
&lt;p>惩罚和除法合成一个,&lt;/p>
&lt;p>访问存储器和访问协处理器合并在一起,&lt;/p>
&lt;p>浮点运算合并在一起&lt;/p>
&lt;h2 id="唤醒">唤醒&lt;/h2>
&lt;h3 id="单周期的唤醒">单周期的唤醒&lt;/h3>
&lt;p>唤醒是指被仲裁器选中的指令将目的寄存器的编号(dst_tag)和发射队列中所有源寄存器的编号进行比较,并将那些比较结果相等的源寄存器进行标记的过程&lt;/p>
&lt;p>下面的电路是所有仲裁电路共享一个发射队列的情况, 所以发射队列只会接受到一个响应,因为同一时刻肯定只有一条指令被仲裁,每个FU都会使用一个仲裁电路&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 209;
flex-basis: 503px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020213306752.png" data-size="881x420">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020213306752.png"
width="881"
height="420"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020213306752_hu12195273095659706992.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020213306752_hu9126926194952235300.png 1024w"
loading="lazy"
alt="image-20241020213306752">
&lt;/a>
&lt;figcaption>image-20241020213306752&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>(1)ValL:指令中是否存在第一个源寄存器&lt;/p>
&lt;p>(2)SrcL:指令中第一个源寄存器的编号&lt;/p>
&lt;p>(3)RdyL:指令中第一个源寄存器是否已经被唤醒而处于准备好的状态&lt;/p>
&lt;p>(4)ValR:第二个&lt;/p>
&lt;p>(5)Dest:目的寄存器的编号&lt;/p>
&lt;p>(6)Issued:一条指令被仲裁电路选中之后,可能不会马上离开发射队列,需要进行标记,这样的指令不会向仲裁电路发出请求信号&lt;/p>
&lt;p>为什么有四个仲裁电路?????是不是指多个FU,但是多个FU不是应该可以接受多个请求&lt;/p>
&lt;p>发射队列的每一个表项都会根据四个响应信号的值,将自身的目的寄存器编号送到对应的总线上去,每个仲裁电路对应一个总线&lt;/p>
&lt;ol>
&lt;li>被仲裁电路选择的指令会将它的目的寄存器编号送到对应的总线上&lt;/li>
&lt;li>每一条总线的值会和发射队列中所有指令的源寄存器的编号进行比较,如果发现相等,标记为准备好的状态&lt;/li>
&lt;li>当发射队列某条指令的操作数都准备好了,并且没有被仲裁电路选中过,就可以想仲裁电路发送请求信号&lt;/li>
&lt;li>如果仲裁电路发现有更高优先级的指令发出请求,当前指令不会得到有效响应信号,需要再之后的周期继续发送请求信号.在一些设计中,可以轮流向多个仲裁电路发送请求.如果从仲裁电路中得到有效信号,就会吧issued置位.一条被选中的指令不会立刻离开发射队列,因为一个指令如果使用了load指令的结果,即使被仲裁电路选中,也不能离开&lt;/li>
&lt;li>发射队列的指令更具响应信号,,把目的寄存器编号送到对应总线上去,用来唤醒发射队列中所有相关的源寄存器&lt;/li>
&lt;/ol>
&lt;h3 id="多周期的唤醒">多周期的唤醒&lt;/h3>
&lt;p>单周期的唤醒能够在一个周期被FU执行完毕,但是当一条指令无法在一个周期执行完毕时,需要根据她在FU中的周期数,将唤醒过程延迟&lt;/p>
&lt;p>根据唤醒的过程&lt;/p>
&lt;h4 id="延迟广播">延迟广播.&lt;/h4>
&lt;p>发现被仲裁电路选中的指令执行周期大于1,则在选中的当前周期,不讲指令的目的寄存器编号送到总线上,而是根据选中指令需要执行的周期数(N),延迟N-1周期,才送到总线上去&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 490;
flex-basis: 1176px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020215810850.png" data-size="838x171">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020215810850.png"
width="838"
height="171"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020215810850_hu3236811294374040669.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020215810850_hu5826633055030736483.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>延迟广播之后可能出现tag bus产生冲突,比方说下面的MUL和ADD在同一时刻需要将目的寄存器的值送到tag broadcast bus上&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 290;
flex-basis: 696px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020220227829.png" data-size="836x288">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020220227829.png"
width="836"
height="288"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020220227829_hu16861531667843717354.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241020220227829_hu3627428205873869122.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>可以通过增加总线的数量,也可以利用表格,记录下FU执行指令所需要的周期数,被仲裁电路选中的指令,如果发现冲突,被选中的指令不会送到FU中执行,而是在下一个周期继续参与仲裁&lt;/p>
&lt;p>但是还是存在一个问题,就是指令B被否决(cycle 1),本身指令C是可以被仲裁的,但是C比B要新,所以这个周期被浪费掉了,所以可以先检查是否冲突,如果冲突的话就不向仲裁电路发起请求了(不发请求很奇怪啊,发请求在仲裁的时候否决行不行),但是这样访问网络和仲裁电路是串行的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 168;
flex-basis: 403px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021131316298.png" data-size="580x345">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021131316298.png"
width="580"
height="345"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021131316298_hu3250847906907956578.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021131316298_hu13178792662719264520.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="延迟唤醒">延迟唤醒&lt;/h4>
&lt;p>最优解就就是要去实现背对背执行,一条指令的执行和后一条指令的执行是先后的&lt;/p>
&lt;p>在比较结果相等时,不马上置为准备好的状态,而是根据指令所需要的执行周期数,进行相应周期的延时,然后再改变发射队列中源寄存器的状态&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 237;
flex-basis: 570px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021133753495.png" data-size="632x266">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021133753495.png"
width="632"
height="266"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021133753495_hu13815543178213961515.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021133753495_hu9998523058420159875.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 408;
flex-basis: 979px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021133917852.png" data-size="816x200">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021133917852.png"
width="816"
height="200"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021133917852_hu12597106233390159010.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021133917852_hu3885520225871445685.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>通过移位寄存器实现延迟唤醒的效果.在解码阶段对每条指令执行周期数进行编码,称为DELAY,在将目的寄存器送到总线外,还需要将DELAY值也送到总线上去.称为DELAY bus .&lt;/p>
&lt;p>Freed :表项是否空闲&lt;/p>
&lt;p>Issued:指令是否被仲裁电路选择&lt;/p>
&lt;p>SrcL:第一个源寄存器编号&lt;/p>
&lt;p>SrcL_M:当寄存器编号比较结果相等时,置1;当接收到仲裁电路的响应信号后,清0,它是移位寄存器进行算数右移的使能标志&lt;/p>
&lt;p>SrcL_SHIFT:移位寄存器,当编号比较结果相等时,将DELAY写入移位寄存器,每周期进行算数右移&lt;/p>
&lt;p>Rdy:表示第一个源寄存器是否准备好了&lt;/p>
&lt;p>SrcR_imm_valid :表示第二个操作数是否是立即数&lt;/p>
&lt;p>ROB ID:指令在ROB的位置,使得其能够实现oldest-first选择&lt;/p>
&lt;p>编码形式是类似于11111000(8位),在经过3个算数右移之后最低位就是1,就是Rdy=1&lt;/p>
&lt;p>直到被仲裁电路响应或者说选择之后,SrcL_M,srcL_SHIFT都会清零,其他时候Rdy都会保持着1的状态发送请求,直到被仲裁&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 153;
flex-basis: 368px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021142521046.png" data-size="847x552">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021142521046.png"
width="847"
height="552"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021142521046_hu3664706843096973520.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021142521046_hu17387076878035751376.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="推测唤醒">推测唤醒&lt;/h3>
&lt;p>对于某些指令,指令在FU中执行的周期数是可以被预测的,这样才可能分配一个确定的DELAY值&lt;/p>
&lt;p>但是对于&lt;/p>
&lt;p>(1)Load指令&lt;/p>
&lt;p>(2)某些处理器的特殊情况,例如RowerPC 603处理器存在early out,即当被除数值比较小时能够被提前预测指令&lt;/p>
&lt;p>比较简单的方法就是等指令执行完了之后再去唤醒其他指令&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 345;
flex-basis: 828px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021192837731.png" data-size="787x228">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021192837731.png"
width="787"
height="228"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021192837731_hu13555257517852508750.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021192837731_hu3376860337472421188.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>可以优化一下就是一般load指令在第一个周期计算地址,第二个周期访问Tag SRAM,第三个周期将读取到的数据写入目的寄存器,所以在第二个周期就可以判断,命中后去唤醒&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 304;
flex-basis: 730px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021192904962.png" data-size="654x215">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021192904962.png"
width="654"
height="215"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021192904962_hu15428221746190009120.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021192904962_hu17889552520785745816.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>假设d-cache是一直命中的,就能够得到一个比较理想的情况&lt;figure
class="gallery-image"
style="
flex-grow: 287;
flex-basis: 690px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021192917840.png" data-size="633x220">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021192917840.png"
width="633"
height="220"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021192917840_hu15789197913931500280.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021192917840_hu5995376768543292965.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>但是一旦指令A发生了D-cache缺失,此时B就不能停住而等待操作数,这样会使得FU无法接受其他新指令,严重影响处理器的性能.最好的办法是将指令B重新放回发射队列(Issue Queue),因为load指令在D-cache缺失之后,会到L2 cache寻找数据,此时可以假设L2 cache是命中的,并按照命中时间重新对相关寄存器进行唤醒,还是使用延迟唤醒&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 244;
flex-basis: 587px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021210622840.png" data-size="798x326">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021210622840.png"
width="798"
height="326"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021210622840_hu12103557051335753409.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241021210622840_hu10406948929904864418.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>对于不确定周期的指令,可以去预测指令执行的周期数,在指令得到结果之前,对相关的指令进行唤醒操作&lt;/p>
&lt;p>预测成功就执行,预测失败就去进行状态会被,被唤醒的所有寄存器需要重新设置为(not ready)状态,如果一些指令离开了发射队列,还需要从流水线中抹去,放回发射队列&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 283;
flex-basis: 681px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241022113730769.png" data-size="724x255">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241022113730769.png"
width="724"
height="255"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241022113730769_hu17984726890091083280.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B07/image-20241022113730769_hu12546290877630753377.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>未完待续&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>寄存器重命名(超标量+过程恢复)</title><link>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/</link><pubDate>Sat, 19 Oct 2024 11:46:41 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/</guid><description>&lt;h2 id="超标量处理器的寄存器重命名">超标量处理器的寄存器重命名&lt;/h2>
&lt;p>对于 Dest = Src1 op ASrc2&lt;/p>
&lt;p>(1)从RAT中找到Src1和Src2对应的物理寄存器Psrc1和Psrc2&lt;/p>
&lt;p>(2)从空闲列表(Free list)中找到一个空闲的物理寄存器Pdest,将其作为指令的目的寄存器Dest对应的物理寄存器&lt;/p>
&lt;p>(3)将逻辑寄存器Dest和物理寄存器Pdest的映射关系写到RAT中&lt;/p>
&lt;p>RAT需要3个读端口(Src1,Src2和Dest作为地址) Dest这个端口用于和ROB进行交互,将之前的映射关系写入ROB中&lt;/p>
&lt;p>对于超标量,就需要成倍的端口&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 244px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019163241468.png" data-size="542x533">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019163241468.png"
width="542"
height="533"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019163241468_hu9722805920825487102.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019163241468_hu15333852949318292347.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 355;
flex-basis: 853px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019163436413.png" data-size="491x138">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019163436413.png"
width="491"
height="138"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019163436413_hu8255966269358325669.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019163436413_hu10341188819607733508.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>(1) A,B存在RAW相关性 , 所以r0对应的物理寄存器之列来自于指令A对应的P30,不来自于从RAT读取的值&lt;/p>
&lt;p>(2)A,B,D存在WAW相关性,&lt;/p>
&lt;p>A.在写入RAT时,如果多条命令有同一个目标寄存器,那映射关系实际上写的还是最新的那条指令&lt;/p>
&lt;p>B.在将旧映射关系写入ROB的时候,如果发现一个周期内有多条指令都使用的同一个目的寄存器,此时写入到ROB中的旧映射关系不再来自于RAT读取的值,还是直接来自于和他存在WAW相关的指令,例如指令B的物理寄存器来自r0,或者所物理寄存器来自于P31&lt;/p>
&lt;p>(3)B,D存在WAR相关性,通过寄存器重命名可以客服&lt;/p>
&lt;h3 id="解决raw相关性">解决RAW相关性&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 225;
flex-basis: 542px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019171311893.png" data-size="479x212">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019171311893.png"
width="479"
height="212"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019171311893_hu15093054276736074816.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019171311893_hu12400791209209954972.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>意思就是如果在同一周期进行寄存器重命名,对于源寄存器,应该获取当前赋值给目的寄存器的物理寄存器(P31),而不是之前的物理寄存器(P25),所以需要进行组内相关性检查,由于此时是顺序的,所以相关性检查和顺序处理器相似,只需要比较源寄存器与目的寄存器的编号就可以了&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 157;
flex-basis: 378px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019172619923.png" data-size="671x426">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019172619923.png"
width="671"
height="426"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019172619923_hu2388780508683478430.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019172619923_hu5401642006917474835.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 175;
flex-basis: 421px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019172840946.png" data-size="700x399">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019172840946.png"
width="700"
height="399"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019172840946_hu10836408520997120333.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019172840946_hu14788717271551015671.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="解决waw相关性">解决WAW相关性&lt;/h3>
&lt;h4 id="对写rat进行检查">对写RAT进行检查&lt;/h4>
&lt;p>在寄存器重命名周期,如果存在多个指令的目的寄存器都相等的情况,那么只有最新的那条指令的映射关系才运行写入到RAT中 ,可以通过检查目标寄存器来实现,例如对于dst0只要和dst1,dst2,dst3中的任意一个存在相同的情况,就不需要将dst0对应的映射关系写到RAT中&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 433px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019173408453.png" data-size="649x359">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019173408453.png"
width="649"
height="359"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019173408453_hu17123479746391636632.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019173408453_hu741281326496473227.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="对写rob进行检查">对写ROB进行检查&lt;/h4>
&lt;p>为了能够释放掉那些不再使用的物理寄存器,同时可以对处理器的状态进行恢复,每条指令需要从RAT中读出他以前对应的物理寄存器,并将其写到ROB当中,如果两条指令存在WAW,那么比较新的这条指令对应的就的物理寄存器就直接来自与比较旧的那条指令,而不是RAT中&lt;/p>
&lt;p>通过比较指令与前面指令的目的寄存器就可以实现&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 235;
flex-basis: 565px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019173932215.png" data-size="471x200">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019173932215.png"
width="471"
height="200"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019173932215_hu14294549447914897059.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019173932215_hu11321073359892355193.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 366px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019174347687.png" data-size="818x536">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019174347687.png"
width="818"
height="536"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019174347687_hu5261038282723109657.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019174347687_hu1035297534865978118.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="rat的sram结构">RAT的SRAM结构&lt;/h3>
&lt;p>读优先 : 当前写入的数据在下一个周期才能被读取&lt;/p>
&lt;p>写优先:当前写入的数据在当前数据就能够被读取&lt;/p>
&lt;p>对于RAT,需要做到先读,读完再修改,所以采取读优先&lt;/p>
&lt;p>对于读取目的寄存器,由于本来就要获取目的寄存器之前对应的物理寄存器,所以读优先是必须的&lt;/p>
&lt;p>对于读取源寄存器,其实需要得到新的映射,需要使用之前的RAW相关性的检查和处理电路&lt;/p>
&lt;h3 id="特殊情况的标记">特殊情况的标记&lt;/h3>
&lt;p>对于没有一个目标寄存器和两个源寄存器的指令,采取以下方式&lt;/p>
&lt;p>(1)根据需要重命名的目的寄存器个数,觉得当前周期需要从空闲列表读取数字的个数&lt;/p>
&lt;p>(2)使用目的寄存器读取RAT时,目的寄存器不存在的指令不会读取RAT&lt;/p>
&lt;p>(3)使用源寄存器读取RAT时,源寄存器不存在的指令不会读取RAT&lt;/p>
&lt;p>(4)在RAW和WAW相关性检查时,如果源寄存器和目的寄存器不存在,那就忽略&lt;/p>
&lt;h2 id="寄存器重命名的恢复">寄存器重命名的恢复&lt;/h2>
&lt;h3 id="使用checkpoint对rat进行恢复">使用checkpoint对RAT进行恢复&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 294;
flex-basis: 707px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019195538227.png" data-size="820x278">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019195538227.png"
width="820"
height="278"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019195538227_hu9554526713186701756.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019195538227_hu243255152380488361.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>SRAM的最小存储单元(Main Bit Cell,MBC), (Checkpoint Bit Cell ,CBC)&lt;/p>
&lt;p>当需要对RAT进行状态保存时,将MBC的内容复制到指定的CBC中(Allocation),当对RAT进行状态恢复时,将对应CBC的内容复制到MBC中(Restore)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 244;
flex-basis: 585px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019195909542.png" data-size="747x306">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019195909542.png"
width="747"
height="306"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019195909542_hu12124988756168614648.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019195909542_hu3605033107495912464.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="使用walk对rat进行恢复">使用WALK对RAT进行恢复&lt;/h3>
&lt;p>对每一条指令,在ROB中都储存了这条指令之前对应的物理寄存器,利用这个信息,可以将RAT的状态逐步&amp;quot;倒回去&amp;quot;,使得那些处在错误路径上的指令,对RAT的修改都进行修复&lt;/p>
&lt;p>ROB中储存着物理寄存器,逻辑寄存器,之前的物理寄存器,一条一条回退到之前的物理寄存器,应该就可以做到&lt;/p>
&lt;h3 id="使用architecture-state对rat进行恢复">使用Architecture State对RAT进行恢复&lt;/h3>
&lt;p>在流水线提交阶段有一个RAT,,叫做aRAT(architecture RAT),它所保存的物理寄存器和逻辑寄存器的映射是完全正确的&lt;/p>
&lt;p>对于如下的指令,在重命名阶段的RAT,对于r1的映射应该是P34,但是实际上此时指令D是处在推测阶段,是有可能被冲刷掉的,但是对于aRAT,它保存的就是已经提交的指令之间的映射,例如R1对应P31,它的状态是完全正确的&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 311;
flex-basis: 748px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019200728702.png" data-size="371x119">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019200728702.png"
width="371"
height="119"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019200728702_hu131409708023009198.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B06/image-20241019200728702_hu14698438627090399126.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>所以说,可以通过aRAT进行恢复,具体就是在分支预测失败时,让指令继续执行,直到分支指令变成最旧的一条指令,那此时所保存的状态就是分支指令之前的指令所得到的状态,再复制,就能够恢复了&lt;/p>
&lt;p>等到分支指令变到流水线最旧的指令,才恢复RAT的另一个好处就是,如果在一条分支指令之前存在异常或者另一个分支预测失败,那这条分支指令就不会被处理,也避免了一些无用功&lt;/p>
&lt;h3 id="分发">分发&lt;/h3>
&lt;p>(1) 发射队列 (out-of-order),指令在送到FU中被执行之前,先被放到一个缓存中,每个FU都对应一个发射队列,&lt;/p>
&lt;p>只要一条指令的所有源操作数都准备好了,就可以直接送到FU中执行,不用理会指令的原始顺序,在多发射处理器中,需要从缓存中找到多个空闲的表项&lt;/p>
&lt;p>(2)发射队列(in-order),分支指令和store指令是按照顺序执行的,该队列就是FIFO&lt;/p>
&lt;p>(3)重排序缓存(ROB),将乱序拉回顺序&lt;/p>
&lt;p>分发就是将寄存器重命名之后的指令写到发射队列和重排序队列当中&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>寄存器重命名(方式+映射表)</title><link>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/</link><pubDate>Fri, 18 Oct 2024 19:25:31 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/</guid><description>&lt;h2 id="概述">概述&lt;/h2>
&lt;p>WAW 和 WAR (写后写 和读后写) 可以通过更换寄存器的名字来解决相应冲突&lt;/p>
&lt;h3 id="存在原因">存在原因&lt;/h3>
&lt;p>(1)有限个数的寄存器&lt;/p>
&lt;p>(2)循环体,很容易出现写后写冲突&lt;/p>
&lt;p>(3)代码重用,一些小函数被频繁的调用&lt;/p>
&lt;p>物理寄存器(Physical Register)和逻辑寄存器(Logical Register或者 architecture Register)物理寄存器数量多于逻辑寄存器&lt;/p>
&lt;p>重命名映射表 (Register Renaming Table, Register Alias Table ,RAT)空闲寄存器列表(Free Register List)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 142;
flex-basis: 342px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018194219065.png" data-size="565x396">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018194219065.png"
width="565"
height="396"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018194219065_hu12948031862022571597.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018194219065_hu6665644479148694185.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="寄存器重命名的方式">寄存器重命名的方式&lt;/h2>
&lt;p>(1)将逻辑寄存器(architecture Register File,ARF)扩展来实现&lt;/p>
&lt;p>(2)使用统一的物理寄存器(Physical Register File,PRF)实现&lt;/p>
&lt;p>(3)使用ROB实现&lt;/p>
&lt;h3 id="rob">ROB&lt;/h3>
&lt;p>将ROB作为物理寄存器,存储所有**推测状态(speculative)**的结果,使用逻辑寄存器(ARF)存储所有正确的结果&lt;/p>
&lt;p>当一条指令被写入ROB中的一个表项(entry)时,表项的编号即为物理寄存器,这样将逻辑寄存器和表项建立了关系,&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 104;
flex-basis: 249px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018200347542.png" data-size="520x500">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018200347542.png"
width="520"
height="500"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018200347542_hu17786506562862009958.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018200347542_hu13468767093701107792.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>ROB存储着所有没有离开流水线的指令结果,逻辑寄存器(ARF)存储着所有&amp;quot;最新&amp;quot;离开流水线的指令结果&lt;/p>
&lt;p>重命名映射表用来指示每一个逻辑寄存器的值是位于ROB中还是位于ARF中&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 159;
flex-basis: 382px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018204416224.png" data-size="547x343">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018204416224.png"
width="547"
height="343"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018204416224_hu13515659451589263706.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018204416224_hu16314137865859507292.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="缺点">缺点&lt;/h4>
&lt;p>(1)即使没有目的寄存器也会占用ROB的一个表项,代表物理寄存器的浪费&lt;/p>
&lt;p>(2)对应ROB和ARF需要有多个读端口来支持多条指令的访问&lt;/p>
&lt;h3 id="arf扩展">ARF扩展&lt;/h3>
&lt;p>可以使用一个独立的存储部件来存储流水线中所有指令的结果,只有那些存在目的寄存器的指令才会占据该部件,称为 PRF(Physical Register File),PRF和ROB类似,只是在没有目标寄存器的指令不会占据PRF,寄存器重命名时存在目的寄存器的指令会占据PRF的空间,在退休时,结果会从PRF搬移到ARF中&lt;/p>
&lt;p>重命名映射表用来指示每一个逻辑寄存器的值是位于PRF中还是位于ARF中,需要保存PRF的地址空间&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 174;
flex-basis: 417px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018205336777.png" data-size="707x406">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018205336777.png"
width="707"
height="406"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018205336777_hu16404446892470360470.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018205336777_hu9368343665924381625.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="使用统一的prf">使用统一的PRF&lt;/h3>
&lt;p>存储所有推测的和正确的寄存器值,&lt;/p>
&lt;p>使用空闲列表记录PRF哪些寄存器处在空闲状态&lt;/p>
&lt;p>当指令被寄存器重命名,并且存在目的寄存器的时候,就会占据PRF当中的一个寄存器,该寄存器会经历值未被计算,值被计算但是没有退休,退休三个过程&lt;/p>
&lt;p>通过重命名映射表存储每个逻辑寄存器和物理寄存器的对应关系&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 281;
flex-basis: 676px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018210442250.png" data-size="741x263">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018210442250.png"
width="741"
height="263"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018210442250_hu5765812971098335496.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018210442250_hu13651381351086792579.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>寄存器重命名时,&lt;/p>
&lt;p>源寄存器:查找重命名的映射表(RAT),找出对应物理寄存器的编号&lt;/p>
&lt;p>目的寄存器:给目的寄存器指定一个空闲状态的物理寄存器,并且该关系会被更新到RAT中&lt;/p>
&lt;p>指令退休之后释放物理寄存器&lt;/p>
&lt;p>一条指令之后在退休的时候,结果才会被外部看到,推测时是无法被外界看到的,需要使用另外一个RAT,存储所有&amp;quot;退休&amp;quot;状态的指令和物理寄存器的对应关系(啥时候释放?),外部只能通过查找这个RAT,找到逻辑寄存器对应的物理寄存器&lt;/p>
&lt;p>**只有后续的指令不使用物理寄存器之后,物理寄存器才能够变成空闲.**可以采取比较保守的方式,就是当一个指令和后面的莫条指令都写到同一个目的寄存器时,前面指令的物理寄存器可以释放了,**所以在ROB中除了记录逻辑寄存器当前对应的物理寄存器之外,还需要存储它之前对应的物理寄存器,**以便在指令退休的时候,将旧映射关系释放&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 462;
flex-basis: 1109px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018212115285.png" data-size="587x127">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018212115285.png"
width="587"
height="127"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018212115285_hu9704412521937681004.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018212115285_hu16598331625486021963.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="优点">优点&lt;/h4>
&lt;p>(1)寄存器的值只需要被写入一次?&lt;/p>
&lt;p>(2)源寄存器的值只能存储在一个地方,即PRF中&lt;/p>
&lt;h2 id="重命名映射表rat">重命名映射表(RAT)&lt;/h2>
&lt;p>RAT是一个表格,使用逻辑寄存器作为地址寻址,对于指令的源寄存器,可以从表格中得到对应的物理寄存器的编号&lt;/p>
&lt;p>对指令的目的寄存器来说,会将物理寄存器编号写到这个表格,即建立映射关系&lt;/p>
&lt;p>可以使用多端口的SRAM(sRAT)和CAM(cRAT)实现,CAM(内容寻址的存储器)&lt;/p>
&lt;p>SRAM表项个数等于逻辑寄存器的个数,里面存放对应物理寄存器的编号,位宽为log(物理寄存器数量)&lt;/p>
&lt;p>CAM表项个数等于物理寄存器的个数,里面存放对应逻辑寄存器的编号,位宽为log(逻辑寄存器数量),寻址时逻辑寄存器的编号会和每个表项进行对比,返回对应的地址&lt;/p>
&lt;p>使用SRAM寻址功耗小,面积小&lt;/p>
&lt;p>由于对于cRAT进行checkpoint只需要保存状态位(V),而不需要将整个cRAT进行保存,能够大大减少checkpoint电路的面积,当checkpoint数量大时,反而cRAT具有优势&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 200;
flex-basis: 480px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018213712733.png" data-size="801x400">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018213712733.png"
width="801"
height="400"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018213712733_hu11917421335245838524.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241018213712733_hu1566958612408089329.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="基于sram的重命名映射表">基于SRAM的重命名映射表&lt;/h3>
&lt;p>checkpoint需要把整个sRAT都保存下来&lt;/p>
&lt;p>对于4-way的超标量处理器,每周期最多需要对四条指令进行寄存器重命名,sRRAT需要8个读端口和4个写端口(每条指令包含2个源寄存器和1个目的寄存器)&lt;/p>
&lt;p>新写入到sRAT的值会覆盖掉原来旧的对应关系,需要记录下来&lt;/p>
&lt;p>(1)方便指令在退休的时候,将对应的物理寄存器变为空闲状态???? (&lt;del>还是无法理解,按理来说覆盖了说明该逻辑寄存器又分配了新的物理寄存器,那原来那个确实可以删除了&lt;/del>)(覆盖的时候后面的指令还没有退休,是有可能无效的(分支失败异常之类的,那后面分配的必定是要被还原的,所以物理寄存器是应该在后面指令退休的时候再变成空闲状态))&lt;/p>
&lt;p>(2)当一条指令之前存在异常或者分支预测失败时,需要从流水线中被抹去 ,同时这条指令对于RAT的修改需要被恢复过来,通过将旧的映射关系保存下来,可以协助RAT的修复&lt;/p>
&lt;p>缺点就是无法使用多的checkpoint&lt;/p>
&lt;p>只要预测的足够准,就不怎么需要checkpoint ,就可以去减少checkpoint的数量,但是如果预测错了又没有checkpoint,那对于RAT的恢复也会很麻烦&lt;/p>
&lt;p>??? RAT里面的值不是应该也是保存在ROB里的吗,那保存ROB不就行了,为什么还要RAT&lt;/p>
&lt;h3 id="基于cam的重命名映射表">基于CAM的重命名映射表&lt;/h3>
&lt;p>任意时刻,每个逻辑寄存器都只有一个物理寄存器与之对应,可以使用一个有效位(V)表示&lt;/p>
&lt;p>cRAT需要8个读端口和4个写端口(每条指令包含2个源寄存器和1个目的寄存器)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 136;
flex-basis: 328px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019105549693.png" data-size="427x312">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019105549693.png"
width="427"
height="312"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019105549693_hu13747216310678279473.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019105549693_hu9494608413689815968.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>SRAM + CAM ,SRAM用来存储每个物理寄存器对应的逻辑寄存器,CAM用来进行内容的比较&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 104;
flex-basis: 249px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019110223724.png" data-size="436x419">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019110223724.png"
width="436"
height="419"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019110223724_hu9710394290090467635.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019110223724_hu9996034423044171934.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>需要等到后面写入到同一个逻辑寄存器的指令退休(retire)的时候,才可以将这个逻辑寄存器之前对应的物理寄存器变为空闲状态&lt;/p>
&lt;p>并不是一个物理寄存器对应的有效位为0,就表示物理寄存器是空闲状态,有可能是这个映射关系刚刚被覆盖了.通过使用ROB和空闲列表可以管理物理寄存器何时变为空闲&lt;/p>
&lt;p>在分支指令寄存器重命名之前,将cRAT的有效位保存起来;在流水线的后续阶段,发现分支指令预测失败是,将分支指令对应的checkpoint写回到cRAT的有效位就完成恢复了(why?这样能保证恢复映射关系?)&lt;/p>
&lt;p>恢复时可能把一些本身处在非空闲状态的物理寄存器变成了空闲状态,因为非空闲状态的物理寄存器有效位也可以是0&lt;/p>
&lt;p>有可能在进行checkpoint保存的时候为0,到了状态恢复的时候变成1了.典型情况是物理寄存器在变为空闲之后又被新的指令使用了.但是该指令处在分支预测失败或者异常路径上.应该是要恢复为0的&lt;/p>
&lt;h4 id="举例">举例&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 121;
flex-basis: 291px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019112218359.png" data-size="250x206">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019112218359.png"
width="250"
height="206"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019112218359_hu1962377548689383665.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019112218359_hu12246078549466636233.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>在指令F进行寄存器重命名时,需要对cRAT进行Checkpoint保存&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 198;
flex-basis: 477px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019112714099.png" data-size="742x373">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019112714099.png"
width="742"
height="373"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019112714099_hu17598209733909211804.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019112714099_hu1293636208337311542.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>分支F被发现了分支预测失败,对cRAT进行状态恢复前 ,在F解码时,就保存了此时的状态,所以如果预测失败写回,就直接恢复了那之前的表&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 172;
flex-basis: 415px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019113041106.png" data-size="749x433">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019113041106.png"
width="749"
height="433"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019113041106_hu11760825212501167464.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B04/image-20241019113041106_hu9948112582823394189.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>每次在流水线的寄存器重命名阶段遇到分支2指令时,都会从表7.2找出一个空闲的GC来存储此时的有效位(V),并将GC的编号放在分支指令的信息中,这样当得到分支预测的结果之后,就可以根据编号来找到与之对应的GC.在分支预测失败之后直接进行相应的复原&lt;/p>
&lt;p>为了保证正确性,在分支预测失败进行恢复的时候,需要对空闲列表(free list)也进行状态恢复,那些别占用的物理寄存器都将重新变为空闲的状态(通过恢复free list的读指针)&lt;/p>
&lt;p>对cRAT进行状态恢复,就是要还原出逻辑寄存器真正对应的物理寄存器,因为会续分支预测失败路径上的指令可能会修改对应关系,需要进行纠正.对于物理寄存器的空闲管理交给ROB和free list&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>超标量处理器设计&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>分支预测(目标地址预测)</title><link>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/</link><pubDate>Wed, 16 Oct 2024 18:26:42 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/</guid><description>&lt;h2 id="分支预测的目标地址预测">分支预测的目标地址预测&lt;/h2>
&lt;p>对于直接跳转的分支指令,由于它的偏移值(offset)是以立即数的形式固定在指令中,目标地址是固定的,只需要记录分支指令的目标地址即可.&lt;/p>
&lt;p>对于间接分支跳转,大部分是CALL和Return ,所以可以进行一定程度的预测&lt;/p>
&lt;h3 id="直接跳转类型的分支预测">直接跳转类型的分支预测&lt;/h3>
&lt;p>(1)当分支指令不发生跳转时,&lt;/p>
&lt;p>目标地址 = 当前分支指令的PC值 + Sizeof(fetch group)&lt;/p>
&lt;p>(2)当发生跳转时&lt;/p>
&lt;p>目标指令 = 当前分支指令的PC值 + Sign_Eextend(offset)&lt;/p>
&lt;h4 id="btb">BTB&lt;/h4>
&lt;p>通过BTB(Branch Target Buffer)(相当于一个cache)使得多个PC值共用一个空间来存储目标地址,&lt;/p>
&lt;p>index + tag ,&lt;/p>
&lt;p>BTA (Branch Target Address)分支目标地址&lt;/p>
&lt;p>可以使用组相联的BTA来提高分支预测的准确率&lt;/p>
&lt;p>如果已经被替换了,那该跳哪去 : 先跳再冲刷吗?&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 386px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016185417711.png" data-size="856x532">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016185417711.png"
width="856"
height="532"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016185417711_hu7374757969364877266.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016185417711_hu6804283647297828377.png 1024w"
loading="lazy"
alt="image-20241016185417711">
&lt;/a>
&lt;figcaption>image-20241016185417711&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h5 id="partial-tag-btb">partial-tag BTB&lt;/h5>
&lt;p>如果映射到BTB中的指令中只有一条,那可以简化tag的部分,只使用很小的一部分,&lt;/p>
&lt;p>这种方法实际上也是在赌,减少了tag的大小,万一出现了重合,那就会出现目标地址预测失败的情况,但实际上,如果出现了重合,即使不减少tag,仍然会导致预测失败.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 302;
flex-basis: 726px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016185852818.png" data-size="778x257">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016185852818.png"
width="778"
height="257"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016185852818_hu17713719676223318284.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016185852818_hu2386597830981386302.png 1024w"
loading="lazy"
alt="image-20241016185852818">
&lt;/a>
&lt;figcaption>image-20241016185852818&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>和之前类似,仍然可以采取一定运算,来降低tag的位数,比方说异或&lt;/p>
&lt;p>&lt;del>我比较好奇,如果tag没有对上,对于直接相连来说,本身也无法得到正确地址,那为什么不直接把tag删除了&lt;/del>&lt;/p>
&lt;p>应该是组相联有用吧&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 235;
flex-basis: 565px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016190929007.png" data-size="551x234">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016190929007.png"
width="551"
height="234"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016190929007_hu17591383904736463039.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016190929007_hu1099906551913900448.png 1024w"
loading="lazy"
alt="image-20241016190929007">
&lt;/a>
&lt;figcaption>image-20241016190929007&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="btb缺失的处理">BTB缺失的处理&lt;/h4>
&lt;h5 id="停止执行">停止执行&lt;/h5>
&lt;p>暂停取指,直到目标地址被计算出来&lt;/p>
&lt;p>对于直接跳转指令,在解码阶段就可以分离出偏移值&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 181;
flex-basis: 436px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016192302026.png" data-size="491x270">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016192302026.png"
width="491"
height="270"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016192302026_hu6458134045906799705.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016192302026_hu15515489183902377947.png 1024w"
loading="lazy"
alt="解码阶段分离指令">
&lt;/a>
&lt;figcaption>解码阶段分离指令&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>停止取指会造成气泡,其实就是导致流水线停滞&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 282;
flex-basis: 677px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016192510520.png" data-size="725x257">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016192510520.png"
width="725"
height="257"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016192510520_hu17955641935330878257.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016192510520_hu10501807876583559370.png 1024w"
loading="lazy"
alt="image-20241016192510520">
&lt;/a>
&lt;figcaption>image-20241016192510520&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h5 id="继续执行">继续执行&lt;/h5>
&lt;p>使用顺序的PC值去指令&lt;/p>
&lt;p>计算出的地址和原来PC不一致,就冲刷流水线,重新开始取指&lt;/p>
&lt;p>这么做会浪费功耗&lt;/p>
&lt;h3 id="间接跳转类型的分支预测">间接跳转类型的分支预测&lt;/h3>
&lt;h4 id="callreturn-指令的分支预测">CALL/Return 指令的分支预测&lt;/h4>
&lt;p>CALL的地址一般也是固定的,所以也可以通过BTB进行预测&lt;/p>
&lt;p>Return的目标地址是不固定的,但是Return的目标地址总是等于最近一次执行的&lt;/p>
&lt;p>但是Return指令的目标地址,是按照CALL指令执行的相反顺序排列的&lt;/p>
&lt;p>所以可以做一个存储器,保存最近执行的CALL指令的下一条指令的地址,这个存储器是后进先出的(Last In First Out,LIFO),原理与堆栈类似,称为返回地址堆栈(Return Address Stack,RAS)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 249;
flex-basis: 599px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016202107006.png" data-size="809x324">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016202107006.png"
width="809"
height="324"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016202107006_hu5781072421816679016.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016202107006_hu16507365381751537198.png 1024w"
loading="lazy"
alt="CALL/Return 指令分支预测">
&lt;/a>
&lt;figcaption>CALL/Return 指令分支预测&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h5 id="ras工作条件">RAS工作条件&lt;/h5>
&lt;p>(1)需要及时保存PC + 4的值, 指令类型只有在解码阶段才能获知,因此可以在BTB中多加一项来保存分支指令的类型,这样在后续取到这一条指令就可以获知分支指令类型&lt;/p>
&lt;p>(2)在对Return指令进行目标地址预测是,能够选择RAS的数据,而非BTB的数据,按照上面的方法就可以做到&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 258;
flex-basis: 621px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016202620233.png" data-size="492x190">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016202620233.png"
width="492"
height="190"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016202620233_hu508193164438520474.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016202620233_hu1108834045841803893.png 1024w"
loading="lazy"
alt="将指令类型存储到BTB中">
&lt;/a>
&lt;figcaption>将指令类型存储到BTB中&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h5 id="ras满了">RAS满了&lt;/h5>
&lt;p>如果函数层次过深,就会出现RAS无法继续存放的问题&lt;/p>
&lt;p>(1)不保存CALL了,这样下一次Return 就会出现分支预测失败,并且还要求RAS指针不发生改变&lt;/p>
&lt;p>(2)继续按照顺序向RAS写入,此时最旧的会被覆盖掉.最后一次return 可能会出现分支预测失败,但是也是可能性事件,比方说递归函数&lt;/p>
&lt;p>可以通过带计数器的RAS来扩展RAS的容量, 即对于相邻的CALL,如果是同一条指令,就存放在RAS的同一个地址,再用计数器进行标识&lt;/p>
&lt;h4 id="其他指令的预测">其他指令的预测&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 131;
flex-basis: 316px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016203614224.png" data-size="227x172">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016203614224.png"
width="227"
height="172"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016203614224_hu6984012436561300078.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016203614224_hu9987043498051736602.png 1024w"
loading="lazy"
alt="case指令">
&lt;/a>
&lt;figcaption>case指令&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 291;
flex-basis: 699px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016210205293.png" data-size="711x244">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016210205293.png"
width="711"
height="244"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016210205293_hu5286439124904148354.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016210205293_hu16493922937992861016.png 1024w"
loading="lazy"
alt="image-20241016210205293">
&lt;/a>
&lt;figcaption>image-20241016210205293&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>使用基于局部历史的分支预测方法,把PHT换成了Target Cache,&lt;/p>
&lt;p>每当分支指令执行一次,就将目标地址写到Target Cache 中&lt;/p>
&lt;h2 id="小结">小结&lt;/h2>
&lt;p>分支预测使用 BHR , GHR和饱和计数器配合进行分支指令方向的预测&lt;/p>
&lt;p>使用 BTB, RAS和 Target Cache对分支指令的目标地址进行预测&lt;/p>
&lt;p>完整的分支预测方法 , decoupled BTB : 将分支指令的方向预测独立于BTB ,本身不会被记录到BTB的分支指令也会被记录(&lt;del>不跳转的分支也会记录到BTB&lt;/del>)&lt;/p>
&lt;p>预测为发生跳转,但是发生了BTB缺失,比发生分支预测失败的情况好,可以节省功耗&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 101;
flex-basis: 243px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016210627326.png" data-size="525x517">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016210627326.png"
width="525"
height="517"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016210627326_hu15660941589493918871.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241016210627326_hu4393141796266973765.png 1024w"
loading="lazy"
alt="完整的分支预测方法">
&lt;/a>
&lt;figcaption>完整的分支预测方法&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="分支预测失败的恢复">分支预测失败的恢复&lt;/h2>
&lt;p>处在错误路径上的指令有可能已经将处理器中某个部位的内容进行了更改,例如寄存器重命名阶段的重命名映射表(mapping table),需要对操作进行撤销,即分支预测失败时的恢复&lt;/p>
&lt;h3 id="分支预测检查">分支预测检查&lt;/h3>
&lt;p>(1) 解码阶段可以检查直接跳转的正确性,可以得到分支指令的方向和目标地址,&lt;/p>
&lt;p>对于间接跳转,即使得知预测错误,也无法得到正确的地址,但是可以通过流水线暂停来避免抹掉指令造成的功耗浪费&lt;/p>
&lt;p>(2)在读取物理物理寄存器的阶段,读取到寄存器的值,就可以得到目标地址是否错误,进行重新取指令,&lt;/p>
&lt;p>还是需要对不必要的指令进行抹去,对于进入发射队列的指令,可能比较困难,需要选择性的进行抹去&lt;/p>
&lt;p>(3)在执行阶段,任何分支指令的结果都可以被计算出结果,可以进行检查,但是造成的惩罚(penalty)是最大的.需要清除在这条分支指令之后进入流水线的所有数据&lt;/p>
&lt;h3 id="基于rob的恢复">基于ROB的恢复&lt;/h3>
&lt;p>在乱序执行中,在这条分支指令之前的数据也会在发射队列或者执行中,可以采取重排序缓存(ROB)对处理器进行状态恢复 (ROB是顺序存储指令的)&lt;/p>
&lt;p>当发生分支指令预测失败时,将信息记录在ROB对应的表项(entry)中,并且暂停流水线的取指令,但是让流水线继续执行,当这条指令变为最旧的指令后,冲刷掉流水线中的所有数据,重新取指令. 缺点就是停滞时间会比较长.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 168;
flex-basis: 404px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017201150348.png" data-size="627x372">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017201150348.png"
width="627"
height="372"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017201150348_hu6633562508414504632.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017201150348_hu17435496857645374288.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="基于checkpoint的状态恢复">基于checkpoint的状态恢复&lt;/h3>
&lt;p>checkpoint, 发现分支指令,并且在分支指令之后的指令更改处理器的状态之前,将处理器的状态保存起来,包括寄存器重命名中使用的映射表(mapping table),预测跳转的分支指令对应的下一条指令的PC等.在寄存器重命名阶段进行.&lt;/p>
&lt;p>需要将流水线中所有处于分支预测失败路径上的指令抹去. 需要一种机制识别哪些指令处在错误的路径上,可以通过编号实现,(编号可以在顺序阶段就编号完成),编号之后就可以获知哪些指令位于分支指令后面&lt;/p>
&lt;p>分支指令的编号个数决定了最多可以在流水线中存在的分支指令个数:假设处理器中最多支持128条指令存在于流水线中,按照每五条指令存在一条分支,最多后128/5 = 26 条分支指令存在与流水线中,需要5位&lt;/p>
&lt;p>所有在流水线中的分支指令会被分配一个编号值,编号会被保存在FIFO中,称为编号列表(tag list)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 348;
flex-basis: 836px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017203357101.png" data-size="680x195">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017203357101.png"
width="680"
height="195"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017203357101_hu1585711271151754337.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017203357101_hu6318652637317940402.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>
可以使用 (free tag list 和 tag list)来进行设计&lt;/p>
&lt;p>编号值不再被使用 : 分支指令成功retire , 分支预测失败 (分支预测失败之后就要根据编号来冲刷流水线了,所有编号可以回收了)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 152;
flex-basis: 365px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017210139005.png" data-size="709x466">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017210139005.png"
width="709"
height="466"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017210139005_hu2549951271718018092.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017210139005_hu616055593929496326.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h4 id="流水线抹去">流水线抹去&lt;/h4>
&lt;p>(1)发射之前的所有指令需要全部被抹去&lt;/p>
&lt;p>(2)流水线的发射阶段以及之后的流水段中,使用比寻找分支指令之后的指令全部抹去&lt;/p>
&lt;p>tag list 是顺序保存对应标号的 , 所以 比方说监测到分支指令3 预测失败,所以 0 ,1, 4 都需要被直接清除 , 因此通过广播编号值及将ROB中对应的指令置为无效&lt;/p>
&lt;p>一个周期内使用所有编号去抹去ROB的指令是不现实的,可以采取一个周期广播一个编号的方式 , 因为从取指到发射还是需要经过几个周期的,只要在这之前重排序缓存和发射队列指令被抹去了就行了&lt;/p>
&lt;p>编号值在解码阶段分配最合适 ,因为此时已经知道属于分支指令了&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 211;
flex-basis: 508px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017212325101.png" data-size="830x392">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017212325101.png"
width="830"
height="392"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017212325101_hu15410874502044149990.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017212325101_hu9376489831608965537.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>对于多条分支指令,通过控制第二条分支指令及其后面的所有指令在本周期不能进入解码阶段,可以避免使用多端口的FIFO来进行赋值&lt;/p>
&lt;h4 id="ptab-prediction-target-address--buffer">PTAB (Prediction Target Address Buffer)&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 284;
flex-basis: 683px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017214408287.png" data-size="820x288">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017214408287.png"
width="820"
height="288"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017214408287_hu16483625173512044034.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241017214408287_hu641169617317350030.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>通过将分支指令的预测值保存到一个缓存中,使得其在执行阶段进行分支预测是否正确的检查时能够正确调用,并且可以只保存方向预测为跳转的分支指令 PTAB , (Prediction Target Address Buffer)&lt;/p>
&lt;p>&lt;del>它不是本身就在BTB中吗,为啥还要一个buffer&lt;/del>&lt;/p>
&lt;p>(1)valid , 表示PTAB中某个表项是否被占用, 当分支指令写入PATB时,置1,当完成检查之后,Reset&lt;/p>
&lt;p>(2)Predict Address,分支指令被预测的目标地址&lt;/p>
&lt;p>(3)Next PC, 分支指令的下一条PC , 如果预测错误,就直接使用其作为正确地址取指&lt;/p>
&lt;p>怎么去找PTAB对应的表项 ? 用 PC吗 ? 或者说用 Next PC吗&lt;/p>
&lt;p>写PTAB可以在取指阶段就完成&lt;/p>
&lt;p>自修改代码一般都会去清空分支预测器和I-Cache&lt;/p>
&lt;h2 id="超标量处理器的分支预测">超标量处理器的分支预测&lt;/h2>
&lt;p>由于超标量取一个地址,会取出多条指令,所以如果只使用取指令时的地址进行分支预测,相当于只是对指令你个组中的第一条指令进行分支预测&lt;/p>
&lt;p>可以使用公共地址寻址分支预测器 (对于4-way超标量处理器[31:4]),因为多数情况下,实际只有一条分支指令 .在BTB中需要记录下分支指令在四条指令中的位置,避免错误使用它的结果 (为什么指令会出现非对齐存储?)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 202;
flex-basis: 485px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241018163144971.png" data-size="457x226">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241018163144971.png"
width="457"
height="226"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241018163144971_hu9999926450411402190.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241018163144971_hu11458907609099289698.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 151;
flex-basis: 363px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241018163913518.png" data-size="824x544">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241018163913518.png"
width="824"
height="544"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241018163913518_hu6574895480496477885.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241018163913518_hu7626835333107781858.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h3 id="目标地址的预测">目标地址的预测&lt;/h3>
&lt;p>要对指令组的所有指令进行分支预测,需要得到所有指令的PC值,需要使用3个加法器实现PC地址的获取,&lt;/p>
&lt;p>但是由于需要同时获取四个PC值对应的目标地址,需要BTB支持四个读端口,即使采用交疊避免真正的多端口,但是硬件利用率还是较低&lt;/p>
&lt;p>在分支指令的方向预测完毕之后,利用结果信息再进行目标地址的预测,可以避免对于BTB部件的多端口需求,,这种方法对于方向预测和目标地址预测是串行的&lt;/p>
&lt;p>对于RISC指令,大多数指令是直接跳转类型,目标地址无需预测,在取指之后实际就可以被计算出来.实现这样的功能需要进行预解码&lt;/p>
&lt;h3 id="目标方向的预测">目标方向的预测&lt;/h3>
&lt;p>对于基于局部历史的分支预测方法来说,需要PHT和BHT支持多个读端口,可以通过交疊(interleaving)模拟实现多端口&lt;/p>
&lt;p>对于全局历史的分支预测,由于一个周期内进行分支预测的多条指令对应的GHR是不同的,需要进行特殊的处理&lt;/p>
&lt;p>交疊 : 7位地址Addr[6:0],通过Addr [1:0]进行寻址bank ,通过Addr[6:2]寻址bank对应的内容 ,就是使用多个单端口的存储器去组成多端口的功能&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 180;
flex-basis: 432px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241018191051926.png" data-size="811x450">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241018191051926.png"
width="811"
height="450"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241018191051926_hu1473716903533949269.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B03/image-20241018191051926_hu1420717281721194343.png 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>超标量处理器设计&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>分支预测(概述+方向预测)</title><link>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/</link><pubDate>Tue, 15 Oct 2024 14:08:47 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/</guid><description>&lt;h2 id="概述">概述&lt;/h2>
&lt;h3 id="分支预测需要的内容">分支预测需要的内容&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>方向，决定跳转与否&lt;/p>
&lt;/li>
&lt;li>
&lt;p>目标地址 决定跳转的目的地，riscv中有两种体现形式&lt;/p>
&lt;p>PC + 立即数，跳转范围受限。&lt;/p>
&lt;p>寄存器跳转，预测风险难度高，但是除了RETURN/CALL,一般建议不使用间接跳转。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="分支预测的解码">分支预测的解码&lt;/h3>
&lt;p>快速分辨出哪条指令是分支指令&lt;/p>
&lt;p>I-cache得出结果可能需要多个周期，这些周期无法得到准确的预测结果&lt;/p>
&lt;p>解码+分支预测放在一个周期 ， 严重影响周期时间&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 205;
flex-basis: 494px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015143633234.png" data-size="768x373">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015143633234.png"
width="768"
height="373"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015143633234_hu5012368611020013998.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015143633234_hu8871877114348964777.png 1024w"
loading="lazy"
alt="快速解码">
&lt;/a>
&lt;figcaption>快速解码&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;del>可以在指令从L2 cache 写入到I-cache时进行快速解码,(pre-decode),然后将指令否是分支的信息也写入I-cache.&lt;/del>&lt;/p>
&lt;p>分支预测的最好时机是在当前周期得到去指令地址的时候&lt;/p>
&lt;p>可以直接通过PC值来进行分支预测，那就不需要进行解码了，但是只能够知道它是分支指令&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 220;
flex-basis: 530px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015153115072.png" data-size="773x350">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015153115072.png"
width="773"
height="350"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015153115072_hu10962105718784769920.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015153115072_hu3395612283536332007.png 1024w"
loading="lazy"
alt="pc分支预测">
&lt;/a>
&lt;figcaption>pc分支预测&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="分支预测的方向预测">分支预测的方向预测&lt;/h2>
&lt;p>跳转 （taken)和不发生跳转（not token）&lt;/p>
&lt;h3 id="一bit的跳转预测">一bit的跳转预测&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 290;
flex-basis: 697px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015182744711.png" data-size="517x178">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015182744711.png"
width="517"
height="178"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015182744711_hu3772473742952120499.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015182744711_hu6029973878094252562.png 1024w"
loading="lazy"
alt="image-20241015182744711">
&lt;/a>
&lt;figcaption>image-20241015182744711&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="基于两位饱和计数器2-bit-saturating-counter">基于两位饱和计数器（2-bit saturating counter)&lt;/h3>
&lt;p>根据分支前两次的结果预测下一次的结果&lt;/p>
&lt;h4 id="状态机">状态机&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 301;
flex-basis: 723px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015182911601.png" data-size="654x217">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015182911601.png"
width="654"
height="217"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015182911601_hu6329958502138823409.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015182911601_hu5922628540263514478.png 1024w"
loading="lazy"
alt="基于两位饱和计数器">
&lt;/a>
&lt;figcaption>基于两位饱和计数器&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>（1）计数器处于饱和状态，分支指令本次被预测发生跳转&lt;/p>
&lt;p>（2） 计数器处于不饱和状态，分支指令预测发生跳转&lt;/p>
&lt;p>（3） 计数器处于不饱和状态，分支指令预测不发生跳转&lt;/p>
&lt;p>（4） 计数器处于饱和状态，分支指令被预测不发生跳转&lt;/p>
&lt;p>初始状态位于 strongly not taken 或者 weakly not taken&lt;/p>
&lt;p>状态机处于饱和状态，只有两次预测失败才会改变预测的结果&lt;/p>
&lt;p>对于以下的情况，该种方法能够有50%的成功预测率&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 328;
flex-basis: 787px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015184801299.png" data-size="279x85">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015184801299.png"
width="279"
height="85"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015184801299_hu12330989491748176683.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015184801299_hu10712615227853934463.png 1024w"
loading="lazy"
alt="image-20241015184801299">
&lt;/a>
&lt;figcaption>image-20241015184801299&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>TTNTNTNTNT 对于这种情况，预测还是有问题，就是始终进入不了饱和，那还是相当于1bit&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 159;
flex-basis: 382px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015190708431.png" data-size="632x397">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015190708431.png"
width="632"
height="397"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015190708431_hu1672855586108714933.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015190708431_hu15441497882329938705.png 1024w"
loading="lazy"
alt="另外两种预测方法">
&lt;/a>
&lt;figcaption>另外两种预测方法&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>情况1是如果两次连续的跳转，就直接变成饱和的强跳转，那就需要两次不跳转才能预测为不跳转&lt;/p>
&lt;p>情况2是如果两次连续的不跳转，就直接变成饱和的不跳转，那就需要两次跳转才能预测为跳转&lt;/p>
&lt;p>利用格雷码降低功耗，减少出错的概率&lt;/p>
&lt;p>对于一般的for循环，TTTTTTTTTTTTTTN ,只会出现2次预测失败 ，开始时 weakly not taken , 当再次执行for循环，第一次就会预测成功&lt;/p>
&lt;h4 id="存储方式">存储方式&lt;/h4>
&lt;p>每一个PC需要一个两位的饱和计数器， 32 位 PC需要 2^30 * 2b 存储器 ， 使用如下方法存储（PHT（Pattern History Table））: 使用 PC的一部分进行存储&lt;/p>
&lt;h5 id="别名-aliasing">别名 （aliasing)&lt;/h5>
&lt;p>不同PC有相同的饱和计数器，导致相互之间的干扰&lt;/p>
&lt;p>中立别名 ： 分支指令的方向一致&lt;/p>
&lt;p>破坏性别名 ： 分支指令的方向不一致&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 225;
flex-basis: 540px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015192528722.png" data-size="655x291">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015192528722.png"
width="655"
height="291"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015192528722_hu9221241697137903403.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015192528722_hu5725581828526846841.png 1024w"
loading="lazy"
alt="使用PC值的一部分来寻址饱和计数器">
&lt;/a>
&lt;figcaption>使用PC值的一部分来寻址饱和计数器&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 189;
flex-basis: 454px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015194600012.png" data-size="563x297">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015194600012.png"
width="563"
height="297"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015194600012_hu2951182150190756820.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015194600012_hu16224992082934435296.png 1024w"
loading="lazy"
alt="image-20241015194600012">
&lt;/a>
&lt;figcaption>image-20241015194600012&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h5 id="避免别名的方法--哈希表">避免别名的方法 —— 哈希表&lt;/h5>
&lt;p>哈希表能够压缩32位PC到一个比较小的值&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 196;
flex-basis: 472px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015194955893.png" data-size="553x281">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015194955893.png"
width="553"
height="281"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015194955893_hu15927042566795541290.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241015194955893_hu8702642689007638371.png 1024w"
loading="lazy"
alt="image-20241015194955893">
&lt;/a>
&lt;figcaption>image-20241015194955893&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>更新时间点&lt;/p>
&lt;p>（1）在流水线的取指令阶段，进行分支预测，根据预测的结果更新PHT 预测的结果更新PHT肯定不合理&lt;/p>
&lt;p>（2） 在流水线的执行阶段，当分支指令的方向被计算出来时，更新PHT&lt;/p>
&lt;p>（3） 在流水线的提交阶段，当分支指令要离开流水线是，更新PHT&lt;/p>
&lt;p>对于2,3，分支指令可能在PHT更新之前就被取过很多次了，会影响结果，但是影响的不多&lt;/p>
&lt;p>在乱序执行中，即使在执行阶段得到了一条分支指令的结果，也无法保证该结果是正确的，因为分支指令可能位于分支预测失败的路径上，所以（3）是最保险的&lt;/p>
&lt;p>顺序执行不会吗 ？ 不会 ，主要是乱序执行有可能前面的指令后于后面指令的执行 ，这样后面的指令不一定会执行&lt;/p>
&lt;h3 id="基于局部历史的分支预测">基于局部历史的分支预测&lt;/h3>
&lt;p>BHR(Branch History Register):分支历史寄存器&lt;/p>
&lt;p>通过一个寄存器记录一条分支指令在过去的历史状态&lt;/p>
&lt;p>n位BHR记录n次结果&lt;/p>
&lt;p>BHR和PHT一一对应，BHR有多少种取值，PHT有多少表项（entry)&lt;/p>
&lt;p>结果从BHR右侧移入，对应的BHR值改变对应的PHT&lt;/p>
&lt;p>那就相当于把一个PC对应的表项有进行了细分 -&amp;gt; 一个BHR和多个PHT&lt;/p>
&lt;p>如果一个序列，连续相同的数有p位，则虚了的循环周期为p,只要BHR不小于p,就可以做完美预测&lt;/p>
&lt;h4 id="寻址">寻址&lt;/h4>
&lt;p>将所有分支指令的BHR组合在一起称为分支历史寄存器表(Branch History Register Table,BHT)&lt;/p>
&lt;p>如果进行全寻址的话 ， 1个PC值 需要 N位BTR + 2^N * 2 位PHT , 2^n 就需要 2^n（ N + 2^N * 2）&lt;/p>
&lt;p>所以需要PC部分值来寻址&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 238;
flex-basis: 571px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016102002253.png" data-size="629x264">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016102002253.png"
width="629"
height="264"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016102002253_hu9089512783516302460.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016102002253_hu16056882700841532627.png 1024w"
loading="lazy"
alt="image-20241016102002253">
&lt;/a>
&lt;figcaption>image-20241016102002253&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>1个PHT&lt;/strong>&lt;/p>
&lt;p>PC部分值寻址PHT,PC通过hash处理寻址BHT&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 159;
flex-basis: 382px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016104245339.png" data-size="581x365">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016104245339.png"
width="581"
height="365"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016104245339_hu16419308451831036941.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016104245339_hu17376103308489953844.png 1024w"
loading="lazy"
alt="image-20241016104245339">
&lt;/a>
&lt;figcaption>image-20241016104245339&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>异或（XOR)法&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 155;
flex-basis: 373px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016104602111.png" data-size="727x467">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016104602111.png"
width="727"
height="467"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016104602111_hu15096252433589209338.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016104602111_hu925909729055331567.png 1024w"
loading="lazy"
alt="位拼接法和异或法">
&lt;/a>
&lt;figcaption>位拼接法和异或法&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="基于全局历史的分支预测">基于全局历史的分支预测&lt;/h3>
&lt;p>对一条分支指令进行分支预测，考虑前面分支指令的执行结果&lt;/p>
&lt;p>需要一个全局历史寄存器（GHR(global history register)),记录最近执行的所有分支指令的结果、&lt;/p>
&lt;p>最理想的情况是对每条分支指令都使用一个PHT&lt;/p>
&lt;p>一个全局寄存器 + 每一条分支指令对应的PHT&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 203;
flex-basis: 489px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016144951117.png" data-size="650x319">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016144951117.png"
width="650"
height="319"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016144951117_hu9179660129570194615.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016144951117_hu13364759526685380234.png 1024w"
loading="lazy"
alt="image-20241016144951117">
&lt;/a>
&lt;figcaption>image-20241016144951117&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>量变引起质变，当局部BHR少到只剩下一个的时候，就是全局GHR&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 176;
flex-basis: 423px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016144931624.png" data-size="726x411">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016144931624.png"
width="726"
height="411"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016144931624_hu7324003174822261831.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016144931624_hu16689410873822793480.png 1024w"
loading="lazy"
alt="image-20241016144931624">
&lt;/a>
&lt;figcaption>image-20241016144931624&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>两种分支预测方法&lt;/p>
&lt;p>&lt;strong>局部历史分支预测&lt;/strong>：基于分支指令自身在过去的执行状况来进行分支预测，对每一条分支指令都使用分支历史寄存器（BHR),并使用了由两位饱和计数器组成的PHT(Pattern History Table)来捕捉每一个BHR的规律，使用BHR和PHT配合进行分支预测&lt;/p>
&lt;p>&lt;strong>全局历史分支预测&lt;/strong>：基于一条分支指令之前的一些分支指令的执行状况来进行分支预测，使用全局历史寄存器（GHR)记录所有分支指令的执行情况，由两位饱和计数器组成的PHT(Pattern History Table)来捕捉每一个GHR的规律,使用GHR和PHT配合进行分支预测&lt;/p>
&lt;h3 id="竞争的分支预测">竞争的分支预测&lt;/h3>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 134;
flex-basis: 323px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016145849720.png" data-size="417x309">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016145849720.png"
width="417"
height="309"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016145849720_hu13974060394538718885.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016145849720_hu8834002104162655463.png 1024w"
loading="lazy"
alt="竞争的分支预测原理图">
&lt;/a>
&lt;figcaption>竞争的分支预测原理图&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 135;
flex-basis: 325px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016150054271.png" data-size="506x373">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016150054271.png"
width="506"
height="373"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016150054271_hu7667022521208126150.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016150054271_hu9814928122482868099.png 1024w"
loading="lazy"
alt="竞争的分支预测_更详细的原理图">
&lt;/a>
&lt;figcaption>竞争的分支预测_更详细的原理图&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>理想情况下每一条分支指令都有一个CPHT(choice PHT)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 143;
flex-basis: 345px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016150311840.png" data-size="391x272">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016150311840.png"
width="391"
height="272"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016150311840_hu3776547309985000606.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016150311840_hu13077989359135110784.png 1024w"
loading="lazy"
alt="CPHT中的两位饱和计数器">
&lt;/a>
&lt;figcaption>CPHT中的两位饱和计数器&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;ol>
&lt;li>当P1预测正确,P2预测错误时,计数器减1&lt;/li>
&lt;li>当P1预测错误,P2预测正确时,计数器加1&lt;/li>
&lt;li>当P1和P2预测结果一致时,不管预测正确与否,计数器保持不变&lt;/li>
&lt;/ol>
&lt;p>对于每一条指令,在GHR内容不同时,会导致使用不同的分支预测方法,所以将PC值与GHR进行相应运算再去寻址CPHT的地址.&lt;/p>
&lt;h3 id="分支预测的更新">分支预测的更新&lt;/h3>
&lt;h4 id="历史寄存器">历史寄存器&lt;/h4>
&lt;p>（1）在流水线的取指令阶段，进行分支预测，根据预测的结果更新&lt;/p>
&lt;p>（2） 在流水线的执行阶段，当分支指令的方向被计算出来时，更新,分支指令可能在错误预测的路径上,造成错误&lt;/p>
&lt;p>（3） 在流水线的提交阶段，当分支指令要离开流水线是，更新 ,最保险的方法,但是浪费了性能&lt;/p>
&lt;p>一条分支指令b在时间t被分支预测,在时间 $t + \Delta t$ 从流水线退休, 任何在 $ \Delta t $内的时间被预测的分支指令都不会从分支指令的结果受益&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 199;
flex-basis: 479px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016153738302.png" data-size="763x382">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016153738302.png"
width="763"
height="382"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016153738302_hu9275436089700128595.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016153738302_hu11989386203258249376.png 1024w"
loading="lazy"
alt="image-20241016153738302">
&lt;/a>
&lt;figcaption>image-20241016153738302&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>采取方法1更新 ,但是会出现分支预测失败的情况 ,即使后续的分支指令使用的错误的 GHR ,由于他们在预测失败的路径上,都会从流水线中被抹去&lt;/p>
&lt;h5 id="修复ghr错误值的方法">修复GHR错误值的方法&lt;/h5>
&lt;h6 id="提交commit阶段修复法">提交(commit)阶段修复法&lt;/h6>
&lt;p>前端阶段Speculative GHR, 提交阶段放置一个 Ritired GHR, 在前端推测失败之后,需要等待分支指令退休的时候,将后端的GHR写到前端的GHR中,然后根据这条分支指令所指定的目标地址,重新取指令执行.&lt;/p>
&lt;p>该方法的缺点是会造成分支预测失败时惩罚的增大,(why?)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 231;
flex-basis: 556px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016154227680.png" data-size="610x263">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016154227680.png"
width="610"
height="263"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016154227680_hu14721982168866039868.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016154227680_hu14789759748200599315.png 1024w"
loading="lazy"
alt="利用提交阶段的GHR修复分支预测器的GHR">
&lt;/a>
&lt;figcaption>利用提交阶段的GHR修复分支预测器的GHR&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h6 id="checkpoint修复法">checkpoint修复法&lt;/h6>
&lt;p>在取指令阶段更新GHR时,可以把旧的GHR值保存起来,保存的内容称为checkpoint GHR .一旦分支指令的结果在流水线中被计算出来,就可以对分支指令的分支预测是否正确进行检查.如果分支预测正确,说明GHR中的值是正确的,如果预测失败,将这条分支指令对于的checkpoint GHR恢复到前端的GHR中,并从这条分支指令正确的目标地址开始取指令执行&lt;/p>
&lt;p>我的理解是把原来的GHR和分支预测结果的反向结合然后放进fifo中,在预测失败时把这个值取出来&lt;/p>
&lt;p>如果是顺序执行,读取存储器的方式也可以用FIFO,&lt;/p>
&lt;p>方式二是对方式一的一种补充,使得能够在执行阶段也去实现恢复&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 125;
flex-basis: 300px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016162236973.png" data-size="509x407">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016162236973.png"
width="509"
height="407"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016162236973_hu2640580469089932493.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016162236973_hu1193722294166550780.png 1024w"
loading="lazy"
alt="利用checkpoint的方法会GHR进行修复">
&lt;/a>
&lt;figcaption>利用checkpoint的方法会GHR进行修复&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h5 id="修复bhr错误值的方法">修复BHR错误值的方法&lt;/h5>
&lt;p>方式和修复GHR基本是类似的,并且BHR很少出现一条分支指令在流水线的提交阶段更新BHR,流水线中又出现了这条分支指令使用BHR进行分支预测的情况,除非循环体很短&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 302;
flex-basis: 725px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016181356130.png" data-size="716x237">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016181356130.png"
width="716"
height="237"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016181356130_hu15264134084536464035.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E7%AC%94%E8%AE%B02/image-20241016181356130_hu13417008434328038782.png 1024w"
loading="lazy"
alt="image-20241016181356130">
&lt;/a>
&lt;figcaption>image-20241016181356130&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="两位饱和寄存器">两位饱和寄存器&lt;/h4>
&lt;p>由于饱和寄存器一般是处在饱和状态的,所以选择在分支指令退休的时候更新PHT的饱和计数器,也不会产生很大的负面影响&lt;/p>
&lt;h2 id="版权信息">版权信息&lt;/h2>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>超标量处理器概览</title><link>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link><pubDate>Mon, 14 Oct 2024 16:43:30 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid><description>&lt;h2 id="超标量处理器概览">超标量处理器概览&lt;/h2>
&lt;h3 id="超标量处理器的流水线">超标量处理器的流水线&lt;/h3>
&lt;h4 id="顺序执行">顺序执行&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 248;
flex-basis: 596px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014210154017.png" data-size="1111x447">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014210154017.png"
width="1111"
height="447"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014210154017_hu6270803957762553776.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014210154017_hu2445645561301413447.png 1024w"
loading="lazy"
alt="in-order pipline">
&lt;/a>
&lt;figcaption>in-order pipline&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>假设流水线每周期可以从 I-Cache 中取出两条指令来执行，则称为2-way 的超标量处理器，在指令经过解码之后，需要根据自身的类型，将两条指令送到对应的 FU 中执行，这个过程称为&lt;strong>发射(Issue)&lt;/strong>。在这个阶段，指令会读取寄存器而得到操作数，同时根据指令的类型，将指令送到对应的 FU 中进行执行。在执行阶段使用了三个 FU:第一个 FU 用来执行 ALU 类型的指令，第二个 FU 用来执行访问存储器类型的指令，第三个 FU 用来执行乘法操作，因为要保证流水线的写回(Write back)阶段是顺序执行的，因此所有 FU 都需要经历同样周期数的流水线，ScoreBoard 用来记录流水线中每条指令的执行情况，例如一条指令在哪个 FU 中执行，在什么时候这条指令可以将结果计算出来等， 一个典型的 ScoreBoard如下。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 156;
flex-basis: 375px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014205855640.png" data-size="443x283">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014205855640.png"
width="443"
height="283"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014205855640_hu6690237057733442019.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014205855640_hu17698180965633417655.png 1024w"
loading="lazy"
alt="scoreboard">
&lt;/a>
&lt;figcaption>scoreboard&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>P: Pending,表示指令的结果还没有写回到逻辑寄存器中。&lt;/p>
&lt;p>F:一条指令在哪个 FU 中执行，在将指令结果进行旁路时会使用这个信息。&lt;/p>
&lt;p>Result Position:在这个部分记录了一条指令到达 FU 中流水段的哪个阶段，3 表示指令处于 FU 流水线的第一个流水段，1 表示指令到达 FU 流水段的最后一个阶段， 0 表示指令处于流水线的写回阶段，在流水线的&lt;strong>发射&lt;/strong>阶段，会将指令的信息写到ScoreBoard 中，同时，这条指令会查询 ScoreBoard 来获知自己的源操作数是否都准备好了，在这条指令被送到 FU 中执行之后的每个周期，都会将这个值右移一位，这样使用这个值就可以表达出指令在 FU 中执行到哪个阶段，对于执行 ALU 类型指令的第一个 FU 来说，当指令到达 3 时，就可以将它的结果进行旁路了；而对于执行乘法指令的第三个 FU 来说，只有当指令到达 1 时，才可以将它的结果进行旁路。本书采取的应该是第二种。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 293;
flex-basis: 703px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014210458774.png" data-size="1179x402">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014210458774.png"
width="1179"
height="402"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014210458774_hu1954438157205633643.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014210458774_hu1187424182315409720.png 1024w"
loading="lazy"
alt="image-20241014210458774">
&lt;/a>
&lt;figcaption>image-20241014210458774&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>阻塞发生在译码级&lt;/p>
&lt;p>指令能够跳转到发射级的条件是scoreboard 对应处在级为2&lt;/p>
&lt;p>&lt;del>？一发就发两条，两条必须要同步吗&lt;/del> 应该只是由于下条导致的等待&lt;/p>
&lt;p>指令D不能提前发射应该就是由于需要等待指令C发射&lt;/p>
&lt;p>&lt;del>指令C无法进入执行是由于前递的问题，需要等待指令A的前递&lt;/del>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 289;
flex-basis: 695px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014212008795.png" data-size="1002x346">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014212008795.png"
width="1002"
height="346"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014212008795_hu1110554545418232987.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014212008795_hu2239682821483300699.png 1024w"
loading="lazy"
alt="image-20241014212008795">
&lt;/a>
&lt;figcaption>image-20241014212008795&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="乱序执行">乱序执行&lt;/h4>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 263;
flex-basis: 632px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014211829599.png" data-size="1096x416">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014211829599.png"
width="1096"
height="416"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014211829599_hu3570244685790815188.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014211829599_hu18113048283906519492.png 1024w"
loading="lazy"
alt="乱序执行流水线">
&lt;/a>
&lt;figcaption>乱序执行流水线&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;strong>解码(Decode)阶段&lt;/strong>：为了在乱序执行时解决 WAW 和 WAR 这两种相关性，需要对寄存器进行&lt;strong>重命名(register renaming),&lt;strong>这个过程可以在&lt;/strong>流水线的解码(Decode)&lt;strong>阶段完成，也可以单独使用一个流水段来完成，处理器中需要增加&lt;/strong>物理寄存器堆(Physical Register File, PRF)来配合对指令集中定义的寄存器( Architecture Register File,ARF)进行重命名&lt;/strong>，PRF 中寄存器的个数要多于 ARF。&lt;/p>
&lt;p>**Dispatch(分发):**在这个阶段，被重命名之后的指令会按照程序中规定的顺序，写到发射队列(Issue Queue)、重排序缓存(ROB)和 Store Buffer 等部件中，如果在这些部件中没有空闲的空间可以容纳当前的指令，那么这些指令就需要在流水线的重命名阶段进行等待，这就相当于暂停了寄存器重命名以及之前的所有流水线，直到这些部件中有空闲的空间为止。分发阶段可以和寄存器重命名阶段放在一起，在一些对周期时间要求比较紧的处理器中，也可以将这个部分单独使用一个流水段。&lt;/p>
&lt;p>&lt;strong>发射(Issue)阶段&lt;/strong>：一旦指令的操作数准备好了，就可以从发射队列中离开，送到对应的 FU 中执行，因此发射阶段是流水线从&lt;strong>顺序执行到乱序&lt;/strong>执行的分界点。每个 FU 都有自己的流水线级数，在这种流水线中，由于每个 FU 的执行周期数都不相同，所以指令在流水线的写回(Write Back)阶段是乱序的，在这个阶段，一条指令只要计算完毕， 就会将结果写到 PRF中，由于分支预测失败( mis-prediction)或者异常( exception)的存在，PRF 中的结果未必都会写到 ARF 中，因此也将 PRF 称为 Future File。&lt;/p>
&lt;p>&lt;strong>Register File Read(读取寄存器)&lt;/strong>:被仲裁电路选中的指令需要从物理寄存器堆(Physical Register File,PRF)中读取操作数，一般情况下，被仲裁电路选中的指令可以从PRF 中得到源操作数，当然还有“不一般”的情况，那就是指令不能从 PRF 中得到操作数， 但是却可以在送到 FU 中执行之前，从旁路网络(bypassing network)中得到操作数，事实上很大一部分指令都是通过旁路网络获得操作数的，这也为减少 PRF 的读端口提供了可能。由于超标量处理器每周期需要执行好几条指令，PRF 所需要的端口个数也是比较多的，多端口寄存器堆的访问速度一般都不会很快，因此在现实世界的处理器中，这个阶段都会单独使用一个流水段。&lt;/p>
&lt;p>&lt;strong>提交(Commit)阶段&lt;/strong>：为了保证程序的串行结果，指令需要按照程序中规定的顺序更新处理器的状态，这需要使用一个称为&lt;strong>重排序缓存(ROB)&lt;strong>的部件来配合，流水线中的所有指令都按照程序中规定的顺序存储在重排序缓存中，使用重排序缓存来实现程序对处理器状态的顺序更新，一条指令在这个阶段，会将它的结果从 PRF 搬移到 ARF 中，同时&lt;/strong>重排序缓存也会配合完成对异常(exception)的处理&lt;/strong>，如果不存在异常，那么这条指令就可以顺利地离开流水线， 并对处理器的状态进行更改，此时称这条&lt;strong>指令退休(retire)了&lt;/strong>，一条指令一旦退休，它就再也不可能回到之前的状态了。&lt;/p>
&lt;p>因为 store 指令需要写存储器，如果在流水线的写回阶段就将 store 指令的结果写到存储器中，那么一旦由于分支预测失败或者异常等原因，需要将这条 store 指令从流水线中抹掉时，就没有办法将存储器的状态进行恢复了，因为存储器中原来的值已经被覆盖， &lt;strong>Store Buffer(SB),来存储 store 指令没有退休之前的结果&lt;/strong>，s&lt;strong>tore 指令在流水线的写回阶段，会将它的结果写到 Store Buffer 中，只有一条 store 指令真的从流水线中退休的时候，才可以将它的值从 Store Buffer 写到存储器中&lt;/strong>。使用了这个部件之后，Load 指令此时除了从 D-Cache 中寻找数据，还需要从 Store Buffer 中进行查找，这样在一定程度上增加了设计的复杂度。&lt;/p>
&lt;p>在重排序这里也会处理异常 ， 如果没有异常就会写入ARF, 并成功退休，但是无论有没有异常都会写入SB。退休了才可以去修改相应状态。&lt;/p>
&lt;p>发射阶段选择相应的指令并且送到FU,被选择的指令才会去读取物理寄存器&lt;/p>
&lt;p>写回阶段进行统一旁路，为什么我写的RISCV有这么多的旁路网络 ?&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 267;
flex-basis: 643px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241015131538323.png" data-size="946x353">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241015131538323.png"
width="946"
height="353"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241015131538323_hu5637503064892761083.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241015131538323_hu14369550668972739287.png 1024w"
loading="lazy"
alt="image-20241015131538323">
&lt;/a>
&lt;figcaption>image-20241015131538323&lt;/figcaption>
&lt;/figure>
&lt;figure
class="gallery-image"
style="
flex-grow: 289;
flex-basis: 695px"
>
&lt;a href="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014212008795.png" data-size="1002x346">
&lt;img src="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014212008795.png"
width="1002"
height="346"
srcset="https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014212008795_hu1110554545418232987.png 480w, https://VastCircle.github.io/2024/%E8%B6%85%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/image-20241014212008795_hu2239682821483300699.png 1024w"
loading="lazy"
alt="image-20241014212008795">
&lt;/a>
&lt;figcaption>image-20241014212008795&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>超标量处理器设计&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处&lt;/p></description></item><item><title>乱序执行CPU</title><link>https://VastCircle.github.io/2024/%E4%B9%B1%E5%BA%8F%E6%89%A7%E8%A1%8Ccpu/</link><pubDate>Sat, 12 Oct 2024 16:08:08 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E4%B9%B1%E5%BA%8F%E6%89%A7%E8%A1%8Ccpu/</guid><description>&lt;h2 id="tomasulos-algorithm">Tomasulo&amp;rsquo;s algorithm&lt;/h2>
&lt;h3 id="tomasulos-algorithm创新">Tomasulo‘s algorithm创新&lt;/h3>
&lt;p>Tomasulo算法的主要创新包括硬件实现的寄存器重命名、为所有执行单元设计的保留站（reservation stations），以及一个公共数据总线（CDB），通过该总线计算出的值可以广播到所有可能需要它们的保留站。这些创新使得指令能够实现更好的并行执行，避免在使用记分板或其他早期算法时可能导致的停滞.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 155;
flex-basis: 373px"
>
&lt;a href="https://VastCircle.github.io/2024/%E4%B9%B1%E5%BA%8F%E6%89%A7%E8%A1%8Ccpu/1280px-Tomasulo_Architecture.png" data-size="1280x822">
&lt;img src="https://VastCircle.github.io/2024/%E4%B9%B1%E5%BA%8F%E6%89%A7%E8%A1%8Ccpu/1280px-Tomasulo_Architecture.png"
width="1280"
height="822"
srcset="https://VastCircle.github.io/2024/%E4%B9%B1%E5%BA%8F%E6%89%A7%E8%A1%8Ccpu/1280px-Tomasulo_Architecture_hu16291643218958583948.png 480w, https://VastCircle.github.io/2024/%E4%B9%B1%E5%BA%8F%E6%89%A7%E8%A1%8Ccpu/1280px-Tomasulo_Architecture_hu13189868510601512322.png 1024w"
loading="lazy"
alt="Tomasulo_Architechure">
&lt;/a>
&lt;figcaption>Tomasulo_Architechure&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="cdb总线">CDB总线&lt;/h3>
&lt;p>公共数据总线（CDB）将保留站直接连接到功能单元。根据Tomasulo的设计，它“在保持优先顺序的同时促进并发执行” 。这带来了两个重要影响：&lt;/p>
&lt;ol>
&lt;li>功能单元可以直接访问任何操作的结果，而无需通过浮点寄存器。这使得多个等待同一结果的单元可以继续执行，而不必等待解决对寄存器文件读端口的争用问题。&lt;/li>
&lt;li>危险检测和控制执行是分布式的。保留站负责控制指令何时可以执行，而不是依赖一个专门的危险单元来进行统一管理。&lt;/li>
&lt;/ol>
&lt;h3 id="指令顺序">指令顺序&lt;/h3>
&lt;p>指令是按顺序发出的，因此即使它们是乱序执行的（即非顺序执行），指令序列的效果（如指令引发的异常）仍然会按照顺序执行处理器中的顺序发生。这确保了乱序执行不会影响程序的正确性和预期行为&lt;/p>
&lt;h4 id="寄存器重命名">寄存器重命名&lt;/h4>
&lt;p>Tomasulo算法通过寄存器重命名来实现正确的乱序执行。所有的通用寄存器和保留站寄存器要么保存真实值，要么保存占位符值。如果在发射阶段某个目标寄存器的真实值不可用，则最初会使用占位符值。占位符值是一个标签，指示哪个保留站将生成真实值。当功能单元完成计算并在公共数据总线（CDB）上广播结果时，占位符将被真实值替换。&lt;/p>
&lt;p>每个功能单元都有一个保留站。保留站保存执行单条指令所需的信息，包括操作和操作数。当功能单元空闲且指令所需的所有源操作数均为真实值时，功能单元便开始处理指令。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://jia.je/hardware/2021/09/14/brief-into-ooo/#%E7%BB%8F%E5%85%B8-tomasulo" target="_blank" rel="noopener"
>乱序执行CPU&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Tomasulo%27s_algorithm" target="_blank" rel="noopener"
>wikipedia Tomasulo&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Runahead_Execution_An_Alternative_to_Very_Large_Instruction_Windows_for_Out of Order_Processors</title><link>https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/</link><pubDate>Thu, 10 Oct 2024 14:23:54 +0800</pubDate><guid>https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/</guid><description>&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;p>当今的高性能处理器通过乱序执行来容忍长延迟操作。然而，随着延迟的增加，如果我们要继续容忍这些延迟，指令窗口的大小必须增加得更快。本文提出先行(runahead)执行是提高乱序处理器内存延迟容忍度(memory latency tolerance)的有效方法，而不需要不合理的大指令窗口。超前执行可解除因长延迟操作而阻塞的指令窗口的阻塞，从而使处理器能够在程序路径中提前执行,这会导致数据在需要之前就被预取到缓存中。&lt;/p>
&lt;h2 id="introduction">introduction&lt;/h2>
&lt;p>乱序执行处理器上的超前执行不会将长延迟操作“移开”（这需要在指令窗口中缓冲它及其后面的指令），而是将其扔出指令窗口。&lt;/p>
&lt;p>当指令窗口被一个长延迟操作阻塞时，架构寄存器文件(architectural register file)的状态会被checkpoint保存。然后处理器进入“&lt;strong>超前运行模式&lt;/strong>”。它为阻塞操作分配一个虚假结果并将其扔出指令窗口。阻塞操作后的指令被**获取、执行，并以伪退休（pseudo-retired）**的方式从指令窗口中移除。当阻塞操作完成时，处理器重新进入“&lt;strong>正常模式&lt;/strong>”。此时，它会恢复之前保存的检查点状态，并从阻塞操作开始重新获取和执行指令。
伪退出(pseudo-retire):指令按照传统意义上的方式执行和完成，只是它们不更新架构状态。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 361px"
>
&lt;a href="https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/image-20241012153516456.png" data-size="1193x793">
&lt;img src="https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/image-20241012153516456.png"
width="1193"
height="793"
srcset="https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/image-20241012153516456_hu10562838702254261104.png 480w, https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/image-20241012153516456_hu2604305733844358238.png 1024w"
loading="lazy"
alt="image-20241012153516456">
&lt;/a>
&lt;figcaption>image-20241012153516456&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Runahead 的好处来自于将被长延迟操作阻塞的小指令窗口转换为非阻塞窗口，从而使其具有大得多的窗口的性能。&lt;/p>
&lt;p>在这篇论文中，仅评估了runahead mode对于在二级缓存失效的内存操作的表现，尽管它也可以在任何阻塞指令窗口的长延迟操作上启动。基于英特尔奔腾4处理器的机器模型，该处理器拥有&lt;strong>128个条目的指令窗口&lt;/strong>。
首先展示了当前的乱序执行引擎无法容忍长延迟的主存访问时间。接下来，展示了runahead mode如何更好地应对这些延迟，并且能够达到一个具有更大指令窗口的机器的性能。&lt;/p>
&lt;h2 id="relate-work">Relate work&lt;/h2>
&lt;p>暂无&lt;/p>
&lt;h2 id="out-of-order-execution-and-memory-latency-tolerance乱序执行和内存容忍度">Out-of-order execution and memory latency tolerance(乱序执行和内存容忍度)&lt;/h2>
&lt;h3 id="instruction-and-scheduling-windows">Instruction and scheduling windows&lt;/h3>
&lt;p>乱序执行比顺序执行更能容忍缓存缺失，因为它能够调度与缓存缺失无关的操作。乱序执行的机器通过两个窗口实现这一点：&lt;strong>指令窗口和调度窗口。&lt;/strong>
指令窗口保存所有已解码但尚未提交到架构状态的指令(ROB)，其主要目的是保证指令按顺序退休，以支持精确异常。
调度窗口包含指令窗口中的一部分指令，其主要目的是每个周期搜索那些准备好执行的指令，并对它们进行调度执行(类似于发射队列)。&lt;/p>
&lt;p>当一个长延迟操作发生时，它会阻塞指令窗口，直到操作完成。尽管后续的指令可能已经执行完成，但它们无法从指令窗口中退休(顺序)。如果操作的延迟时间足够长，并且指令窗口不够大，指令会在窗口中堆积，最终导致指令窗口被填满。此时，机器会停顿并停止向前执行。&lt;/p>
&lt;h3 id="memory-latency-tolerance">Memory latency tolerance&lt;/h3>
&lt;p>取指理想 变 调度窗口 L2理想程度 指令窗口&lt;/p>
&lt;p>图 1 显示了七台不同机器的指令窗口停滞的周期百分比。每个栏顶部的数字是机器的IPC。该数据是所有模拟基准的平均值。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 137;
flex-basis: 330px"
>
&lt;a href="https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/image-20241010154101124.png" data-size="407x296">
&lt;img src="https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/image-20241010154101124.png"
width="407"
height="296"
srcset="https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/image-20241010154101124_hu10965257689849940883.png 480w, https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/image-20241010154101124_hu1293429106633126320.png 1024w"
loading="lazy"
alt="具有完整指令窗口停顿的周期的百分比">
&lt;/a>
&lt;figcaption>具有完整指令窗口停顿的周期的百分比&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Runahead 的性能优势来自于&lt;strong>将指令提取到提取引擎的缓存中，并执行未命中一级或二级缓存的独立加载和存储&lt;/strong>。&lt;/p>
&lt;h2 id="implementation-of-runahead-execution-in-an-out-of-order-processor">Implementation of runahead execution in an out-of-order processor&lt;/h2>
&lt;p>在本节中，我们描述了在乱序处理器上实现超前执行的情况，其中&lt;strong>指令在被调度后并在执行之前访问寄存器文件&lt;/strong>。Intel Pentium 4 处理器 [13]、MIPS R10000 微处理器 [30] 和 Compaq Alpha 21264 处理器 [18] 是这种微架构的例子。在其他一些微架构中，例如 Intel Pentium Pro 处理器 [12]，&lt;strong>指令在放入调度器之前访问寄存器文件&lt;/strong>。&lt;/p>
&lt;p>Frontend RAT(Register Alias Table)用于寄存器重命名，并包含架构寄存器到物理寄存器的推测映射。&lt;/p>
&lt;p>Retirement RAT 包含指向包含已提交架构值的物理寄存器的指针。它用于在分支错误预测和异常之后恢复状态。&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 140;
flex-basis: 338px"
>
&lt;a href="https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/image-20241010195821755.png" data-size="984x698">
&lt;img src="https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/image-20241010195821755.png"
width="984"
height="698"
srcset="https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/image-20241010195821755_hu4585166472539683948.png 480w, https://VastCircle.github.io/2024/runahead_execution_an_alternative_to_very_large_instruction_windows_for_out-of-order_processors/image-20241010195821755_hu9334271057527929535.png 1024w"
loading="lazy"
alt="image-20241010195821755">
&lt;/a>
&lt;figcaption>image-20241010195821755&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="entering-runahead-mode">Entering runahead mode&lt;/h3>
&lt;p>**当内存操作在二级缓存中未命中且该内存操作到达指令窗口的头部时，处理器进入超前执行模式。**导致进入超前执行模式的指令地址会被记录。为了在从超前运行模式退出时正确恢复架构状态，处理器对架构寄存器文件的状态进行checkpoint。出于性能原因，处理器还检查分支历史寄存器和返回地址堆栈的状态。&lt;/p>
&lt;p>架构寄存器文件的checkpoint可以通过复制提交寄存器别名表（Retirement RAT）指向的物理寄存器内容来完成，但这可能需要时间。&lt;strong>为了避免因复制导致的性能损失，处理器可以在正常模式下不断更新checkpoint的架构寄存器文件&lt;/strong>。当非超前指令从指令窗口中提交时，它会将其结果更新到检查点寄存器文件中的架构目标寄存器。这样检查点操作不会浪费任何时钟周期。&lt;/p>
&lt;p>尽管Retirement RAT 在正常模式下指向架构寄存器状态，但在超前运行模式下它指向伪架构寄存器状态并反映伪退休指令更新的状态&lt;/p>
&lt;h3 id="execution-in-runahead-mode">Execution in runahead mode&lt;/h3>
&lt;p>&lt;strong>无效位和指令&lt;/strong>:每个物理寄存器都有一个与其关联的无效（INV）位，&lt;strong>以指示它是否具有虚假值&lt;/strong>。任何源自设置了无效位的寄存器的指令都是无效指令。 INV 位用于防止使用虚假数据进行虚假预取和分支解析。
如果存储指令是无效的，它会在runahead期间将一个 INV 值引入内存映像。为了处理runahead mode下数据值(和 INV 值)通过内存的通信，我们使用一个小的“runahead cache”，它与一级数据缓存并行访问。&lt;/p>
&lt;p>&lt;strong>INV 值的传播&lt;/strong>:引入 INV 值的第一条指令是导致处理器进入runahead mode的指令,如果这条指令是加载指令，它会将其物理目的寄存器标记为 INV。如果它是存储指令，则会在runahead cache中分配一行，并将其目标字节标记为 INV。&lt;/p>
&lt;p>任何无效的指令在调度或执行后写入寄存器时，会将该寄存器标记为 INV。任何有效的操作在写入寄存器时，会重置其目的寄存器的 INV 位。&lt;/p>
&lt;p>其实意思就是因为此时存储是没有得到相应结果的,所以后续与目的寄存器相关的指令都是无效的,从第一条无效的指令衍射开&lt;/p>
&lt;h4 id="runahead-store-operations-and-runahead-cache">Runahead store operations and runahead cache&lt;/h4>
&lt;p>先行存储(store)指令不会将其结果写入任何地方??。因此，依赖于有效先行存储的先行加载被视为无效指令并被丢弃。由于寄存器数量有限，因此将&lt;strong>先行存储(store)&lt;strong>的结果&lt;/strong>转发&lt;/strong>到&lt;strong>先行加载(load)&lt;strong>对于高性能至关重要。
如果存储及其相关加载都在指令窗口中，则此转发是通过当前乱序处理器中已存在的&lt;/strong>store buffer&lt;/strong>来完成的(应该是cache那边的buffer)。
如果超前运行加载依赖于已经pseudo-retired的超前运行存储（这意味着该存储不再位于store buffer???前面是说的runahead store是不会将结果写入任何地方的），则它应该从某个其他位置获取存储的结果。1是写入data cache (提高复杂度,并且可能会占据其他有效指令的位置),2是弄一个大的fully-associative buffer。&lt;/p>
&lt;p>使用 &lt;strong>runahead cache&lt;/strong> 来保存伪退休先行存储的结果和 INV 状态 ，提供指令之间的数据和INV状态的通信,被逐出的缓存行不会写入其他地方。为了支持存储和加载之间 INV 位的正确通信，store buffer中的每个条目和runahead cache 中的每个字节都有一个相应的 INV 位。&lt;strong>runahead cache 的每个字节还有另一个与其关联的位（STO 位），指示存储是否已写入该字节&lt;/strong>。仅当访问的字节由存储写入（设置了 STO 位）并且访问runahead cache 有效时，对超前运行高速缓存的访问才会导致命中。&lt;/p>
&lt;p>更新 INV 和 STO的规则:&lt;/p>
&lt;ol>
&lt;li>当有效的先行存储完成执行时，它将其数据写入其store buffer entry（就像在普通处理器中一样）并重置该条目的关联 INV 位。同时，它查询数据缓存，如果数据缓存未命中，则向内存层次结构发送预取请求。&lt;/li>
&lt;li>当一个无效的先行存储被scheduled时，它会set其相关store buff条目的 INV 位。&lt;/li>
&lt;li>当一个有效的先行存储离开指令窗口时，它会将其结果写入runahead cache，并重置已写入字节的 INV 位。同时，它还会设置已写入字节的 STO 位。&lt;/li>
&lt;li>当一个无效的先行存储离开指令窗口时，如果其地址有效，它会设置写入字节的 INV 位和 STO 位&lt;/li>
&lt;li>先行存储从不将结果写入数据缓存??????。&lt;/li>
&lt;/ol>
&lt;p>当存储操作的地址无效时，存储操作会被简单地视为一个空操作（NOP）。由于加载操作无法识别与这些无效存储操作的依赖关系，它们可能会错误地从内存中加载一个陈旧的值。这个问题可以通过使用&lt;strong>内存依赖预测器&lt;/strong>来缓解，**预测器可以识别无效地址存储操作与其依赖的加载操作之间的依赖关系。**一旦依赖关系被识别，如果存储操作的数据值是无效的，则加载操作会被标记为无效（INV）；如果存储操作的数据值是有效的，则可以将其forward给加载操作。&lt;/p>
&lt;h4 id="runahead-load-operations">Runahead load operations&lt;/h4>
&lt;p>runahead load invalid :&lt;/p>
&lt;ol>
&lt;li>
&lt;p>源自无效的物理寄存器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>依赖于store buffer中标记为无效（INV）的存储操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>依赖于一个已经伪退休且是无效（INV）的存储操作(runahead cache)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>有效load会并行访问3个结构 ： data cache , runahead cache , store buffer .&lt;/p>
&lt;p>加载操作命中store buffer ，并且命中的条目被标记为有效，那么加载操作会从store buffer获取数据。
加载操作命中store buffer ，并且命中的条目被标记为无效（INV），那么加载操作会将其物理目标寄存器标记为无效（INV）。&lt;/p>
&lt;p>只有当加载指令访问的cache line有效且其访问的任何字节的 STO 位被set时，该加载才被视为在&lt;strong>runahead cache 中命中&lt;/strong>。
&lt;strong>如果load在store buffer未命中但在runahead cache 命中&lt;/strong>，则它会检查在runahead cache 访问的字节的 INV 位。如果没有INV 位set ，将使用runahead cache 中的数据。如果任意一个源数据字节被标记为 INV，则将其目标寄存器标记为INV。
&lt;strong>如果load在store buffer和runahead cache 都未命中，但在data cache中命中&lt;/strong>，则它将使用data cache中的值，并被视为valid(data cache 应该是不涉及runahead的)。然而，由于以下两个原因，它实际上可能是无效的????：1）它可能依赖于具有 INV 地址的store，(依赖于无效的store 就不应该被判定为有效啊)或者 2）它可能依赖于一个 INV store，该store在runahead cache中将其目标字节标记为 INV，但由于冲突，相应的runahead cache被释放(意思就是,实际上load是无效的,但是由于load所访问的runahead cache被别的指令释放了,比方说另一个store把cache 给挤掉了)。然而，这两种情况都是罕见的，不会显著影响性能。&lt;/p>
&lt;p>&lt;strong>如果加载在所有三个结构中都未命中&lt;/strong>，它会向L2 cache 发送请求以获取其数据。如果该请求在L2 cache 中命中，则数据将从L2 cache 传输到L1 cache ，加载完成其执行。如果请求在L2 cache 中未命中，加载会将其&lt;strong>目标寄存器&lt;/strong>标记为 INV，并像导致进入runahead mode的加载那样(未命中L1 cache)从调度器中移除。该请求会发送到内存像一个未命中 L2 缓存的&lt;strong>正常加载请求&lt;/strong>一样。&lt;/p>
&lt;p>store buffer &amp;gt; runahead cache &amp;gt; data cache &amp;gt; L2 cache&lt;/p>
&lt;h4 id="execution-and-prediction-of-branches">Execution and prediction of branches&lt;/h4>
&lt;p>在runahead mode中，分支的预测和解决方式与正常模式完全相同，唯一的区别是：具有 INV 源(寄存器标记为INV)的分支（与所有分支一样）被预测并以推测的方式更新全局分支历史寄存器，但与其他分支不同，它永远无法被解决。???如果分支预测错误，处理器在获取到该分支后将始终处于错误路径，直到遇到一个与控制流无关的点。我们将获取到错误预测的 INV 分支的程序中的点称为“分歧点”。分歧点的存在不一定对性能有害分歧点在runahead mode中出现得越晚，性能提升就越好。&lt;/p>
&lt;p>前置模式下分支预测器表的训练策略:&lt;/p>
&lt;p>(1)始终训练分支预测器表。如果一个分支首先在前置模式下执行，然后在正常模式下执行，这种策略将导致同一个分支对分支预测器进行两次训练。因此，预测器表的性能得到了增强，计数器可能会失去滞后效应。&lt;/p>
&lt;p>(2)不在前置模式下训练分支预测器。这会导致前置模式下的分支预测准确率降低，从而降低性能，并使分歧点更接近前置入口点。&lt;/p>
&lt;p>(3)第三种选择是始终在前置模式下训练分支预测器，但同时使用一个队列将前置模式下分支的结果传递给正常模式。在正常模式下，如果存在预测，则使用该队列中的预测来进行分支预测。如果一个分支使用来自队列的预测进行预测，则不会再次训练预测器表。&lt;/p>
&lt;p>(4)前置模式和正常模式使用两个独立的预测器表，并在进入前置模式时将正常模式的表信息复制到前置模式。这一选项在硬件实现上成本较高，但我们进行了模拟以确定第一种选项的双重训练策略有多重要。&lt;/p>
&lt;p>我们的结果显示，与第四种选择相比，二次训练分支预测器表条目并没有显著降低性能(方法1)。&lt;/p>
&lt;h4 id="instruction-pseudo-retirement-during-runahead-mode">Instruction pseudo-retirement during runahead mode.&lt;/h4>
&lt;p>在runahead mode下，指令按照程序顺序离开指令窗口。&lt;strong>如果某条指令到达指令窗口的队头，它将被考虑进行pseudo-retire。&lt;/strong>
如果被考虑pseudo-retire的指令是无效的（INV），它会立即从窗口中移除。
如果指令是有效的，它需要等待执行完毕（此时它可能变为无效的），并将结果写入&lt;strong>物理寄存器文件&lt;/strong>。在pseudo-retire时，一条指令会释放为其执行分配的所有资源。&lt;/p>
&lt;p>无论是有效还是无效的指令，在它们离开指令窗口时都会更新退休重命名表（Retirement RAT）。退休重命名表不需要存储与每个寄存器关联的无效（INV）位，因为物理寄存器已经各自关联了无效位。&lt;/p>
&lt;h4 id="exiting-runahead-mode">Exiting runahead mode&lt;/h4>
&lt;p>可以随时启动退出预运行模式的过程。为了简化处理，我们将退出预运行模式的操作与处理分支预测错误的方式相同。处理器中的所有指令都会被flush，相关的缓冲区会被释放。&lt;strong>检查点保存的架构寄存器文件会复制到物理寄存器文件的预定区域&lt;/strong>。前端和退休阶段的寄存器重命名表（RATs）也会修复，以指向保存架构寄存器值的物理寄存器。这种恢复通过重新加载相同的硬编码映射到两个别名表来实现。预运行缓存中的所有行都将失效（并且 STO 位被清零），在退出预运行模式时，检查点保存的分支历史寄存器和返回地址栈将被恢复。处理器会从导致进入预运行模式的指令地址开始获取指令。&lt;/p>
&lt;p>&lt;strong>我们的策略是在阻塞的加载指令从内存中取回数据时退出runahead mode&lt;/strong>。另一种策略是通过使用定时器提前退出，这样可以消除部分流水线填充或窗口填充的开销。我们发现，对于某些基准测试，这种替代策略表现良好，而在其他基准测试中表现不佳。总体上，提前退出的效果略差。提前退出对于某些基准测试表现较差的原因是，如果处理器不尽早退出预运行模式，可能会生成更多的二级缓存丢失预取请求。&lt;/p>
&lt;h3 id="知识点补充">知识点补充&lt;/h3>
&lt;h4 id="store-buffer">store buffer&lt;/h4>
&lt;h4 id="分支预测">分支预测&lt;/h4>
&lt;h4 id="architectural-register">Architectural Register&lt;/h4>
&lt;p>架构寄存器是指每个CPU独有的一组全局寄存器，这些寄存器不与其他CPU共享。它们可以存储任意类型的数据，并且能够在CPU内部的线程之间实现快速通信。&lt;/p>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/lshpku/hwd-prefetch-study/blob/master/Paper_Reading.md" target="_blank" rel="noopener"
>paper-reading&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.sciencedirect.com/topics/computer-science/architectural-register" target="_blank" rel="noopener"
>architectural register&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://jia.je/hardware/2021/09/14/brief-into-ooo/#%E8%83%8C%E6%99%AF" target="_blank" rel="noopener"
>浅谈乱序执行CPU&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>Chipyard Learning</title><link>https://VastCircle.github.io/2024/chipyard-learning/</link><pubDate>Mon, 07 Oct 2024 16:15:07 +0800</pubDate><guid>https://VastCircle.github.io/2024/chipyard-learning/</guid><description>&lt;h2 id="chipyard-从下载到构建">chipyard 从下载到构建&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/ucb-bar/chipyard.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">cd&lt;/span> chipyard
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout 1.10.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 为了使得clone顺利，把http都换成ssh ，使用命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>find . -name &lt;span style="color:#98c379">&amp;#34;.gitmodules&amp;#34;&lt;/span> -type f -exec sed -i &lt;span style="color:#98c379">&amp;#39;s/https:\/\/github.com\//git@github.com:/g&amp;#39;&lt;/span> &lt;span style="color:#56b6c2">{}&lt;/span> +
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 同步&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule sync
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 运行初始化脚本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./build-setup.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 导入conda环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">source&lt;/span> ./env.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">## 初始化software ，例如coremark&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ./scripts/init-software.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置一个2核心soc">配置一个2核心soc&lt;/h2>
&lt;h3 id="chipyard-配置文件">chipyard 配置文件&lt;/h3>
&lt;p>chipyard的配置文件是在&lt;code>chipyard/generators/chipyard/src/main/scala/config&lt;/code>中，&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">MyCoreConfigs&lt;/span> &lt;span style="color:#c678dd">extends&lt;/span> &lt;span style="color:#e5c07b">Config&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">freechips&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rocketchip&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">subsystem&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">WithNBigCores&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">++&lt;/span> &lt;span style="color:#7f848e">// single rocket-core
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#c678dd">new&lt;/span> &lt;span style="color:#e06c75">chipyard&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">config&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e5c07b">AbstractConfig&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在sim/verilator界面去执行命令,可以生成文件 simulator-chipyard-MyCoreConfig&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>make &lt;span style="color:#e06c75">CONFIG&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>MyCoreConfig
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="裸机编译riscv">裸机编译riscv&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include&lt;/span> &lt;span style="color:#7f848e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#7f848e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>(&lt;span style="color:#e5c07b">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">printf&lt;/span>(&lt;span style="color:#98c379">&amp;#34;Hello, World!&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ riscv64-unknown-elf-gcc -fno-common -fno-builtin-printf -specs&lt;span style="color:#56b6c2">=&lt;/span>htif_nano.specs -c hello.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ riscv64-unknown-elf-gcc -static -specs&lt;span style="color:#56b6c2">=&lt;/span>htif_nano.specs hello.o -o hello.riscv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ spike hello.riscv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello, World!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>-fno-common&lt;/li>
&lt;/ul>
&lt;p>​ 默认情况下，C语言会将未初始化的全局变量放在一个“common”区域，可以被多个文件共享。&lt;code>-fno-common&lt;/code> 禁止这种行为，要求每个未初始化的全局变量必须在一个文件中定义。&lt;/p>
&lt;ul>
&lt;li>-fno-builtin-printf&lt;/li>
&lt;/ul>
&lt;p>​ 禁用编译器内置的 &lt;code>printf&lt;/code> 函数，强制使用标准库中的 &lt;code>printf&lt;/code> 函数&lt;/p>
&lt;ul>
&lt;li>-specs=htif_nano.specs&lt;/li>
&lt;/ul>
&lt;p>​ &lt;code>htif_nano.specs&lt;/code> 可能是为特定硬件平台（例如 RISC-V）的模拟环境或硬件接口（HTIF）准备的编译和链接配置，确保生成的代码可以在特定环境中运行&lt;/p>
&lt;ul>
&lt;li>
&lt;p>-static&lt;/p>
&lt;p>强制使用静态链接库，而不是动态链接库。所有需要的库代码都会在编译时直接链接到生成的可执行文件中，而不是在运行时动态加载。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="生成波形">生成波形&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>make run-binary-debug &lt;span style="color:#e06c75">BINARY&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>test.riscv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>应该是要重新编译前文生成的bin文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 方法1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make run-binary-debug &lt;span style="color:#e06c75">BINARY&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>test.riscv &lt;span style="color:#e06c75">CONFIG&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>MyCoreConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 方法2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./simulator-chipyard-RocketConfig &lt;span style="color:#e06c75">$RISCV&lt;/span>/riscv64-unknown-elf/share/riscv-tests/isa/rv64ui-p-simple
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在output/chipyard.harness.TestHarness.MyCoreConfig 可以看到hello.vcd&lt;/p>
&lt;p>使用 gtkwave可以打开hello.vcd 查看&lt;/p>
&lt;h3 id="rocket-chip">rocket chip&lt;/h3>
&lt;div align=center>&lt;img src="rocket-chip 图表.png" alt="123" style="zoom:50%;" />&lt;/div>
&lt;h4 id="tiles">tiles&lt;/h4>
&lt;p>每个&lt;code>Rocket&lt;/code>核心都与一个页表遍历器、L1 指令缓存和 L1 数据缓存组合成一个&lt;code>RocketTile&lt;/code>&lt;/p>
&lt;p>每个 CPU 块都有一个 L1 指令缓存和 L1 数据缓存。这些缓存的大小和关联性可以配置。默认&lt;code>RocketConfig&lt;/code> 使用 16 KiB、4 路组关联指令和数据缓存&lt;/p>
&lt;h4 id="memory-system">Memory System&lt;/h4>
&lt;p>这些图块(Tiles)连接到&lt;code>SystemBus&lt;/code>，后者将其连接到 L2 缓存组。然后，L2 缓存组连接到&lt;code>MemoryBus&lt;/code>，后者通过 TileLink 到 AXI 转换器连接到 DRAM 控制器&lt;/p>
&lt;div align=center>&lt;img src="image-20241009152035016.png" alt="Momory System" style="zoom:50%;" /> &lt;/div>
&lt;h4 id="mmio">MMIO&lt;/h4>
&lt;p>对于 MMIO 外围设备，&lt;code>SystemBus&lt;/code>连接到&lt;code>ControlBus&lt;/code>和&lt;code>PeripheryBus&lt;/code>&lt;/p>
&lt;p>&lt;code>ControlBus&lt;/code>连接标准外围设备，如 BootROM、平台级中断控制器 (PLIC)、核心本地中断 (CLINT) 和调试单元&lt;/p>
&lt;h5 id="bootrom">BootROM&lt;/h5>
&lt;p>BootROM 包含第一阶段引导加载程序，即系统复位后运行的第一条指令。它还包含设备树，Linux 会使用它来确定连接了哪些其他外设，具体在 /generators/rocket-chip/bootrom&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">#define DRAM_BASE 0x80000000
.section .text.start, &amp;#34;ax&amp;#34;, @progbits
.globl _start
_start:
csrwi 0x7c1, 0 // disable chicken bits
li s0, DRAM_BASE
csrr a0, mhartid
la a1, _dtb
jr s0
.section .text.hang, &amp;#34;ax&amp;#34;, @progbits
.globl _hang
_hang:
csrwi 0x7c1, 0 // disable chicken bits
csrr a0, mhartid
la a1, _dtb
csrwi mie, 0
1:
wfi
j 1b
.section .rodata.dtb, &amp;#34;a&amp;#34;, @progbits
.globl _dtb
.align 5, 0
_dtb:
.ascii &amp;#34;DTB goes here&amp;#34;
&lt;/code>&lt;/pre>&lt;p>linker.ld&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>SECTIONS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ROM_BASE&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> 0x10000; /* ... but actually position independent */
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . &lt;span style="color:#56b6c2">=&lt;/span> ROM_BASE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .text.start : &lt;span style="color:#56b6c2">{&lt;/span> *&lt;span style="color:#56b6c2">(&lt;/span>.text.start&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . &lt;span style="color:#56b6c2">=&lt;/span> ROM_BASE + 0x40;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .text.hang : &lt;span style="color:#56b6c2">{&lt;/span> *&lt;span style="color:#56b6c2">(&lt;/span>.text.hang&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . &lt;span style="color:#56b6c2">=&lt;/span> ROM_BASE + 0x80;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rodata.dtb : &lt;span style="color:#56b6c2">{&lt;/span> *&lt;span style="color:#56b6c2">(&lt;/span>.rodata.dtb&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一条指令应该是从0x10000开始&lt;/p>
&lt;h2 id="源码解读">源码解读&lt;/h2>
&lt;h3 id="variablesmk">variables.mk&lt;/h3>
&lt;p>构建系统的不同方式之间共享的变量和/或值在目录结构中位于较高位置。因此，该项目的一些最重要的命令和变量chipyard/variables.mk中定义.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>ifeq (&lt;span style="color:#c678dd">$(&lt;/span>&lt;span style="color:#e06c75">SUB_PROJECT&lt;/span>&lt;span style="color:#c678dd">)&lt;/span>,chipyard)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">SBT_PROJECT&lt;/span> &lt;span style="color:#56b6c2">?=&lt;/span> chipyard
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MODEL ?&lt;span style="color:#56b6c2">=&lt;/span> TestHarness
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> VLOG_MODEL ?&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">$(&lt;/span>MODEL&lt;span style="color:#c678dd">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MODEL_PACKAGE ?&lt;span style="color:#56b6c2">=&lt;/span> chipyard.harness
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CONFIG ?&lt;span style="color:#56b6c2">=&lt;/span> RocketConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CONFIG_PACKAGE ?&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">$(&lt;/span>SBT_PROJECT&lt;span style="color:#c678dd">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GENERATOR_PACKAGE ?&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#c678dd">$(&lt;/span>SBT_PROJECT&lt;span style="color:#c678dd">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TB ?&lt;span style="color:#56b6c2">=&lt;/span> TestDriver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TOP ?&lt;span style="color:#56b6c2">=&lt;/span> ChipTop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>endif
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="sub_project">SUB_PROJECT&lt;/h4>
&lt;p>这对应于chipyard/generators 目录中的项目之一。更正式地说，它是由相应生成器目录中的 build.sbt 文件中的条目之一以及 Chipyard 根目录中的主 build.sbt 文件定义的.&lt;/p>
&lt;p>通过在定义良好的选项之一之间更改此文件，人们可以轻松地重用 Chipyard 架构的主要部分。&lt;/p>
&lt;p>constellation icenet rocketchip testchipip hwacha &amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">// 可以看到chipyard depend on 几乎所有其他的文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>&lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">chipyard&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">project&lt;/span> &lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#e06c75">file&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;generators/chipyard&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dependsOn&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">testchipip&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">rocketchip&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">boom&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">hwacha&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">sifive_blocks&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">sifive_cache&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">iocell&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sha3&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#7f848e">// On separate line to allow for cleaner tutorial-setup patches
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span> &lt;span style="color:#e06c75">dsptools&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">`rocket-dsp-utils`&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">gemmini&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">icenet&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">tracegen&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">cva6&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">nvdla&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">sodor&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">ibex&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">fft_generator&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">constellation&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">mempress&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">barf&lt;/span>&lt;span style="color:#56b6c2">,&lt;/span> &lt;span style="color:#e06c75">shuttle&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">settings&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">libraryDependencies&lt;/span> &lt;span style="color:#56b6c2">++=&lt;/span> &lt;span style="color:#e06c75">rocketLibDeps&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">value&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">settings&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">libraryDependencies&lt;/span> &lt;span style="color:#56b6c2">++=&lt;/span> &lt;span style="color:#e5c07b">Seq&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;org.reflections&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#98c379">&amp;#34;reflections&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#98c379">&amp;#34;0.10.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">settings&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">commonSettings&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">lazy&lt;/span> &lt;span style="color:#c678dd">val&lt;/span> &lt;span style="color:#e06c75">hwacha&lt;/span> &lt;span style="color:#c678dd">=&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">project&lt;/span> &lt;span style="color:#e06c75">in&lt;/span> &lt;span style="color:#e06c75">file&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;generators/hwacha&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">dependsOn&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">rocketchip&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">settings&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">libraryDependencies&lt;/span> &lt;span style="color:#56b6c2">++=&lt;/span> &lt;span style="color:#e06c75">rocketLibDeps&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">value&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">settings&lt;/span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">commonSettings&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="sbt_project">SBT_PROJECT&lt;/h4>
&lt;p>这对应于要构建的芯片的顶级存储库。这是定义许多更高级别的构造的地方，例如测试工具和测试平台。&lt;/p>
&lt;h4 id="model">MODEL&lt;/h4>
&lt;p>该模型是 Chisel 应该使用的项目的顶级模块。通常，这应该定义为与测试工具相同，但不一定必须如此。&lt;/p>
&lt;h4 id="vlog_model">VLOG_MODEL&lt;/h4>
&lt;p>这是 FIRRTL/Verilog 应该使用的项目的顶层模块。与 MODEL 一样，这通常与测试工具相同，但不一定需要如此。&lt;/p>
&lt;h4 id="model_package">MODEL_PACKAGE&lt;/h4>
&lt;p>这是用于查找 CPU 整体模型的 Scala 包。这应该对应于 Scala CPU 配置文件中的包 &lt;packageName>。&lt;/p>
&lt;h4 id="config">CONFIG&lt;/h4>
&lt;p>这定义了项目应使用的参数。通常，这用于选择 SBT_PROJECT 中定义的 CPU 配置之一。&lt;/p>
&lt;h4 id="config_package">CONFIG_PACKAGE&lt;/h4>
&lt;p>这是定义 Config 类的 Scala 包。该文件必须包含 Config 的类定义，这意味着对象 Config 必须存在。例如CONFIG=IceNetUnitTestConfig ,CONFIG_PACKAGE=icenet,这代表IceNetUnitTestConfig这个类是在包icenet里面的&lt;/p>
&lt;h4 id="generator_package">GENERATOR_PACKAGE&lt;/h4>
&lt;p>这是定义 Generator 类的 Scala 包。该文件必须包含 Generator 的类定义，这意味着 Generator 对象必须存在。&lt;/p>
&lt;h4 id="tb">TB&lt;/h4>
&lt;p>这定义了测试台包装器，该包装器延伸到测试工具上，以允许在 Verilog 模拟器中进行模拟。默认是TestDriver&lt;/p>
&lt;p>路径位于generators/rocket-chip/src/main/resources/vsrc/TestDriver.v&lt;/p>
&lt;p>里面包含着这个&lt;/p>
&lt;pre tabindex="0">&lt;code> `MODEL testHarness(
.clock(clock),
.reset(reset),
.io_success(success)
&lt;/code>&lt;/pre>&lt;h4 id="top">TOP&lt;/h4>
&lt;p>这是该项目的顶层模块。通常，这是由测试工具实例化的模块。 例如chiptop&lt;/p>
&lt;h2 id="在sim文件里make-发生了什么">在sim文件里make 发生了什么&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 拷贝镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp -f /chipyard/resources/testchipip/bootrom/bootrom.rv64.img chipyard/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/bootrom.rv64.img
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## Chipyard环境中生成基于MyCoreConfig配置的模拟代码，同时输出生成过程的日志以便后续调试和查看。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">set&lt;/span> -o pipefail &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">cd&lt;/span> CHIPYARD_HOME &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> java -cp CHIPYARD_HOME/.classpath_cache/chipyard.jar chipyard.Generator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--target-dir CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig &lt;span style="color:#7f848e">## 指定生成代码的输出目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--name chipyard.harness.TestHarness.MyCoreConfig &lt;span style="color:#7f848e">## 指定生成文件的名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--top-module chipyard.harness.TestHarness &lt;span style="color:#7f848e">## 指定生成代码的顶层文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--legacy-configs chipyard:MyCoreConfig &lt;span style="color:#7f848e">## 指定代码的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| tee CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.chisel.log&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 执行了一个 Chipyard 项目模型生成过程。它读取设计的 FIRRTL 文件和相关注解，生成指定的 SFC 模型和注解文件，以便后续仿真或综合使用。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">cd&lt;/span> CHIPYARD_HOME &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> java -cp CHIPYARD_HOME/.classpath_cache/tapeout.jar barstools.tapeout.transforms.GenerateModelStageMain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--no-dedup &lt;span style="color:#7f848e">## 禁用模块去重 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--output-file CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.sfc &lt;span style="color:#7f848e">## 指定生成SFC文件的路径,用于存储生成的模型数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--output-annotation-file CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.sfc.anno.json &lt;span style="color:#7f848e">## 生成模型的注解文件,将附加信息保存为json文件 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--target-dir CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/gen-collateral &lt;span style="color:#7f848e">## 指定生成的附加文件的目标目录.gen-collateral 用于存放存放其他的生成数据和文件。 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--input-file CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.fir &lt;span style="color:#7f848e">## 输入的 FIRRTL 文件，用于描述整个设计的结构和逻辑。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--annotation-file CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.appended.anno.json &lt;span style="color:#7f848e">## 输入注解文件，包含了与 FIRRTL 文件相关的额外信息。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--log-level error &lt;span style="color:#7f848e">## 设置日志等级为 error，只输出错误信息，以减少不必要的日志信息。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--allow-unrecognized-annotations &lt;span style="color:#7f848e">##允许工具跳过无法识别的注解，保证生成过程顺利进行。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-X
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>firtool &lt;span style="color:#98c379">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">&lt;/span> --format&lt;span style="color:#56b6c2">=&lt;/span>fir &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 指定输入文件为 FIRRTL 格式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --dedup &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 启用模块去重，减少重复模块&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --export-module-hierarchy &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 导出模块的层次结构，便于理解模块关系&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --emit-metadata &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 生成包含设计元数据的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --verify-each&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e5c07b">true&lt;/span> &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 每次转换后验证 FIRRTL，确保转换正确性&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --warn-on-unprocessed-annotations &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 对无法识别的注解给出警告，便于调试&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --disable-annotation-classless &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 禁用无明确类型的注解，避免生成不确定信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --disable-annotation-unknown &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 禁用未知类型的注解，确保生成过程可控&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --mlir-timing &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 记录 MLIR 的执行时间，便于性能分析&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --lowering-options&lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 控制降低选项（留空使用默认设置）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --repl-seq-mem &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 启用序列内存替换，将高层内存结构转换为可综合内存&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --repl-seq-mem-file&lt;span style="color:#56b6c2">=&lt;/span>CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.mems.conf &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 指定内存替换配置文件，描述生成的内存模块&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --repl-seq-mem-circuit&lt;span style="color:#56b6c2">=&lt;/span>TestHarness &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 指定内存替换的电路名称&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --annotation-file&lt;span style="color:#56b6c2">=&lt;/span>CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.sfc.anno.json &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输入注解文件，提供生成过程所需的额外信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --split-verilog &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 将生成的 Verilog 拆分为多个文件，便于管理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -o CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/gen-collateral &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 指定输出目录，存放生成的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.sfc.fir &lt;span style="color:#7f848e"># 输入 FIRRTL 文件，包含电路的高层次描述&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 这条命令运行 uniquify-module-names.py 脚本，用于对模块名称进行唯一化。其目的在于解决模块名重复问题，确保在文件列表和层次结构中，每个模块的名称都是唯一的，便于 Verilog 生成和仿真流程的管理。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CHIPYARD_HOME/scripts/uniquify-module-names.py &lt;span style="color:#98c379">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">&lt;/span> --model-hier-json CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/model_module_hierarchy.json &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输入：模型模块的层次结构 JSON 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --top-hier-json CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/top_module_hierarchy.json &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输入：顶层模块的层次结构 JSON 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --in-all-filelist CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/gen-collateral/filelist.f &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输入：包含所有模块的文件列表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --dut ChipTop &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 指定待验证的顶层模块为 ChipTop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --model TestHarness &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 指定模型的顶层模块为 TestHarness&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --target-dir CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/gen-collateral &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 指定目标目录，用于存放输出文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --out-dut-filelist CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.top.f &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输出：顶层模块的文件列表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --out-model-filelist CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.model.f &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输出：模型模块的文件列表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --out-model-hier-json CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/model_module_hierarchy.uniquified.json &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输出：唯一化后的模型模块层次结构 JSON 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --gcpath CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/gen-collateral &lt;span style="color:#7f848e"># 指定生成文件的路径（用于在唯一化过程中查找生成文件）\&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 复制TestDriver.v到gen-collateral文件夹&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cp -f CHIPYARD_HOME/generators/rocket-chip/src/main/resources/vsrc/TestDriver.v CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/gen-collateral
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 运行 split-mems-conf.py 脚本，将包含所有内存配置的文件分离为顶层模块和模型模块各自独立的内存配置文件。使顶层模块 ChipTop 和模型模块 TestHarness 各自拥有独立的内存配置文件，便于后续的综合和仿真过程。 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CHIPYARD_HOME/scripts/split-mems-conf.py &lt;span style="color:#98c379">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">&lt;/span> --in-smems-conf CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.mems.conf &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输入：包含所有内存的配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --in-model-hrchy-json CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/model_module_hierarchy.uniquified.json &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输入：唯一化的模型模块层次结构 JSON 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --dut-module-name ChipTop &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 指定顶层模块名称为 ChipTop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --model-module-name TestHarness &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 指定模型模块名称为 TestHarness&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --out-dut-smems-conf CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.top.mems.conf &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输出：用于顶层模块 ChipTop 的内存配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --out-model-smems-conf CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.model.mems.conf &lt;span style="color:#7f848e"># 输出：用于模型模块 TestHarness 的内存配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">### 这条命令使用 MacroCompiler 工具，根据内存配置生成顶层模块的内存宏单元。通过指定 synflops 模式，可以确保生成的内存结构符合同步触发器的合成要求，并生成对应的 Verilog 文件，用于后续的仿真或综合步骤。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">cd&lt;/span> CHIPYARD_HOME &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> java -cp CHIPYARD_HOME/.classpath_cache/tapeout.jar barstools.macros.MacroCompiler &lt;span style="color:#98c379">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">&lt;/span> -n CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.top.mems.conf &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输入内存配置文件，为顶层模块生成内存宏单元&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/gen-collateral/chipyard.harness.TestHarness.MyCoreConfig.top.mems.v &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输出 Verilog 文件，生成的内存宏单元描述&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -f CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.top.mems.fir &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输入 FIRRTL 文件，用于描述内存结构&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --mode synflops &lt;span style="color:#7f848e"># 指定生成模式为 synflops，用于同步触发器合成&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">### 这条命令与之前的命令类似，但这是针对模型模块 TestHarness 的内存配置。它使用 MacroCompiler 工具生成该模块的内存宏单元，确保生成的内存结构符合同步触发器的合成要求。生成的 Verilog 文件将用于后续的仿真或综合过程。 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">cd&lt;/span> CHIPYARD_HOME &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> java -cp CHIPYARD_HOME/.classpath_cache/tapeout.jar barstools.macros.MacroCompiler &lt;span style="color:#98c379">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">&lt;/span> -n CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.model.mems.conf &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输入：模型模块的内存配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/gen-collateral/chipyard.harness.TestHarness.MyCoreConfig.model.mems.v &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输出：生成的 Verilog 文件，描述模型模块的内存宏单元&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -f CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.model.mems.fir &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输入：用于描述模型模块内存结构的 FIRRTL 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --mode synflops &lt;span style="color:#7f848e"># 指定生成模式为 synflops，以支持同步触发器的合成&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 这条命令使用 Verilator 工具生成一个基于 TestDriver 顶层模块的 C++ 模拟器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>verilator --main --timing --cc --exe &lt;span style="color:#98c379">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">&lt;/span> -CFLAGS &lt;span style="color:#98c379">&amp;#34; -O3 -std=c++17 -ICHIPYARD_HOME/.conda-env/riscv-tools/include -ICHIPYARD_HOME/tools/DRAMSim2 -ICHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/gen-collateral -DVERILATOR -include CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig.plusArgs&amp;#34;&lt;/span> &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 编译标志，包含优化选项、标准和包含路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -LDFLAGS &lt;span style="color:#98c379">&amp;#34; -LCHIPYARD_HOME/.conda-env/riscv-tools/lib -Wl,-rpath,CHIPYARD_HOME/.conda-env/riscv-tools/lib -LCHIPYARD_HOME/sims/verilator -LCHIPYARD_HOME/tools/DRAMSim2 -lriscv -lfesvr -ldramsim &amp;#34;&lt;/span> &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 链接标志，指定库路径和链接的库&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --threads &lt;span style="color:#d19a66">1&lt;/span> --threads-dpi all -O3 --x-assign fast --x-initial fast &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 设置线程数，优化和快速初始化选项&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --output-split &lt;span style="color:#d19a66">10000&lt;/span> --output-split-cfuncs &lt;span style="color:#d19a66">100&lt;/span> --assert -Wno-fatal &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输出分割设置、启用断言，禁止致命警告&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --timescale 1ns/1ps --max-num-width &lt;span style="color:#d19a66">1048576&lt;/span> &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 设置时间尺度和宽度限制&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +define+CLOCK_PERIOD&lt;span style="color:#56b6c2">=&lt;/span>1.0 +define+RESET_DELAY&lt;span style="color:#56b6c2">=&lt;/span>777.7 +define+PRINTF_COND&lt;span style="color:#56b6c2">=&lt;/span>TestDriver.printf_cond &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 定义宏，包括时钟周期和重置延迟&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +define+STOP_COND&lt;span style="color:#56b6c2">=&lt;/span>!TestDriver.reset +define+MODEL&lt;span style="color:#56b6c2">=&lt;/span>TestHarness &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 进一步定义条件和模型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +define+RANDOMIZE_MEM_INIT +define+RANDOMIZE_REG_INIT +define+RANDOMIZE_GARBAGE_ASSIGN +define+RANDOMIZE_INVALID_ASSIGN +define+VERILATOR &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 启用随机化选项&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --top-module TestDriver --vpi &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 指定顶层模块为 TestDriver，启用 VPI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -f CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/sim_files.common.f &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 输入文件列表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -o CHIPYARD_HOME/sims/verilator/simulator-chipyard.harness-MyCoreConfig &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 指定输出的模拟器文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -Mdir CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig &lt;span style="color:#98c379">\ &lt;/span> &lt;span style="color:#7f848e"># 指定模型目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -CFLAGS &lt;span style="color:#98c379">&amp;#34;-include CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig/VTestDriver.h&amp;#34;&lt;/span> &lt;span style="color:#7f848e"># 额外的编译标志，包含 VTestDriver 头文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 建立VtestDriver.mk &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>touch CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig/VTestDriver.mk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 编译DRAMSim2的源文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make -C CHIPYARD_HOME/tools/DRAMSim2 libdramsim.a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 使用VTestDriver.mk来生成可执行文件simulator-chipyard.harness-MyCoreConfig &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make &lt;span style="color:#e06c75">VM_PARALLEL_BUILDS&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> -C CHIPYARD_HOME/sims/verilator/generated-src/chipyard.harness.TestHarness.MyCoreConfig/chipyard.harness.TestHarness.MyCoreConfig -f VTestDriver.mk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="附录">附录&lt;/h2>
&lt;h3 id="参考文献">参考文献&lt;/h3>
&lt;p>&lt;a class="link" href="https://alukens.com/project/spring-2021-independent-research-results/research_final_paper.pdf" target="_blank" rel="noopener"
>An Introduction to Declarative CPU Design and FPGA Development using the Chipyard SoC Design Framework&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://chipyard.readthedocs.io/en/1.10.0/" target="_blank" rel="noopener"
>chipyard手册&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/hwzhao/p/17363380.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/hwzhao/p/17363380.html&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/ucb-bar/chipyard/blob/main/docs/Advanced-Concepts/Top-Testharness.rst" target="_blank" rel="noopener"
>Tops,Test-Harnesses,and the Test-Driver&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/hwzhao/p/17306298.html" target="_blank" rel="noopener"
>chipyard的设备树介绍&lt;/a>&lt;/p>
&lt;h3 id="版权信息">版权信息&lt;/h3>
&lt;p>本文原载于 &lt;a class="link" href="https://vastcircle.github.io" target="_blank" rel="noopener"
>vastcircle.github.io&lt;/a>，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。&lt;/p></description></item><item><title>博客搭建</title><link>https://VastCircle.github.io/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link><pubDate>Sun, 06 Oct 2024 21:57:38 +0800</pubDate><guid>https://VastCircle.github.io/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid><description>&lt;h2 id="安装hugo">安装Hugo&lt;/h2>
&lt;p>ubuntu 系统使用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo apt install hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用以下命令进行验证&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>hugo version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建-hugo-网站">创建 Hugo 网站&lt;/h2>
&lt;p>通过上述命令安装 hugo 程序后，就可以通过 &lt;code>hugo new site&lt;/code> 命令进行网站创建、配置与本地调试了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>hugo new site robin-site
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置主题">配置主题&lt;/h2>
&lt;p>当通过上文命令创建我们的站点后，需要进行主题配置，Hugo 社区有了很丰富的主题，可以通过官网 &lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>Themes&lt;/a> 菜单选择自己喜欢的风格，查看预览效果，选择后可以进入主题项目仓库，一般都会有很详细的安装及配置说明。&lt;/p>
&lt;p>官方主题网站: &lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>https://themes.gohugo.io/&lt;/a>&lt;/p>
&lt;p>主题推荐:&lt;/p>
&lt;ul>
&lt;li>Pure: &lt;a class="link" href="https://themes.gohugo.io/hugo-theme-pure/" target="_blank" rel="noopener"
>https://themes.gohugo.io/hugo-theme-pure/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="关联主题仓库">关联主题仓库&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/reuixiy/hugo-theme-meme/blob/main/README.zh-cn.md" target="_blank" rel="noopener"
>https://github.com/reuixiy/hugo-theme-meme/blob/main/README.zh-cn.md&lt;/a>&lt;/p>
&lt;p>我们可以将主题仓库直接 &lt;code>git clone&lt;/code> 下来进行使用，例如在根目录robin-site下运行以下代码，即可下载pure主题.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git clone https://github.com/xiaoheiAh/hugo-theme-pure themes/pure
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种方式有一些弊端，当之后自己对主题进行修改后，可能会与原主题产生一些冲突，不方便版本管理与后续更新。官方更推荐使用的是将原主题仓库 &lt;code>fork&lt;/code> 到自己的账户，并使用 &lt;code>git submodule&lt;/code> 方式进行仓库链接，这样后续可以对主题的修改进行单独维护。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">cd&lt;/span> robin-site/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule add https://github.com/pseudoyu/pure themes/pure
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在根目录下的 &lt;code>config.toml&lt;/code>文件中添加新的一行:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">theme&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;pure&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="更新主题">更新主题&lt;/h3>
&lt;p>如果是 clone 了其他人的博客项目进行修改，则需要用以下命令进行初始化：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git submodule update --init --recursive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果需要同步主题仓库的最新修改，需要运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git submodule update --remote
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="hugo-theme-meme主题配置">hugo-theme-meme主题配置&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 安装meme&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule add --depth &lt;span style="color:#d19a66">1&lt;/span> https://github.com/reuixiy/hugo-theme-meme.git themes/meme
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 替换配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm config.toml &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> cp themes/meme/config-examples/zh-cn/config.toml config.toml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="zozo-主题配置">zozo 主题配置&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git submodule add https://github.com/varkai/hugo-theme-zozo themes/zozo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm config.toml &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> cp themes/zozo/config.toml config.toml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a class="link" href="https://gojun.me/posts/hello-hugo-blog/" target="_blank" rel="noopener"
>https://gojun.me/posts/hello-hugo-blog/&lt;/a>&lt;/p>
&lt;h3 id="hugo-theme-stack主题配置">Hugo-theme-stack主题配置&lt;/h3>
&lt;p>&lt;a class="link" href="https://stack.jimmycai.com/guide/getting-started" target="_blank" rel="noopener"
>https://stack.jimmycai.com/guide/getting-started&lt;/a>&lt;/p>
&lt;h2 id="新建博文">新建博文&lt;/h2>
&lt;p>完成后，可以通过 &lt;code>hugo new&lt;/code> 命令发布新文章。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new posts/test.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &lt;span style="color:#98c379">&amp;#34;Test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: 2022-10-21T19:00:43+08:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draft: &lt;span style="color:#e5c07b">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个命令会在 &lt;code>content&lt;/code> 目录下建立 &lt;code>post&lt;/code> 目录，并在 &lt;code>post&lt;/code> 下生成 &lt;code>test.md&lt;/code> 文件，博文书写就在这个文件里使用 Markdown 语法完成。博文的 front matter 里&lt;code>draft&lt;/code> 选项默认为 &lt;code>true&lt;/code>，需要改为 &lt;code>false&lt;/code> 才能发表博文，建议直接更改上面说的&lt;code>archetypes&lt;/code> 目录下的 &lt;code>default&lt;/code> 文件，把 &lt;code>draft: true&lt;/code> 改为 &lt;code>draft: false&lt;/code>，这样生成的博文就是默认可以发表的。&lt;/p>
&lt;h2 id="生成网页">生成网页&lt;/h2>
&lt;p>为了查看生成的博客的效果，我们在本地编辑调试时可以通过 &lt;code>hugo server&lt;/code> 命令进行本地实时调试预览，无须每次都重新生成。在cmd中运行以下命令，即我们可以通过浏览器 http://localhost:1313/ 地址访问我们的本地预览网页。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-fallback" data-lang="fallback">hugo server -D
&lt;/code>&lt;/pre>&lt;p>但此时只能在本地访问，如果想发布到 &lt;code>Github Pages&lt;/code> ， 还需要借助 GithubPages 工具。&lt;/p>
&lt;h2 id="配置文件">&lt;strong>配置文件&lt;/strong>&lt;/h2>
&lt;p>打开配置config.toml可以看到很多的参数可以配置，这里只描述最基本的内容，不同的主题可能会支持不同的参数配置，具体请看对应主题的说明文档。baseURL是站点的域名。title是站点的名称。theme是站点的主题。还有关于评论和打赏的相关配置，这些配置都可以参考官网主题的说明。&lt;/p>
&lt;p>每次发布的时候，都需要先执行hugo，把新写的文档按照主题进行渲染，所有生成的文件默认都在当前pulic的子目录下，可以在config里面配置到其他目录。然后把所有新的文件提交到github。提交代码之后，要等一段时间才生效。&lt;/p>
&lt;h2 id="github-actions-部署">github actions 部署&lt;/h2>
&lt;h3 id="两个仓库">两个仓库&lt;/h3>
&lt;p>如果想使用 Github Actions 自动部署 hugo 博客，则最起码需要创建两个 Github 的仓库。&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>第一个，便是存储博客 .md 源文件的地方，其实就是 hugo 系统；&lt;/li>
&lt;li>第二个，则是部署 Github Pages 的仓库，仓库名必须是 &lt;code>&amp;lt;username&amp;gt;.github.io&lt;/code>，这是 github 官方要求的。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h2 id="最终版">最终版&lt;/h2>
&lt;h3 id="主题">主题&lt;/h3>
&lt;p>使用的是大佬美化后的版本 &lt;a class="link" href="https://github.com/Mantyke/Hugo-stack-theme-mod" target="_blank" rel="noopener"
>Mantyke/Hugo-stack-theme-mod&lt;/a>。&lt;/p>
&lt;p>因为还是想用github工作流，不使用vercel,所以接下来结合前面的多篇文章操作,第一步是clone fork 之后的仓库，然后修改remote为一个创建好的私人仓库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone git@github.com:VastCircle/Hugo-stack.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote set-url origin git@github.com:VastCircle/hugostack.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后通过一系列的git操作将网页部署到gh-pages分支上&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rm -rf public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#98c379">&amp;#39;hugo project init&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push -u origin master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## create a new orphand branch (no commit history) named gh-pages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout --orphan gh-pages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## Unstage all files&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git rm -rf --cached &lt;span style="color:#c678dd">$(&lt;/span>git ls-files&lt;span style="color:#c678dd">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## Add and commit that file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#98c379">&amp;#34;INIT: initial commit on gh-pages branch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## Push to remote gh-pages branch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push origin gh-pages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## Return to master branch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## Add the gh-pages branch of the repository. It will look like a folder named public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git subtree add --prefix&lt;span style="color:#56b6c2">=&lt;/span>public git@github.com:VastCircle/hugostack.git gh-pages --squash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## Pull down the file we just committed. This helps avoid merge conflicts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git subtree pull --prefix&lt;span style="color:#56b6c2">=&lt;/span>public git@github.com:VastCircle/hugostack.git gh-pages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## Push the public subtree to the gh-pages branch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git subtree push --prefix&lt;span style="color:#56b6c2">=&lt;/span>public git@github.com:VastCircle/hugostack.git gh-pages
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>貌似失败了&lt;/p>
&lt;h3 id="再来一次">再来一次&lt;/h3>
&lt;p>这次把public作为一个独立的仓库，通过.gitignore去屏蔽public ,使得 主仓库不包括 public ,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rm -rf public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 主仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#98c379">&amp;#39;hugo project init&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push -u origin master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">## 推送仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">cd&lt;/span> public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote add origin https://github.com/VastCircle/VastCircle.github.io.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#98c379">&amp;#34;INIT: initial commit on public&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push -u origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>shell 脚本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#deploy.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">echo&lt;/span> -e &lt;span style="color:#98c379">&amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Build the project.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo &lt;span style="color:#7f848e"># if using a theme, replace by `hugo -t &amp;lt;yourtheme&amp;gt;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Go To Public folder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">cd&lt;/span> public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Add changes to git.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add -A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Commit changes.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">msg&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;rebuilding site `date`&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">[&lt;/span> &lt;span style="color:#e06c75">$#&lt;/span> -eq &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">then&lt;/span> &lt;span style="color:#e06c75">msg&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$1&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$msg&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Push source and build repos.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push origin master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Come Back&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">cd&lt;/span> ..
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加-github-action">添加 github action&lt;/h3>
&lt;p>.github/workflows/deploy-site.yaml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>name: deploy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>on:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> push:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> branches: &lt;span style="color:#56b6c2">[&lt;/span>&lt;span style="color:#98c379">&amp;#34;master&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workflow_dispatch:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># schedule:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># # Runs everyday at 8:00 AM&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># - cron: &amp;#34;0 0 * * *&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>permissions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> contents: &lt;span style="color:#e5c07b">read&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pages: write
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id-token: write
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Allow one concurrent deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>concurrency:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group: &lt;span style="color:#98c379">&amp;#34;pages&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cancel-in-progress: &lt;span style="color:#e5c07b">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Default to bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>defaults:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> run:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shell: bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jobs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># BUild job&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> build:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> env:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HUGO_VERSION: 0.134.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TZ: America/Los_Angeles
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> steps:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: Checkout
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uses: actions/checkout@v3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> with:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> submodules: &lt;span style="color:#e5c07b">true&lt;/span> &lt;span style="color:#7f848e"># Fetch Hugo themes (true OR recursive)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fetch-depth: &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#7f848e"># Fetch all history for .GitInfo and .Lastmod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: Setup Hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: pages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uses: peaceiris/actions-hugo@v2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> with:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hugo-version: &lt;span style="color:#98c379">&amp;#39;0.134.0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extended: &lt;span style="color:#e5c07b">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: Build Hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> env:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># For maximum backward compatibility with Hugo modules&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HUGO_ENVIRONMENT: production
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HUGO_ENV: production
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> run: hugo --minify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: Deploy Web
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: deployment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uses: peaceiris/actions-gh-pages@v3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> with:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PERSONAL_TOKEN: &lt;span style="color:#98c379">${&lt;/span>{ secrets.PERSONAL_TOKEN &lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EXTERNAL_REPOSITORY: VastCircle/VastCircle.github.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PUBLISH_BRANCH: master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PUBLISH_DIR: ./public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> commit_message: &lt;span style="color:#98c379">${&lt;/span>{ github.event.head_commit.message &lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="如何编写博客">如何编写博客&lt;/h2>
&lt;p>正如同其他的博客，使用 &lt;strong>Markdown 语言&lt;/strong>来编写博客。Markdown 流行且极易上手，因此这里就不多介绍语法，如果不会的可以自己搜索了解。&lt;/p>
&lt;h3 id="使用-hugo-创建文章">使用 Hugo 创建文章&lt;/h3>
&lt;p>在博客根目录下运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-batch" data-lang="batch">&lt;span style="display:flex;">&lt;span>hugo new post/untitled.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为什么要用 hugo 来新建而不是创建一个 &lt;code>.md&lt;/code> 文件呢？这是因为使用 hugo 创建会自动使用已填入 &lt;code>Front Matter&lt;/code>的模板。&lt;/p>
&lt;p>&lt;code>Front Matter&lt;/code> 用于标识文章的标题、时间等信息，hugo 就是据此来生成静态页面。关于属性的含义和用法可以参考 &lt;a class="link" href="https://www.gohugo.org/doc/content/front-matter/" target="_blank" rel="noopener"
>Hugo 中文文档&lt;/a>。&lt;/p>
&lt;p>模板可以在 &lt;code>\archetypes\default.md&lt;/code> 下找到：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34; # 标题，创建时自动填充
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>description: # 文章简介
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: {{ .Date }} # 日期，创建时自动填充，格式同 2023-01-15T12:00:00+08:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>image: # 文章的封面，留空就是没有，填文章所在位置的相对地址，通常放在同目录下，
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>math: # 是否启用 KaTex，填 true 启用
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>license: # 文章尾部显示的协议，false 为隐藏，其他作为内容，留空就是使用 config.yaml 里默认的
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hidden: false # 是否隐藏，一般用不到
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>comments: true # 因为 bug 所以这个属性只要存在，不管是 true 还是 false 都会导致回复无法显示，需要删掉
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draft: true # 是否为草稿，建议改为 false 或者删掉这个属性以防止忘记修改，毕竟我们一般都是写好了才部署到服务器上
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了方便，我参考网络以及 stack-mod 的功能对模板进行了一些改造：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>slug: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>description:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: &amp;#34;{{ .Date }}&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lastmod: &amp;#34;{{ .Date }}&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>image: cover.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>math:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>license:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hidden: false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draft: false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>categories: [&amp;#34;&amp;#34;]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tags: [&amp;#34;&amp;#34;]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>## 附录
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>### 参考文献
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>### 版权信息
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>本文原载于 [&lt;span style="color:#e06c75">reincarnatey.net&lt;/span>](&lt;span style="color:#e06c75">https://blog.reincarnatey.net&lt;/span>)，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因此我们可以编写一个批处理程序来快速帮我们生成文章：&lt;/p>
&lt;p>&lt;code>create_post.sh&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-batch" data-lang="batch">&lt;span style="display:flex;">&lt;span>#!/bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># 输出提示信息
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">echo&lt;/span> &lt;span style="color:#98c379">&amp;#34;【创建文章】&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># 读取用户输入的 Slug
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>read -p &lt;span style="color:#98c379">&amp;#34;请输入Slug: &amp;#34;&lt;/span> input
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># 获取当前日期
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>current_date=$(date +&lt;span style="color:#e06c75">%Y%&lt;/span>m%d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># 使用 Hugo 创建新文章
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo new post/$current_date-$input/index.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># 暂停，提示用户操作完成
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>read -p &lt;span style="color:#98c379">&amp;#34;按任意键继续...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用此批处理程序生成的文章会创建在 &lt;code>\content\post\2023\0115-test\index.md&lt;/code>，便于我们整理文章资料，同时后续在同目录下存放文章的封面也不会导致内容很乱。&lt;/p>
&lt;h3 id="使用-hugo-创建类别标签">使用 Hugo 创建类别、标签&lt;/h3>
&lt;p>创建 Categories 和 Tag 也同理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-batch" data-lang="batch">&lt;span style="display:flex;">&lt;span>hugo new categories/testcat.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo new tags/testtag.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>hugo 会自动应用 &lt;code>\archetypes\categories.md&lt;/code> 和 &lt;code>\archetypes\tags.md&lt;/code> 的模板，但是这两个模板都不太好，建议都改为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>slug: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>description:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>image: cover.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>style:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> background: &amp;#34;#2a9d8f&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color: &amp;#34;#fff&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>create_Categories.sh&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-batch" data-lang="batch">&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#c678dd">echo&lt;/span> off
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">echo&lt;/span> 【创建类别】
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">set&lt;/span> &lt;span style="color:#c678dd">/p&lt;/span> &lt;span style="color:#e06c75">input&lt;/span>= 请输入类别名:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo new categories/&lt;span style="color:#e06c75">%input%&lt;/span>/_index.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">pause&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成的categories就是在改变如下图所示的界面&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 632;
flex-basis: 1518px"
>
&lt;a href="https://VastCircle.github.io/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image1.png" data-size="1050x166">
&lt;img src="https://VastCircle.github.io/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image1.png"
width="1050"
height="166"
srcset="https://VastCircle.github.io/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image1_hu14227645176143580784.png 480w, https://VastCircle.github.io/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image1_hu14426535897027265073.png 1024w"
loading="lazy"
alt="image1">
&lt;/a>
&lt;figcaption>image1&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;code>create_tag.sh&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-batch" data-lang="batch">&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#c678dd">echo&lt;/span> off
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">echo&lt;/span> 【创建标签】
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">set&lt;/span> &lt;span style="color:#c678dd">/p&lt;/span> &lt;span style="color:#e06c75">input&lt;/span>= 请输入标签名:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo new tags/&lt;span style="color:#e06c75">%input%&lt;/span>/_index.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">pause&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意&lt;/strong>：如果创建多级文件夹时文章文件名不是 &lt;code>index.md&lt;/code> 或者类别、标签文件名不是 &lt;code>_index.md&lt;/code> 的话，设置封面图片会出现问题。&lt;/p>
&lt;h2 id="引用">引用&lt;/h2>
&lt;p>&lt;a class="link" href="https://hk.v2ex.com/t/1009591" target="_blank" rel="noopener"
>https://hk.v2ex.com/t/1009591&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://jianzhnie.github.io/post/hugo_site/" target="_blank" rel="noopener"
>https://jianzhnie.github.io/post/hugo_site/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://hyrtee.github.io/2023/start-blog/" target="_blank" rel="noopener"
>https://hyrtee.github.io/2023/start-blog/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://smc.im/post/deploy-hugo-blog-with-github-actions/" target="_blank" rel="noopener"
>https://smc.im/post/deploy-hugo-blog-with-github-actions/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.reincarnatey.net/2023/build-hugo-blog-with-stack-mod/" target="_blank" rel="noopener"
>建站技术 | 使用 Hugo + Stack 简单搭建一个博客&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://kaichu.io/posts/my-first-post/" target="_blank" rel="noopener"
>https://kaichu.io/posts/my-first-post/&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://stack.jimmycai.com/" target="_blank" rel="noopener"
>stack 手册&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.oddyti.com/post/hugo-problems/#github%E4%BB%93%E5%BA%93%E5%8F%8C%E5%88%86%E6%94%AF%E5%88%86%E5%88%AB%E5%AD%98%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81%E5%92%8C%E9%83%A8%E7%BD%B2%E5%90%8E%E7%9A%84%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener"
>部署hugo 踩过的坑&lt;/a>_&lt;/p>
&lt;p>&lt;a class="link" href="https://xrg.fj.cn/p/hugo-stack%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%96%B0%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener"
>https://xrg.fj.cn/p/hugo-stack%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%96%B0%E5%B0%8F%E8%AE%B0/&lt;/a>&lt;/p></description></item></channel></rss>