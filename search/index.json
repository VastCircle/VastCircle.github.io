[{"content":"安装Hugo ubuntu 系统使用\nsudo apt install hugo 使用以下命令进行验证\nhugo version 创建 Hugo 网站 通过上述命令安装 hugo 程序后，就可以通过 hugo new site 命令进行网站创建、配置与本地调试了。\nhugo new site robin-site 配置主题 当通过上文命令创建我们的站点后，需要进行主题配置，Hugo 社区有了很丰富的主题，可以通过官网 Themes 菜单选择自己喜欢的风格，查看预览效果，选择后可以进入主题项目仓库，一般都会有很详细的安装及配置说明。\n官方主题网站: https://themes.gohugo.io/\n主题推荐:\nPure: https://themes.gohugo.io/hugo-theme-pure/ 关联主题仓库 https://github.com/reuixiy/hugo-theme-meme/blob/main/README.zh-cn.md\n我们可以将主题仓库直接 git clone 下来进行使用，例如在根目录robin-site下运行以下代码，即可下载pure主题.\ngit clone https://github.com/xiaoheiAh/hugo-theme-pure themes/pure 这种方式有一些弊端，当之后自己对主题进行修改后，可能会与原主题产生一些冲突，不方便版本管理与后续更新。官方更推荐使用的是将原主题仓库 fork 到自己的账户，并使用 git submodule 方式进行仓库链接，这样后续可以对主题的修改进行单独维护。\ncd robin-site/ git init git submodule add https://github.com/pseudoyu/pure themes/pure 然后在根目录下的 config.toml文件中添加新的一行:\ntheme = \u0026#34;pure\u0026#34; 更新主题 如果是 clone 了其他人的博客项目进行修改，则需要用以下命令进行初始化：\ngit submodule update --init --recursive 如果需要同步主题仓库的最新修改，需要运行以下命令：\ngit submodule update --remote hugo-theme-meme主题配置 ## 安装meme git submodule add --depth 1 https://github.com/reuixiy/hugo-theme-meme.git themes/meme ## 替换配置 rm config.toml \u0026amp;\u0026amp; cp themes/meme/config-examples/zh-cn/config.toml config.toml zozo 主题配置 git submodule add https://github.com/varkai/hugo-theme-zozo themes/zozo rm config.toml \u0026amp;\u0026amp; cp themes/zozo/config.toml config.toml https://gojun.me/posts/hello-hugo-blog/\nHugo-theme-stack主题配置 https://stack.jimmycai.com/guide/getting-started\n新建博文 完成后，可以通过 hugo new 命令发布新文章。\nhugo new posts/test.md --- title: \u0026#34;Test\u0026#34; date: 2022-10-21T19:00:43+08:00 draft: true --- 这个命令会在 content 目录下建立 post 目录，并在 post 下生成 test.md 文件，博文书写就在这个文件里使用 Markdown 语法完成。博文的 front matter 里draft 选项默认为 true，需要改为 false 才能发表博文，建议直接更改上面说的archetypes 目录下的 default 文件，把 draft: true 改为 draft: false，这样生成的博文就是默认可以发表的。\n生成网页 为了查看生成的博客的效果，我们在本地编辑调试时可以通过 hugo server 命令进行本地实时调试预览，无须每次都重新生成。在cmd中运行以下命令，即我们可以通过浏览器 http://localhost:1313/ 地址访问我们的本地预览网页。\nhugo server -D 但此时只能在本地访问，如果想发布到 Github Pages ， 还需要借助 GithubPages 工具。\n配置文件 打开配置config.toml可以看到很多的参数可以配置，这里只描述最基本的内容，不同的主题可能会支持不同的参数配置，具体请看对应主题的说明文档。baseURL是站点的域名。title是站点的名称。theme是站点的主题。还有关于评论和打赏的相关配置，这些配置都可以参考官网主题的说明。\n每次发布的时候，都需要先执行hugo，把新写的文档按照主题进行渲染，所有生成的文件默认都在当前pulic的子目录下，可以在config里面配置到其他目录。然后把所有新的文件提交到github。提交代码之后，要等一段时间才生效。\ngithub actions 部署 两个仓库 如果想使用 Github Actions 自动部署 hugo 博客，则最起码需要创建两个 Github 的仓库。\n第一个，便是存储博客 .md 源文件的地方，其实就是 hugo 系统； 第二个，则是部署 Github Pages 的仓库，仓库名必须是 \u0026lt;username\u0026gt;.github.io，这是 github 官方要求的。 最终版 主题 使用的是大佬美化后的版本 Mantyke/Hugo-stack-theme-mod。\n因为还是想用github工作流，不使用vercel,所以接下来结合前面的多篇文章操作,第一步是clone fork 之后的仓库，然后修改remote为一个创建好的私人仓库\ngit clone git@github.com:VastCircle/Hugo-stack.git git remote set-url origin git@github.com:VastCircle/hugostack.git 之后通过一系列的git操作将网页部署到gh-pages分支上\nrm -rf public git add . git commit -m \u0026#39;hugo project init\u0026#39; git push -u origin master ## create a new orphand branch (no commit history) named gh-pages git checkout --orphan gh-pages ## Unstage all files git rm -rf --cached $(git ls-files) ## Add and commit that file git add . git commit -m \u0026#34;INIT: initial commit on gh-pages branch\u0026#34; ## Push to remote gh-pages branch git push origin gh-pages ## Return to master branch git checkout master ## Add the gh-pages branch of the repository. It will look like a folder named public git subtree add --prefix=public git@github.com:VastCircle/hugostack.git gh-pages --squash ## Pull down the file we just committed. This helps avoid merge conflicts git subtree pull --prefix=public git@github.com:VastCircle/hugostack.git gh-pages ## Push the public subtree to the gh-pages branch git subtree push --prefix=public git@github.com:VastCircle/hugostack.git gh-pages 貌似失败了\n再来一次 这次把public作为一个独立的仓库，通过.gitignore去屏蔽public ,使得 主仓库不包括 public ,\nrm -rf public ## 主仓库 git add . git commit -m \u0026#39;hugo project init\u0026#39; git push -u origin master ## 推送仓库 hugo cd public git remote add origin https://github.com/VastCircle/VastCircle.github.io.git git add . git commit -m \u0026#34;INIT: initial commit on public\u0026#34; git push -u origin master shell 脚本\n#deploy.sh #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to GitHub...\\033[0m\u0026#34; # Build the project. hugo # if using a theme, replace by `hugo -t \u0026lt;yourtheme\u0026gt;` # Go To Public folder cd public # Add changes to git. git add -A # Commit changes. msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin master # Come Back cd .. 添加 github action .github/workflows/deploy-site.yaml\nname: deploy on: push: branches: [\u0026#34;master\u0026#34;] workflow_dispatch: # schedule: # # Runs everyday at 8:00 AM # - cron: \u0026#34;0 0 * * *\u0026#34; # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow one concurrent deployment concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: true # Default to bash defaults: run: shell: bash jobs: # BUild job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.134.0 TZ: America/Los_Angeles steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo id: pages uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.134.0\u0026#39; extended: true - name: Build Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: hugo --minify - name: Deploy Web id: deployment uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: VastCircle/VastCircle.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} 如何编写博客 正如同其他的博客，使用 Markdown 语言来编写博客。Markdown 流行且极易上手，因此这里就不多介绍语法，如果不会的可以自己搜索了解。\n使用 Hugo 创建文章 在博客根目录下运行：\nhugo new post/untitled.md 为什么要用 hugo 来新建而不是创建一个 .md 文件呢？这是因为使用 hugo 创建会自动使用已填入 Front Matter的模板。\nFront Matter 用于标识文章的标题、时间等信息，hugo 就是据此来生成静态页面。关于属性的含义和用法可以参考 Hugo 中文文档。\n模板可以在 \\archetypes\\default.md 下找到：\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; # 标题，创建时自动填充 description: # 文章简介 date: {{ .Date }} # 日期，创建时自动填充，格式同 2023-01-15T12:00:00+08:00 image: # 文章的封面，留空就是没有，填文章所在位置的相对地址，通常放在同目录下， math: # 是否启用 KaTex，填 true 启用 license: # 文章尾部显示的协议，false 为隐藏，其他作为内容，留空就是使用 config.yaml 里默认的 hidden: false # 是否隐藏，一般用不到 comments: true # 因为 bug 所以这个属性只要存在，不管是 true 还是 false 都会导致回复无法显示，需要删掉 draft: true # 是否为草稿，建议改为 false 或者删掉这个属性以防止忘记修改，毕竟我们一般都是写好了才部署到服务器上 --- 为了方便，我参考网络以及 stack-mod 的功能对模板进行了一些改造：\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: date: \u0026#34;{{ .Date }}\u0026#34; lastmod: \u0026#34;{{ .Date }}\u0026#34; image: cover.png math: license: hidden: false draft: false categories: [\u0026#34;\u0026#34;] tags: [\u0026#34;\u0026#34;] --- ## 附录 ### 参考文献 ### 版权信息 本文原载于 [reincarnatey.net](https://blog.reincarnatey.net)，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。 因此我们可以编写一个批处理程序来快速帮我们生成文章：\ncreate_post.sh：\n#!/bin/bash # 输出提示信息 echo \u0026#34;【创建文章】\u0026#34; # 读取用户输入的 Slug read -p \u0026#34;请输入Slug: \u0026#34; input # 获取当前日期 current_date=$(date +%Y%m%d) # 使用 Hugo 创建新文章 hugo new post/$current_date-$input/index.md # 暂停，提示用户操作完成 read -p \u0026#34;按任意键继续...\u0026#34; 用此批处理程序生成的文章会创建在 \\content\\post\\2023\\0115-test\\index.md，便于我们整理文章资料，同时后续在同目录下存放文章的封面也不会导致内容很乱。\n使用 Hugo 创建类别、标签 创建 Categories 和 Tag 也同理：\nhugo new categories/testcat.md hugo new tags/testtag.md hugo 会自动应用 \\archetypes\\categories.md 和 \\archetypes\\tags.md 的模板，但是这两个模板都不太好，建议都改为：\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: image: cover.png style: background: \u0026#34;#2a9d8f\u0026#34; color: \u0026#34;#fff\u0026#34; --- create_Categories.sh：\n@echo off echo 【创建类别】 set /p input= 请输入类别名: hugo new categories/%input%/_index.md pause image1 create_tag.sh：\n@echo off echo 【创建标签】 set /p input= 请输入标签名: hugo new tags/%input%/_index.md pause 注意：如果创建多级文件夹时文章文件名不是 index.md 或者类别、标签文件名不是 _index.md 的话，设置封面图片会出现问题。\n引用 https://hk.v2ex.com/t/1009591\nhttps://jianzhnie.github.io/post/hugo_site/\nhttps://hyrtee.github.io/2023/start-blog/\nhttps://smc.im/post/deploy-hugo-blog-with-github-actions/\n建站技术 | 使用 Hugo + Stack 简单搭建一个博客\nhttps://kaichu.io/posts/my-first-post/\nstack 手册\n部署hugo 踩过的坑_\nhttps://xrg.fj.cn/p/hugo-stack%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%96%B0%E5%B0%8F%E8%AE%B0/\n","date":"2024-10-06T21:57:38+08:00","permalink":"https://VastCircle.github.io/2024/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","title":"博客搭建"}]