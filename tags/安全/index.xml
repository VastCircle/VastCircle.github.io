<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>安全 on VastCircle's blog</title><link>https://VastCircle.github.io/tags/%E5%AE%89%E5%85%A8/</link><description>Recent content in 安全 on VastCircle's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 04 Apr 2025 17:05:54 +0800</lastBuildDate><atom:link href="https://VastCircle.github.io/tags/%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Meek:Re Superscar Processors</title><link>https://VastCircle.github.io/2025/meekre-superscar-processors/</link><pubDate>Fri, 04 Apr 2025 17:05:54 +0800</pubDate><guid>https://VastCircle.github.io/2025/meekre-superscar-processors/</guid><description>&lt;p>异构并行错误检测作为一种颇具前景的替代方案[22][23][2]，其核心思想是：利用强归纳法将运行在乱序执行超标量高性能核心（大核）上的软件程序划分为多个离散段（通过寄存器检查点/RCP实现），并在若干组能效比更高的小型核心（小核）上重新执行这些程序段以实现验证。为确保内存访问及其他不可重复操作的可重放性，系统会在大核的提交阶段从程序流中提取相关指令（如加载/存储操作）的地址与数据，生成分区式分布式加载存储操作日志。当某程序段的日志填满或达到指令超时阈值时，将触发新的寄存器检查点，对应的小核随即开始验证起始RCP（SRCP）与终止RCP（ERCP）之间的程序段。通过验证任务的流水线重叠执行，小核集群可提供充足的计算能力以匹配大核的执行速度，从而在低开销前提下实现全范围错误检测[22]。&lt;/p></description></item></channel></rss>